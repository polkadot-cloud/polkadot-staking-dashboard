{
    "lookup": [
        {
            "id": 0,
            "path": [
                "sp_core",
                "crypto",
                "AccountId32"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 1,
                        "typeName": "[u8; 32]",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 1,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 32,
                    "type": 2
                }
            },
            "docs": []
        },
        {
            "id": 2,
            "path": [],
            "params": [],
            "def": {
                "tag": "primitive",
                "value": {
                    "tag": "u8"
                }
            },
            "docs": []
        },
        {
            "id": 3,
            "path": [
                "frame_system",
                "AccountInfo"
            ],
            "params": [
                {
                    "name": "Nonce",
                    "type": 4
                },
                {
                    "name": "AccountData",
                    "type": 5
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "nonce",
                        "type": 4,
                        "typeName": "Nonce",
                        "docs": []
                    },
                    {
                        "name": "consumers",
                        "type": 4,
                        "typeName": "RefCount",
                        "docs": []
                    },
                    {
                        "name": "providers",
                        "type": 4,
                        "typeName": "RefCount",
                        "docs": []
                    },
                    {
                        "name": "sufficients",
                        "type": 4,
                        "typeName": "RefCount",
                        "docs": []
                    },
                    {
                        "name": "data",
                        "type": 5,
                        "typeName": "AccountData",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 4,
            "path": [],
            "params": [],
            "def": {
                "tag": "primitive",
                "value": {
                    "tag": "u32"
                }
            },
            "docs": []
        },
        {
            "id": 5,
            "path": [
                "pallet_balances",
                "types",
                "AccountData"
            ],
            "params": [
                {
                    "name": "Balance",
                    "type": 6
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "free",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "reserved",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "frozen",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "flags",
                        "type": 7,
                        "typeName": "ExtraFlags",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 6,
            "path": [],
            "params": [],
            "def": {
                "tag": "primitive",
                "value": {
                    "tag": "u128"
                }
            },
            "docs": []
        },
        {
            "id": 7,
            "path": [
                "pallet_balances",
                "types",
                "ExtraFlags"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 6,
                        "typeName": "u128",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 8,
            "path": [],
            "params": [],
            "def": {
                "tag": "primitive",
                "value": {
                    "tag": "bool"
                }
            },
            "docs": []
        },
        {
            "id": 9,
            "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 10
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "normal",
                        "type": 10,
                        "typeName": "T",
                        "docs": []
                    },
                    {
                        "name": "operational",
                        "type": 10,
                        "typeName": "T",
                        "docs": []
                    },
                    {
                        "name": "mandatory",
                        "type": 10,
                        "typeName": "T",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 10,
            "path": [
                "sp_weights",
                "weight_v2",
                "Weight"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "ref_time",
                        "type": 11,
                        "typeName": "u64",
                        "docs": []
                    },
                    {
                        "name": "proof_size",
                        "type": 11,
                        "typeName": "u64",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 11,
            "path": [],
            "params": [],
            "def": {
                "tag": "compact",
                "value": 12
            },
            "docs": []
        },
        {
            "id": 12,
            "path": [],
            "params": [],
            "def": {
                "tag": "primitive",
                "value": {
                    "tag": "u64"
                }
            },
            "docs": []
        },
        {
            "id": 13,
            "path": [
                "primitive_types",
                "H256"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 1,
                        "typeName": "[u8; 32]",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 14,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 2
            },
            "docs": []
        },
        {
            "id": 15,
            "path": [
                "sp_runtime",
                "generic",
                "digest",
                "Digest"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "logs",
                        "type": 16,
                        "typeName": "Vec<DigestItem>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 16,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 17
            },
            "docs": []
        },
        {
            "id": 17,
            "path": [
                "sp_runtime",
                "generic",
                "digest",
                "DigestItem"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "PreRuntime",
                        "fields": [
                            {
                                "type": 18,
                                "typeName": "ConsensusEngineId",
                                "docs": []
                            },
                            {
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "Consensus",
                        "fields": [
                            {
                                "type": 18,
                                "typeName": "ConsensusEngineId",
                                "docs": []
                            },
                            {
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "Seal",
                        "fields": [
                            {
                                "type": 18,
                                "typeName": "ConsensusEngineId",
                                "docs": []
                            },
                            {
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "Other",
                        "fields": [
                            {
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "RuntimeEnvironmentUpdated",
                        "fields": [],
                        "index": 8,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 18,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 4,
                    "type": 2
                }
            },
            "docs": []
        },
        {
            "id": 19,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 20
            },
            "docs": []
        },
        {
            "id": 20,
            "path": [
                "frame_system",
                "EventRecord"
            ],
            "params": [
                {
                    "name": "E",
                    "type": 21
                },
                {
                    "name": "T",
                    "type": 13
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "phase",
                        "type": 497,
                        "typeName": "Phase",
                        "docs": []
                    },
                    {
                        "name": "event",
                        "type": 21,
                        "typeName": "E",
                        "docs": []
                    },
                    {
                        "name": "topics",
                        "type": 101,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 21,
            "path": [
                "polkadot_runtime",
                "RuntimeEvent"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "System",
                        "fields": [
                            {
                                "type": 22,
                                "typeName": "frame_system::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Scheduler",
                        "fields": [
                            {
                                "type": 31,
                                "typeName": "pallet_scheduler::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Preimage",
                        "fields": [
                            {
                                "type": 36,
                                "typeName": "pallet_preimage::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 10,
                        "docs": []
                    },
                    {
                        "name": "Indices",
                        "fields": [
                            {
                                "type": 37,
                                "typeName": "pallet_indices::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "Balances",
                        "fields": [
                            {
                                "type": 38,
                                "typeName": "pallet_balances::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "TransactionPayment",
                        "fields": [
                            {
                                "type": 40,
                                "typeName": "pallet_transaction_payment::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 32,
                        "docs": []
                    },
                    {
                        "name": "Staking",
                        "fields": [
                            {
                                "type": 41,
                                "typeName": "pallet_staking::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "Offences",
                        "fields": [
                            {
                                "type": 47,
                                "typeName": "pallet_offences::Event",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": []
                    },
                    {
                        "name": "Session",
                        "fields": [
                            {
                                "type": 49,
                                "typeName": "pallet_session::Event",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": []
                    },
                    {
                        "name": "Grandpa",
                        "fields": [
                            {
                                "type": 50,
                                "typeName": "pallet_grandpa::Event",
                                "docs": []
                            }
                        ],
                        "index": 11,
                        "docs": []
                    },
                    {
                        "name": "Treasury",
                        "fields": [
                            {
                                "type": 54,
                                "typeName": "pallet_treasury::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 19,
                        "docs": []
                    },
                    {
                        "name": "ConvictionVoting",
                        "fields": [
                            {
                                "type": 89,
                                "typeName": "pallet_conviction_voting::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 20,
                        "docs": []
                    },
                    {
                        "name": "Referenda",
                        "fields": [
                            {
                                "type": 90,
                                "typeName": "pallet_referenda::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 21,
                        "docs": []
                    },
                    {
                        "name": "Whitelist",
                        "fields": [
                            {
                                "type": 449,
                                "typeName": "pallet_whitelist::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 23,
                        "docs": []
                    },
                    {
                        "name": "Parameters",
                        "fields": [
                            {
                                "type": 454,
                                "typeName": "pallet_parameters::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 27,
                        "docs": []
                    },
                    {
                        "name": "Claims",
                        "fields": [
                            {
                                "type": 460,
                                "typeName": "claims::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 24,
                        "docs": []
                    },
                    {
                        "name": "Vesting",
                        "fields": [
                            {
                                "type": 461,
                                "typeName": "pallet_vesting::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 25,
                        "docs": []
                    },
                    {
                        "name": "Utility",
                        "fields": [
                            {
                                "type": 462,
                                "typeName": "pallet_utility::Event",
                                "docs": []
                            }
                        ],
                        "index": 26,
                        "docs": []
                    },
                    {
                        "name": "Proxy",
                        "fields": [
                            {
                                "type": 463,
                                "typeName": "pallet_proxy::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 29,
                        "docs": []
                    },
                    {
                        "name": "Multisig",
                        "fields": [
                            {
                                "type": 464,
                                "typeName": "pallet_multisig::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 30,
                        "docs": []
                    },
                    {
                        "name": "Bounties",
                        "fields": [
                            {
                                "type": 465,
                                "typeName": "pallet_bounties::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 34,
                        "docs": []
                    },
                    {
                        "name": "ChildBounties",
                        "fields": [
                            {
                                "type": 466,
                                "typeName": "pallet_child_bounties::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 38,
                        "docs": []
                    },
                    {
                        "name": "ElectionProviderMultiPhase",
                        "fields": [
                            {
                                "type": 467,
                                "typeName": "pallet_election_provider_multi_phase::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 36,
                        "docs": []
                    },
                    {
                        "name": "VoterList",
                        "fields": [
                            {
                                "type": 471,
                                "typeName": "pallet_bags_list::Event<Runtime, pallet_bags_list::Instance1>",
                                "docs": []
                            }
                        ],
                        "index": 37,
                        "docs": []
                    },
                    {
                        "name": "NominationPools",
                        "fields": [
                            {
                                "type": 472,
                                "typeName": "pallet_nomination_pools::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 39,
                        "docs": []
                    },
                    {
                        "name": "FastUnstake",
                        "fields": [
                            {
                                "type": 473,
                                "typeName": "pallet_fast_unstake::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 40,
                        "docs": []
                    },
                    {
                        "name": "ParaInclusion",
                        "fields": [
                            {
                                "type": 474,
                                "typeName": "parachains_inclusion::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 53,
                        "docs": []
                    },
                    {
                        "name": "Paras",
                        "fields": [
                            {
                                "type": 478,
                                "typeName": "parachains_paras::Event",
                                "docs": []
                            }
                        ],
                        "index": 56,
                        "docs": []
                    },
                    {
                        "name": "Hrmp",
                        "fields": [
                            {
                                "type": 479,
                                "typeName": "parachains_hrmp::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 60,
                        "docs": []
                    },
                    {
                        "name": "ParasDisputes",
                        "fields": [
                            {
                                "type": 480,
                                "typeName": "parachains_disputes::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 62,
                        "docs": []
                    },
                    {
                        "name": "OnDemand",
                        "fields": [
                            {
                                "type": 483,
                                "typeName": "parachains_assigner_on_demand::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 64,
                        "docs": []
                    },
                    {
                        "name": "Registrar",
                        "fields": [
                            {
                                "type": 484,
                                "typeName": "paras_registrar::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 70,
                        "docs": []
                    },
                    {
                        "name": "Slots",
                        "fields": [
                            {
                                "type": 485,
                                "typeName": "slots::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 71,
                        "docs": []
                    },
                    {
                        "name": "Auctions",
                        "fields": [
                            {
                                "type": 486,
                                "typeName": "auctions::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 72,
                        "docs": []
                    },
                    {
                        "name": "Crowdloan",
                        "fields": [
                            {
                                "type": 487,
                                "typeName": "crowdloan::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 73,
                        "docs": []
                    },
                    {
                        "name": "Coretime",
                        "fields": [
                            {
                                "type": 488,
                                "typeName": "coretime::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 74,
                        "docs": []
                    },
                    {
                        "name": "StateTrieMigration",
                        "fields": [
                            {
                                "type": 489,
                                "typeName": "pallet_state_trie_migration::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 98,
                        "docs": []
                    },
                    {
                        "name": "XcmPallet",
                        "fields": [
                            {
                                "type": 492,
                                "typeName": "pallet_xcm::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 99,
                        "docs": []
                    },
                    {
                        "name": "MessageQueue",
                        "fields": [
                            {
                                "type": 494,
                                "typeName": "pallet_message_queue::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 100,
                        "docs": []
                    },
                    {
                        "name": "AssetRate",
                        "fields": [
                            {
                                "type": 496,
                                "typeName": "pallet_asset_rate::Event<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 101,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 22,
            "path": [
                "frame_system",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "ExtrinsicSuccess",
                        "fields": [
                            {
                                "name": "dispatch_info",
                                "type": 23,
                                "typeName": "DispatchInfo",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "An extrinsic completed successfully."
                        ]
                    },
                    {
                        "name": "ExtrinsicFailed",
                        "fields": [
                            {
                                "name": "dispatch_error",
                                "type": 26,
                                "typeName": "DispatchError",
                                "docs": []
                            },
                            {
                                "name": "dispatch_info",
                                "type": 23,
                                "typeName": "DispatchInfo",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "An extrinsic failed."
                        ]
                    },
                    {
                        "name": "CodeUpdated",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "`:code` was updated."
                        ]
                    },
                    {
                        "name": "NewAccount",
                        "fields": [
                            {
                                "name": "account",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "A new account was created."
                        ]
                    },
                    {
                        "name": "KilledAccount",
                        "fields": [
                            {
                                "name": "account",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "An account was reaped."
                        ]
                    },
                    {
                        "name": "Remarked",
                        "fields": [
                            {
                                "name": "sender",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "hash",
                                "type": 13,
                                "typeName": "T::Hash",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "On on-chain remark happened."
                        ]
                    },
                    {
                        "name": "UpgradeAuthorized",
                        "fields": [
                            {
                                "name": "code_hash",
                                "type": 13,
                                "typeName": "T::Hash",
                                "docs": []
                            },
                            {
                                "name": "check_version",
                                "type": 8,
                                "typeName": "bool",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "An upgrade was authorized."
                        ]
                    }
                ]
            },
            "docs": [
                "Event for the System pallet."
            ]
        },
        {
            "id": 23,
            "path": [
                "frame_support",
                "dispatch",
                "DispatchInfo"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "weight",
                        "type": 10,
                        "typeName": "Weight",
                        "docs": []
                    },
                    {
                        "name": "class",
                        "type": 24,
                        "typeName": "DispatchClass",
                        "docs": []
                    },
                    {
                        "name": "pays_fee",
                        "type": 25,
                        "typeName": "Pays",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 24,
            "path": [
                "frame_support",
                "dispatch",
                "DispatchClass"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Normal",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Operational",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Mandatory",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 25,
            "path": [
                "frame_support",
                "dispatch",
                "Pays"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Yes",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "No",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 26,
            "path": [
                "sp_runtime",
                "DispatchError"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Other",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "CannotLookup",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "BadOrigin",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Module",
                        "fields": [
                            {
                                "type": 27,
                                "typeName": "ModuleError",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "ConsumerRemaining",
                        "fields": [],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "NoProviders",
                        "fields": [],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "TooManyConsumers",
                        "fields": [],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "Token",
                        "fields": [
                            {
                                "type": 28,
                                "typeName": "TokenError",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "Arithmetic",
                        "fields": [
                            {
                                "type": 29,
                                "typeName": "ArithmeticError",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": []
                    },
                    {
                        "name": "Transactional",
                        "fields": [
                            {
                                "type": 30,
                                "typeName": "TransactionalError",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": []
                    },
                    {
                        "name": "Exhausted",
                        "fields": [],
                        "index": 10,
                        "docs": []
                    },
                    {
                        "name": "Corruption",
                        "fields": [],
                        "index": 11,
                        "docs": []
                    },
                    {
                        "name": "Unavailable",
                        "fields": [],
                        "index": 12,
                        "docs": []
                    },
                    {
                        "name": "RootNotAllowed",
                        "fields": [],
                        "index": 13,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 27,
            "path": [
                "sp_runtime",
                "ModuleError"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "index",
                        "type": 2,
                        "typeName": "u8",
                        "docs": []
                    },
                    {
                        "name": "error",
                        "type": 18,
                        "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 28,
            "path": [
                "sp_runtime",
                "TokenError"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "FundsUnavailable",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "OnlyProvider",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "BelowMinimum",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "CannotCreate",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "UnknownAsset",
                        "fields": [],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "Frozen",
                        "fields": [],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "Unsupported",
                        "fields": [],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "CannotCreateHold",
                        "fields": [],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "NotExpendable",
                        "fields": [],
                        "index": 8,
                        "docs": []
                    },
                    {
                        "name": "Blocked",
                        "fields": [],
                        "index": 9,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 29,
            "path": [
                "sp_arithmetic",
                "ArithmeticError"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Underflow",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Overflow",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "DivisionByZero",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 30,
            "path": [
                "sp_runtime",
                "TransactionalError"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "LimitReached",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "NoLayer",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 31,
            "path": [
                "pallet_scheduler",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Scheduled",
                        "fields": [
                            {
                                "name": "when",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            },
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Scheduled some task."
                        ]
                    },
                    {
                        "name": "Canceled",
                        "fields": [
                            {
                                "name": "when",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            },
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Canceled some task."
                        ]
                    },
                    {
                        "name": "Dispatched",
                        "fields": [
                            {
                                "name": "task",
                                "type": 32,
                                "typeName": "TaskAddress<BlockNumberFor<T>>",
                                "docs": []
                            },
                            {
                                "name": "id",
                                "type": 33,
                                "typeName": "Option<TaskName>",
                                "docs": []
                            },
                            {
                                "name": "result",
                                "type": 34,
                                "typeName": "DispatchResult",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Dispatched some task."
                        ]
                    },
                    {
                        "name": "RetrySet",
                        "fields": [
                            {
                                "name": "task",
                                "type": 32,
                                "typeName": "TaskAddress<BlockNumberFor<T>>",
                                "docs": []
                            },
                            {
                                "name": "id",
                                "type": 33,
                                "typeName": "Option<TaskName>",
                                "docs": []
                            },
                            {
                                "name": "period",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            },
                            {
                                "name": "retries",
                                "type": 2,
                                "typeName": "u8",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Set a retry configuration for some task."
                        ]
                    },
                    {
                        "name": "RetryCancelled",
                        "fields": [
                            {
                                "name": "task",
                                "type": 32,
                                "typeName": "TaskAddress<BlockNumberFor<T>>",
                                "docs": []
                            },
                            {
                                "name": "id",
                                "type": 33,
                                "typeName": "Option<TaskName>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Cancel a retry configuration for some task."
                        ]
                    },
                    {
                        "name": "CallUnavailable",
                        "fields": [
                            {
                                "name": "task",
                                "type": 32,
                                "typeName": "TaskAddress<BlockNumberFor<T>>",
                                "docs": []
                            },
                            {
                                "name": "id",
                                "type": 33,
                                "typeName": "Option<TaskName>",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "The call for the provided hash was not found so the task has been aborted."
                        ]
                    },
                    {
                        "name": "PeriodicFailed",
                        "fields": [
                            {
                                "name": "task",
                                "type": 32,
                                "typeName": "TaskAddress<BlockNumberFor<T>>",
                                "docs": []
                            },
                            {
                                "name": "id",
                                "type": 33,
                                "typeName": "Option<TaskName>",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "The given task was unable to be renewed since the agenda is full at that block."
                        ]
                    },
                    {
                        "name": "RetryFailed",
                        "fields": [
                            {
                                "name": "task",
                                "type": 32,
                                "typeName": "TaskAddress<BlockNumberFor<T>>",
                                "docs": []
                            },
                            {
                                "name": "id",
                                "type": 33,
                                "typeName": "Option<TaskName>",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "The given task was unable to be retried since the agenda is full at that block or there",
                            "was not enough weight to reschedule it."
                        ]
                    },
                    {
                        "name": "PermanentlyOverweight",
                        "fields": [
                            {
                                "name": "task",
                                "type": 32,
                                "typeName": "TaskAddress<BlockNumberFor<T>>",
                                "docs": []
                            },
                            {
                                "name": "id",
                                "type": 33,
                                "typeName": "Option<TaskName>",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": [
                            "The given task can never be executed since it is overweight."
                        ]
                    }
                ]
            },
            "docs": [
                "Events type."
            ]
        },
        {
            "id": 32,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    4,
                    4
                ]
            },
            "docs": []
        },
        {
            "id": 33,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 1
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 1,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 34,
            "path": [
                "Result"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 35
                },
                {
                    "name": "E",
                    "type": 26
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Ok",
                        "fields": [
                            {
                                "type": 35,
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Err",
                        "fields": [
                            {
                                "type": 26,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 35,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": []
            },
            "docs": []
        },
        {
            "id": 36,
            "path": [
                "pallet_preimage",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Noted",
                        "fields": [
                            {
                                "name": "hash",
                                "type": 13,
                                "typeName": "T::Hash",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "A preimage has been noted."
                        ]
                    },
                    {
                        "name": "Requested",
                        "fields": [
                            {
                                "name": "hash",
                                "type": 13,
                                "typeName": "T::Hash",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "A preimage has been requested."
                        ]
                    },
                    {
                        "name": "Cleared",
                        "fields": [
                            {
                                "name": "hash",
                                "type": 13,
                                "typeName": "T::Hash",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "A preimage has ben cleared."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 37,
            "path": [
                "pallet_indices",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "IndexAssigned",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "T::AccountIndex",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "A account index was assigned."
                        ]
                    },
                    {
                        "name": "IndexFreed",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "T::AccountIndex",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "A account index has been freed up (unassigned)."
                        ]
                    },
                    {
                        "name": "IndexFrozen",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "T::AccountIndex",
                                "docs": []
                            },
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "A account index has been frozen to its current account ID."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 38,
            "path": [
                "pallet_balances",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                },
                {
                    "name": "I"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Endowed",
                        "fields": [
                            {
                                "name": "account",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "free_balance",
                                "type": 6,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "An account was created with some free balance."
                        ]
                    },
                    {
                        "name": "DustLost",
                        "fields": [
                            {
                                "name": "account",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                            "resulting in an outright loss."
                        ]
                    },
                    {
                        "name": "Transfer",
                        "fields": [
                            {
                                "name": "from",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "to",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Transfer succeeded."
                        ]
                    },
                    {
                        "name": "BalanceSet",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "free",
                                "type": 6,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "A balance was set by root."
                        ]
                    },
                    {
                        "name": "Reserved",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Some balance was reserved (moved from free to reserved)."
                        ]
                    },
                    {
                        "name": "Unreserved",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "Some balance was unreserved (moved from reserved to free)."
                        ]
                    },
                    {
                        "name": "ReserveRepatriated",
                        "fields": [
                            {
                                "name": "from",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "to",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "T::Balance",
                                "docs": []
                            },
                            {
                                "name": "destination_status",
                                "type": 39,
                                "typeName": "Status",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "Some balance was moved from the reserve of the first account to the second account.",
                            "Final argument indicates the destination balance type."
                        ]
                    },
                    {
                        "name": "Deposit",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "Some amount was deposited (e.g. for transaction fees)."
                        ]
                    },
                    {
                        "name": "Withdraw",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": [
                            "Some amount was withdrawn from the account (e.g. for transaction fees)."
                        ]
                    },
                    {
                        "name": "Slashed",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": [
                            "Some amount was removed from the account (e.g. for misbehavior)."
                        ]
                    },
                    {
                        "name": "Minted",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 10,
                        "docs": [
                            "Some amount was minted into an account."
                        ]
                    },
                    {
                        "name": "Burned",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 11,
                        "docs": [
                            "Some amount was burned from an account."
                        ]
                    },
                    {
                        "name": "Suspended",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 12,
                        "docs": [
                            "Some amount was suspended from an account (it can be restored later)."
                        ]
                    },
                    {
                        "name": "Restored",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 13,
                        "docs": [
                            "Some amount was restored into an account."
                        ]
                    },
                    {
                        "name": "Upgraded",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 14,
                        "docs": [
                            "An account was upgraded."
                        ]
                    },
                    {
                        "name": "Issued",
                        "fields": [
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 15,
                        "docs": [
                            "Total issuance was increased by `amount`, creating a credit to be balanced."
                        ]
                    },
                    {
                        "name": "Rescinded",
                        "fields": [
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 16,
                        "docs": [
                            "Total issuance was decreased by `amount`, creating a debt to be balanced."
                        ]
                    },
                    {
                        "name": "Locked",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 17,
                        "docs": [
                            "Some balance was locked."
                        ]
                    },
                    {
                        "name": "Unlocked",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 18,
                        "docs": [
                            "Some balance was unlocked."
                        ]
                    },
                    {
                        "name": "Frozen",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 19,
                        "docs": [
                            "Some balance was frozen."
                        ]
                    },
                    {
                        "name": "Thawed",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 20,
                        "docs": [
                            "Some balance was thawed."
                        ]
                    },
                    {
                        "name": "TotalIssuanceForced",
                        "fields": [
                            {
                                "name": "old",
                                "type": 6,
                                "typeName": "T::Balance",
                                "docs": []
                            },
                            {
                                "name": "new",
                                "type": 6,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 21,
                        "docs": [
                            "The `TotalIssuance` was forcefully changed."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 39,
            "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "BalanceStatus"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Free",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Reserved",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 40,
            "path": [
                "pallet_transaction_payment",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "TransactionFeePaid",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "actual_fee",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "tip",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                            "has been paid by `who`."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 41,
            "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "EraPaid",
                        "fields": [
                            {
                                "name": "era_index",
                                "type": 4,
                                "typeName": "EraIndex",
                                "docs": []
                            },
                            {
                                "name": "validator_payout",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "remainder",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "The era payout has been set; the first balance is the validator-payout; the second is",
                            "the remainder from the maximum amount of reward."
                        ]
                    },
                    {
                        "name": "Rewarded",
                        "fields": [
                            {
                                "name": "stash",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 42,
                                "typeName": "RewardDestination<T::AccountId>",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "The nominator has been rewarded by this amount to this destination."
                        ]
                    },
                    {
                        "name": "Slashed",
                        "fields": [
                            {
                                "name": "staker",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "A staker (validator or nominator) has been slashed by the given amount."
                        ]
                    },
                    {
                        "name": "SlashReported",
                        "fields": [
                            {
                                "name": "validator",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "fraction",
                                "type": 43,
                                "typeName": "Perbill",
                                "docs": []
                            },
                            {
                                "name": "slash_era",
                                "type": 4,
                                "typeName": "EraIndex",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "A slash for the given validator, for the given percentage of their stake, at the given",
                            "era as been reported."
                        ]
                    },
                    {
                        "name": "OldSlashingReportDiscarded",
                        "fields": [
                            {
                                "name": "session_index",
                                "type": 4,
                                "typeName": "SessionIndex",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "An old slashing report from a prior era was discarded because it could",
                            "not be processed."
                        ]
                    },
                    {
                        "name": "StakersElected",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "A new set of stakers was elected."
                        ]
                    },
                    {
                        "name": "Bonded",
                        "fields": [
                            {
                                "name": "stash",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "An account has bonded this amount. \\[stash, amount\\]",
                            "",
                            "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                            "it will not be emitted for staking rewards when they are added to stake."
                        ]
                    },
                    {
                        "name": "Unbonded",
                        "fields": [
                            {
                                "name": "stash",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "An account has unbonded this amount."
                        ]
                    },
                    {
                        "name": "Withdrawn",
                        "fields": [
                            {
                                "name": "stash",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": [
                            "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
                            "from the unlocking queue."
                        ]
                    },
                    {
                        "name": "Kicked",
                        "fields": [
                            {
                                "name": "nominator",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "stash",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": [
                            "A nominator has been kicked from a validator."
                        ]
                    },
                    {
                        "name": "StakingElectionFailed",
                        "fields": [],
                        "index": 10,
                        "docs": [
                            "The election failed. No new era is planned."
                        ]
                    },
                    {
                        "name": "Chilled",
                        "fields": [
                            {
                                "name": "stash",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 11,
                        "docs": [
                            "An account has stopped participating as either a validator or nominator."
                        ]
                    },
                    {
                        "name": "PayoutStarted",
                        "fields": [
                            {
                                "name": "era_index",
                                "type": 4,
                                "typeName": "EraIndex",
                                "docs": []
                            },
                            {
                                "name": "validator_stash",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 12,
                        "docs": [
                            "The stakers' rewards are getting paid."
                        ]
                    },
                    {
                        "name": "ValidatorPrefsSet",
                        "fields": [
                            {
                                "name": "stash",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "prefs",
                                "type": 44,
                                "typeName": "ValidatorPrefs",
                                "docs": []
                            }
                        ],
                        "index": 13,
                        "docs": [
                            "A validator has set their preferences."
                        ]
                    },
                    {
                        "name": "SnapshotVotersSizeExceeded",
                        "fields": [
                            {
                                "name": "size",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 14,
                        "docs": [
                            "Voters size limit reached."
                        ]
                    },
                    {
                        "name": "SnapshotTargetsSizeExceeded",
                        "fields": [
                            {
                                "name": "size",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 15,
                        "docs": [
                            "Targets size limit reached."
                        ]
                    },
                    {
                        "name": "ForceEra",
                        "fields": [
                            {
                                "name": "mode",
                                "type": 46,
                                "typeName": "Forcing",
                                "docs": []
                            }
                        ],
                        "index": 16,
                        "docs": [
                            "A new force era mode was set."
                        ]
                    },
                    {
                        "name": "ControllerBatchDeprecated",
                        "fields": [
                            {
                                "name": "failures",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 17,
                        "docs": [
                            "Report of a controller batch deprecation."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 42,
            "path": [
                "pallet_staking",
                "RewardDestination"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Staked",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Stash",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Controller",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Account",
                        "fields": [
                            {
                                "type": 0,
                                "typeName": "AccountId",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "None",
                        "fields": [],
                        "index": 4,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 43,
            "path": [
                "sp_arithmetic",
                "per_things",
                "Perbill"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 44,
            "path": [
                "pallet_staking",
                "ValidatorPrefs"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "commission",
                        "type": 45,
                        "typeName": "Perbill",
                        "docs": []
                    },
                    {
                        "name": "blocked",
                        "type": 8,
                        "typeName": "bool",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 45,
            "path": [],
            "params": [],
            "def": {
                "tag": "compact",
                "value": 43
            },
            "docs": []
        },
        {
            "id": 46,
            "path": [
                "pallet_staking",
                "Forcing"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "NotForcing",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "ForceNew",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "ForceNone",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "ForceAlways",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 47,
            "path": [
                "pallet_offences",
                "pallet",
                "Event"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Offence",
                        "fields": [
                            {
                                "name": "kind",
                                "type": 48,
                                "typeName": "Kind",
                                "docs": []
                            },
                            {
                                "name": "timeslot",
                                "type": 14,
                                "typeName": "OpaqueTimeSlot",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "There is an offence reported of the given `kind` happened at the `session_index` and",
                            "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
                            "\\[kind, timeslot\\]."
                        ]
                    }
                ]
            },
            "docs": [
                "Events type."
            ]
        },
        {
            "id": 48,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 16,
                    "type": 2
                }
            },
            "docs": []
        },
        {
            "id": 49,
            "path": [
                "pallet_session",
                "pallet",
                "Event"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "NewSession",
                        "fields": [
                            {
                                "name": "session_index",
                                "type": 4,
                                "typeName": "SessionIndex",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "New session has happened. Note that the argument is the session index, not the",
                            "block number as the type might suggest."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 50,
            "path": [
                "pallet_grandpa",
                "pallet",
                "Event"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "NewAuthorities",
                        "fields": [
                            {
                                "name": "authority_set",
                                "type": 51,
                                "typeName": "AuthorityList",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "New authority set has been applied."
                        ]
                    },
                    {
                        "name": "Paused",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "Current authority set has been paused."
                        ]
                    },
                    {
                        "name": "Resumed",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "Current authority set has been resumed."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 51,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 52
            },
            "docs": []
        },
        {
            "id": 52,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    53,
                    12
                ]
            },
            "docs": []
        },
        {
            "id": 53,
            "path": [
                "sp_consensus_grandpa",
                "app",
                "Public"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 1,
                        "typeName": "ed25519::Public",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 54,
            "path": [
                "pallet_treasury",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                },
                {
                    "name": "I"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Spending",
                        "fields": [
                            {
                                "name": "budget_remaining",
                                "type": 6,
                                "typeName": "BalanceOf<T, I>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "We have ended a spend period and will now allocate funds."
                        ]
                    },
                    {
                        "name": "Awarded",
                        "fields": [
                            {
                                "name": "proposal_index",
                                "type": 4,
                                "typeName": "ProposalIndex",
                                "docs": []
                            },
                            {
                                "name": "award",
                                "type": 6,
                                "typeName": "BalanceOf<T, I>",
                                "docs": []
                            },
                            {
                                "name": "account",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Some funds have been allocated."
                        ]
                    },
                    {
                        "name": "Burnt",
                        "fields": [
                            {
                                "name": "burnt_funds",
                                "type": 6,
                                "typeName": "BalanceOf<T, I>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Some of our funds have been burnt."
                        ]
                    },
                    {
                        "name": "Rollover",
                        "fields": [
                            {
                                "name": "rollover_balance",
                                "type": 6,
                                "typeName": "BalanceOf<T, I>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Spending has finished; this is the amount that rolls over until next spend."
                        ]
                    },
                    {
                        "name": "Deposit",
                        "fields": [
                            {
                                "name": "value",
                                "type": 6,
                                "typeName": "BalanceOf<T, I>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Some funds have been deposited."
                        ]
                    },
                    {
                        "name": "SpendApproved",
                        "fields": [
                            {
                                "name": "proposal_index",
                                "type": 4,
                                "typeName": "ProposalIndex",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "BalanceOf<T, I>",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "A new spend proposal has been approved."
                        ]
                    },
                    {
                        "name": "UpdatedInactive",
                        "fields": [
                            {
                                "name": "reactivated",
                                "type": 6,
                                "typeName": "BalanceOf<T, I>",
                                "docs": []
                            },
                            {
                                "name": "deactivated",
                                "type": 6,
                                "typeName": "BalanceOf<T, I>",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "The inactive funds of the pallet have been updated."
                        ]
                    },
                    {
                        "name": "AssetSpendApproved",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "SpendIndex",
                                "docs": []
                            },
                            {
                                "name": "asset_kind",
                                "type": 55,
                                "typeName": "T::AssetKind",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "AssetBalanceOf<T, I>",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 81,
                                "typeName": "T::Beneficiary",
                                "docs": []
                            },
                            {
                                "name": "valid_from",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            },
                            {
                                "name": "expire_at",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "A new asset spend proposal has been approved."
                        ]
                    },
                    {
                        "name": "AssetSpendVoided",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "SpendIndex",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": [
                            "An approved spend was voided."
                        ]
                    },
                    {
                        "name": "Paid",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "SpendIndex",
                                "docs": []
                            },
                            {
                                "name": "payment_id",
                                "type": 12,
                                "typeName": "<T::Paymaster as Pay>::Id",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": [
                            "A payment happened."
                        ]
                    },
                    {
                        "name": "PaymentFailed",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "SpendIndex",
                                "docs": []
                            },
                            {
                                "name": "payment_id",
                                "type": 12,
                                "typeName": "<T::Paymaster as Pay>::Id",
                                "docs": []
                            }
                        ],
                        "index": 10,
                        "docs": [
                            "A payment failed and can be retried."
                        ]
                    },
                    {
                        "name": "SpendProcessed",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "SpendIndex",
                                "docs": []
                            }
                        ],
                        "index": 11,
                        "docs": [
                            "A spend was processed and removed from the storage. It might have been successfully",
                            "paid or it may have expired."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 55,
            "path": [
                "polkadot_runtime_common",
                "impls",
                "VersionedLocatableAsset"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "V3",
                        "fields": [
                            {
                                "name": "location",
                                "type": 56,
                                "typeName": "xcm::v3::Location",
                                "docs": []
                            },
                            {
                                "name": "asset_id",
                                "type": 66,
                                "typeName": "xcm::v3::AssetId",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "V4",
                        "fields": [
                            {
                                "name": "location",
                                "type": 67,
                                "typeName": "xcm::v4::Location",
                                "docs": []
                            },
                            {
                                "name": "asset_id",
                                "type": 80,
                                "typeName": "xcm::v4::AssetId",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 56,
            "path": [
                "staging_xcm",
                "v3",
                "multilocation",
                "MultiLocation"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "parents",
                        "type": 2,
                        "typeName": "u8",
                        "docs": []
                    },
                    {
                        "name": "interior",
                        "type": 57,
                        "typeName": "Junctions",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 57,
            "path": [
                "xcm",
                "v3",
                "junctions",
                "Junctions"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Here",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "X1",
                        "fields": [
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "X2",
                        "fields": [
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "X3",
                        "fields": [
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "X4",
                        "fields": [
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "X5",
                        "fields": [
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "X6",
                        "fields": [
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "X7",
                        "fields": [
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "X8",
                        "fields": [
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 58,
            "path": [
                "xcm",
                "v3",
                "junction",
                "Junction"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Parachain",
                        "fields": [
                            {
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "AccountId32",
                        "fields": [
                            {
                                "name": "network",
                                "type": 60,
                                "typeName": "Option<NetworkId>",
                                "docs": []
                            },
                            {
                                "name": "id",
                                "type": 1,
                                "typeName": "[u8; 32]",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "AccountIndex64",
                        "fields": [
                            {
                                "name": "network",
                                "type": 60,
                                "typeName": "Option<NetworkId>",
                                "docs": []
                            },
                            {
                                "name": "index",
                                "type": 11,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "AccountKey20",
                        "fields": [
                            {
                                "name": "network",
                                "type": 60,
                                "typeName": "Option<NetworkId>",
                                "docs": []
                            },
                            {
                                "name": "key",
                                "type": 62,
                                "typeName": "[u8; 20]",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "PalletInstance",
                        "fields": [
                            {
                                "type": 2,
                                "typeName": "u8",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "GeneralIndex",
                        "fields": [
                            {
                                "type": 63,
                                "typeName": "u128",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "GeneralKey",
                        "fields": [
                            {
                                "name": "length",
                                "type": 2,
                                "typeName": "u8",
                                "docs": []
                            },
                            {
                                "name": "data",
                                "type": 1,
                                "typeName": "[u8; 32]",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "OnlyChild",
                        "fields": [],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "Plurality",
                        "fields": [
                            {
                                "name": "id",
                                "type": 64,
                                "typeName": "BodyId",
                                "docs": []
                            },
                            {
                                "name": "part",
                                "type": 65,
                                "typeName": "BodyPart",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": []
                    },
                    {
                        "name": "GlobalConsensus",
                        "fields": [
                            {
                                "type": 61,
                                "typeName": "NetworkId",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 59,
            "path": [],
            "params": [],
            "def": {
                "tag": "compact",
                "value": 4
            },
            "docs": []
        },
        {
            "id": 60,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 61
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 61,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 61,
            "path": [
                "xcm",
                "v3",
                "junction",
                "NetworkId"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "ByGenesis",
                        "fields": [
                            {
                                "type": 1,
                                "typeName": "[u8; 32]",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "ByFork",
                        "fields": [
                            {
                                "name": "block_number",
                                "type": 12,
                                "typeName": "u64",
                                "docs": []
                            },
                            {
                                "name": "block_hash",
                                "type": 1,
                                "typeName": "[u8; 32]",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Polkadot",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Kusama",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "Westend",
                        "fields": [],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "Rococo",
                        "fields": [],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "Wococo",
                        "fields": [],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "Ethereum",
                        "fields": [
                            {
                                "name": "chain_id",
                                "type": 11,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "BitcoinCore",
                        "fields": [],
                        "index": 8,
                        "docs": []
                    },
                    {
                        "name": "BitcoinCash",
                        "fields": [],
                        "index": 9,
                        "docs": []
                    },
                    {
                        "name": "PolkadotBulletin",
                        "fields": [],
                        "index": 10,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 62,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 20,
                    "type": 2
                }
            },
            "docs": []
        },
        {
            "id": 63,
            "path": [],
            "params": [],
            "def": {
                "tag": "compact",
                "value": 6
            },
            "docs": []
        },
        {
            "id": 64,
            "path": [
                "xcm",
                "v3",
                "junction",
                "BodyId"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Unit",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Moniker",
                        "fields": [
                            {
                                "type": 18,
                                "typeName": "[u8; 4]",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Index",
                        "fields": [
                            {
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Executive",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "Technical",
                        "fields": [],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "Legislative",
                        "fields": [],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "Judicial",
                        "fields": [],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "Defense",
                        "fields": [],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "Administration",
                        "fields": [],
                        "index": 8,
                        "docs": []
                    },
                    {
                        "name": "Treasury",
                        "fields": [],
                        "index": 9,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 65,
            "path": [
                "xcm",
                "v3",
                "junction",
                "BodyPart"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Voice",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Members",
                        "fields": [
                            {
                                "name": "count",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Fraction",
                        "fields": [
                            {
                                "name": "nom",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "denom",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "AtLeastProportion",
                        "fields": [
                            {
                                "name": "nom",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "denom",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "MoreThanProportion",
                        "fields": [
                            {
                                "name": "nom",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "denom",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 66,
            "path": [
                "xcm",
                "v3",
                "multiasset",
                "AssetId"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Concrete",
                        "fields": [
                            {
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Abstract",
                        "fields": [
                            {
                                "type": 1,
                                "typeName": "[u8; 32]",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 67,
            "path": [
                "staging_xcm",
                "v4",
                "location",
                "Location"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "parents",
                        "type": 2,
                        "typeName": "u8",
                        "docs": []
                    },
                    {
                        "name": "interior",
                        "type": 68,
                        "typeName": "Junctions",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 68,
            "path": [
                "staging_xcm",
                "v4",
                "junctions",
                "Junctions"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Here",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "X1",
                        "fields": [
                            {
                                "type": 69,
                                "typeName": "Arc<[Junction; 1]>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "X2",
                        "fields": [
                            {
                                "type": 73,
                                "typeName": "Arc<[Junction; 2]>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "X3",
                        "fields": [
                            {
                                "type": 74,
                                "typeName": "Arc<[Junction; 3]>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "X4",
                        "fields": [
                            {
                                "type": 75,
                                "typeName": "Arc<[Junction; 4]>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "X5",
                        "fields": [
                            {
                                "type": 76,
                                "typeName": "Arc<[Junction; 5]>",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "X6",
                        "fields": [
                            {
                                "type": 77,
                                "typeName": "Arc<[Junction; 6]>",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "X7",
                        "fields": [
                            {
                                "type": 78,
                                "typeName": "Arc<[Junction; 7]>",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "X8",
                        "fields": [
                            {
                                "type": 79,
                                "typeName": "Arc<[Junction; 8]>",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 69,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 1,
                    "type": 70
                }
            },
            "docs": []
        },
        {
            "id": 70,
            "path": [
                "staging_xcm",
                "v4",
                "junction",
                "Junction"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Parachain",
                        "fields": [
                            {
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "AccountId32",
                        "fields": [
                            {
                                "name": "network",
                                "type": 71,
                                "typeName": "Option<NetworkId>",
                                "docs": []
                            },
                            {
                                "name": "id",
                                "type": 1,
                                "typeName": "[u8; 32]",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "AccountIndex64",
                        "fields": [
                            {
                                "name": "network",
                                "type": 71,
                                "typeName": "Option<NetworkId>",
                                "docs": []
                            },
                            {
                                "name": "index",
                                "type": 11,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "AccountKey20",
                        "fields": [
                            {
                                "name": "network",
                                "type": 71,
                                "typeName": "Option<NetworkId>",
                                "docs": []
                            },
                            {
                                "name": "key",
                                "type": 62,
                                "typeName": "[u8; 20]",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "PalletInstance",
                        "fields": [
                            {
                                "type": 2,
                                "typeName": "u8",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "GeneralIndex",
                        "fields": [
                            {
                                "type": 63,
                                "typeName": "u128",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "GeneralKey",
                        "fields": [
                            {
                                "name": "length",
                                "type": 2,
                                "typeName": "u8",
                                "docs": []
                            },
                            {
                                "name": "data",
                                "type": 1,
                                "typeName": "[u8; 32]",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "OnlyChild",
                        "fields": [],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "Plurality",
                        "fields": [
                            {
                                "name": "id",
                                "type": 64,
                                "typeName": "BodyId",
                                "docs": []
                            },
                            {
                                "name": "part",
                                "type": 65,
                                "typeName": "BodyPart",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": []
                    },
                    {
                        "name": "GlobalConsensus",
                        "fields": [
                            {
                                "type": 72,
                                "typeName": "NetworkId",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 71,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 72
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 72,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 72,
            "path": [
                "staging_xcm",
                "v4",
                "junction",
                "NetworkId"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "ByGenesis",
                        "fields": [
                            {
                                "type": 1,
                                "typeName": "[u8; 32]",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "ByFork",
                        "fields": [
                            {
                                "name": "block_number",
                                "type": 12,
                                "typeName": "u64",
                                "docs": []
                            },
                            {
                                "name": "block_hash",
                                "type": 1,
                                "typeName": "[u8; 32]",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Polkadot",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Kusama",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "Westend",
                        "fields": [],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "Rococo",
                        "fields": [],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "Wococo",
                        "fields": [],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "Ethereum",
                        "fields": [
                            {
                                "name": "chain_id",
                                "type": 11,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "BitcoinCore",
                        "fields": [],
                        "index": 8,
                        "docs": []
                    },
                    {
                        "name": "BitcoinCash",
                        "fields": [],
                        "index": 9,
                        "docs": []
                    },
                    {
                        "name": "PolkadotBulletin",
                        "fields": [],
                        "index": 10,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 73,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 2,
                    "type": 70
                }
            },
            "docs": []
        },
        {
            "id": 74,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 3,
                    "type": 70
                }
            },
            "docs": []
        },
        {
            "id": 75,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 4,
                    "type": 70
                }
            },
            "docs": []
        },
        {
            "id": 76,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 5,
                    "type": 70
                }
            },
            "docs": []
        },
        {
            "id": 77,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 6,
                    "type": 70
                }
            },
            "docs": []
        },
        {
            "id": 78,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 7,
                    "type": 70
                }
            },
            "docs": []
        },
        {
            "id": 79,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 8,
                    "type": 70
                }
            },
            "docs": []
        },
        {
            "id": 80,
            "path": [
                "staging_xcm",
                "v4",
                "asset",
                "AssetId"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 67,
                        "typeName": "Location",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 81,
            "path": [
                "xcm",
                "VersionedLocation"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "V2",
                        "fields": [
                            {
                                "type": 82,
                                "typeName": "v2::MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "V3",
                        "fields": [
                            {
                                "type": 56,
                                "typeName": "v3::MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "V4",
                        "fields": [
                            {
                                "type": 67,
                                "typeName": "v4::Location",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 82,
            "path": [
                "xcm",
                "v2",
                "multilocation",
                "MultiLocation"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "parents",
                        "type": 2,
                        "typeName": "u8",
                        "docs": []
                    },
                    {
                        "name": "interior",
                        "type": 83,
                        "typeName": "Junctions",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 83,
            "path": [
                "xcm",
                "v2",
                "multilocation",
                "Junctions"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Here",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "X1",
                        "fields": [
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "X2",
                        "fields": [
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "X3",
                        "fields": [
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "X4",
                        "fields": [
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "X5",
                        "fields": [
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "X6",
                        "fields": [
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "X7",
                        "fields": [
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "X8",
                        "fields": [
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            },
                            {
                                "type": 84,
                                "typeName": "Junction",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 84,
            "path": [
                "xcm",
                "v2",
                "junction",
                "Junction"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Parachain",
                        "fields": [
                            {
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "AccountId32",
                        "fields": [
                            {
                                "name": "network",
                                "type": 85,
                                "typeName": "NetworkId",
                                "docs": []
                            },
                            {
                                "name": "id",
                                "type": 1,
                                "typeName": "[u8; 32]",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "AccountIndex64",
                        "fields": [
                            {
                                "name": "network",
                                "type": 85,
                                "typeName": "NetworkId",
                                "docs": []
                            },
                            {
                                "name": "index",
                                "type": 11,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "AccountKey20",
                        "fields": [
                            {
                                "name": "network",
                                "type": 85,
                                "typeName": "NetworkId",
                                "docs": []
                            },
                            {
                                "name": "key",
                                "type": 62,
                                "typeName": "[u8; 20]",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "PalletInstance",
                        "fields": [
                            {
                                "type": 2,
                                "typeName": "u8",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "GeneralIndex",
                        "fields": [
                            {
                                "type": 63,
                                "typeName": "u128",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "GeneralKey",
                        "fields": [
                            {
                                "type": 86,
                                "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "OnlyChild",
                        "fields": [],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "Plurality",
                        "fields": [
                            {
                                "name": "id",
                                "type": 87,
                                "typeName": "BodyId",
                                "docs": []
                            },
                            {
                                "name": "part",
                                "type": 88,
                                "typeName": "BodyPart",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 85,
            "path": [
                "xcm",
                "v2",
                "NetworkId"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Any",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Named",
                        "fields": [
                            {
                                "type": 86,
                                "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Polkadot",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Kusama",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 86,
            "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 2
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 14,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 87,
            "path": [
                "xcm",
                "v2",
                "BodyId"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Unit",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Named",
                        "fields": [
                            {
                                "type": 86,
                                "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Index",
                        "fields": [
                            {
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Executive",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "Technical",
                        "fields": [],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "Legislative",
                        "fields": [],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "Judicial",
                        "fields": [],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "Defense",
                        "fields": [],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "Administration",
                        "fields": [],
                        "index": 8,
                        "docs": []
                    },
                    {
                        "name": "Treasury",
                        "fields": [],
                        "index": 9,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 88,
            "path": [
                "xcm",
                "v2",
                "BodyPart"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Voice",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Members",
                        "fields": [
                            {
                                "name": "count",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Fraction",
                        "fields": [
                            {
                                "name": "nom",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "denom",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "AtLeastProportion",
                        "fields": [
                            {
                                "name": "nom",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "denom",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "MoreThanProportion",
                        "fields": [
                            {
                                "name": "nom",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "denom",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 89,
            "path": [
                "pallet_conviction_voting",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                },
                {
                    "name": "I"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Delegated",
                        "fields": [
                            {
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "An account has delegated their vote to another account. \\[who, target\\]"
                        ]
                    },
                    {
                        "name": "Undelegated",
                        "fields": [
                            {
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "An \\[account\\] has cancelled a previous delegation operation."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 90,
            "path": [
                "pallet_referenda",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                },
                {
                    "name": "I"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Submitted",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "ReferendumIndex",
                                "docs": [
                                    "Index of the referendum."
                                ]
                            },
                            {
                                "name": "track",
                                "type": 91,
                                "typeName": "TrackIdOf<T, I>",
                                "docs": [
                                    "The track (and by extension proposal dispatch origin) of this referendum."
                                ]
                            },
                            {
                                "name": "proposal",
                                "type": 92,
                                "typeName": "BoundedCallOf<T, I>",
                                "docs": [
                                    "The proposal for the referendum."
                                ]
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "A referendum has been submitted."
                        ]
                    },
                    {
                        "name": "DecisionDepositPlaced",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "ReferendumIndex",
                                "docs": [
                                    "Index of the referendum."
                                ]
                            },
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": [
                                    "The account who placed the deposit."
                                ]
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "BalanceOf<T, I>",
                                "docs": [
                                    "The amount placed by the account."
                                ]
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "The decision deposit has been placed."
                        ]
                    },
                    {
                        "name": "DecisionDepositRefunded",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "ReferendumIndex",
                                "docs": [
                                    "Index of the referendum."
                                ]
                            },
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": [
                                    "The account who placed the deposit."
                                ]
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "BalanceOf<T, I>",
                                "docs": [
                                    "The amount placed by the account."
                                ]
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "The decision deposit has been refunded."
                        ]
                    },
                    {
                        "name": "DepositSlashed",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": [
                                    "The account who placed the deposit."
                                ]
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "BalanceOf<T, I>",
                                "docs": [
                                    "The amount placed by the account."
                                ]
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "A deposit has been slashed."
                        ]
                    },
                    {
                        "name": "DecisionStarted",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "ReferendumIndex",
                                "docs": [
                                    "Index of the referendum."
                                ]
                            },
                            {
                                "name": "track",
                                "type": 91,
                                "typeName": "TrackIdOf<T, I>",
                                "docs": [
                                    "The track (and by extension proposal dispatch origin) of this referendum."
                                ]
                            },
                            {
                                "name": "proposal",
                                "type": 92,
                                "typeName": "BoundedCallOf<T, I>",
                                "docs": [
                                    "The proposal for the referendum."
                                ]
                            },
                            {
                                "name": "tally",
                                "type": 448,
                                "typeName": "T::Tally",
                                "docs": [
                                    "The current tally of votes in this referendum."
                                ]
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "A referendum has moved into the deciding phase."
                        ]
                    },
                    {
                        "name": "ConfirmStarted",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "ReferendumIndex",
                                "docs": [
                                    "Index of the referendum."
                                ]
                            }
                        ],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "ConfirmAborted",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "ReferendumIndex",
                                "docs": [
                                    "Index of the referendum."
                                ]
                            }
                        ],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "Confirmed",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "ReferendumIndex",
                                "docs": [
                                    "Index of the referendum."
                                ]
                            },
                            {
                                "name": "tally",
                                "type": 448,
                                "typeName": "T::Tally",
                                "docs": [
                                    "The final tally of votes in this referendum."
                                ]
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "A referendum has ended its confirmation phase and is ready for approval."
                        ]
                    },
                    {
                        "name": "Approved",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "ReferendumIndex",
                                "docs": [
                                    "Index of the referendum."
                                ]
                            }
                        ],
                        "index": 8,
                        "docs": [
                            "A referendum has been approved and its proposal has been scheduled."
                        ]
                    },
                    {
                        "name": "Rejected",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "ReferendumIndex",
                                "docs": [
                                    "Index of the referendum."
                                ]
                            },
                            {
                                "name": "tally",
                                "type": 448,
                                "typeName": "T::Tally",
                                "docs": [
                                    "The final tally of votes in this referendum."
                                ]
                            }
                        ],
                        "index": 9,
                        "docs": [
                            "A proposal has been rejected by referendum."
                        ]
                    },
                    {
                        "name": "TimedOut",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "ReferendumIndex",
                                "docs": [
                                    "Index of the referendum."
                                ]
                            },
                            {
                                "name": "tally",
                                "type": 448,
                                "typeName": "T::Tally",
                                "docs": [
                                    "The final tally of votes in this referendum."
                                ]
                            }
                        ],
                        "index": 10,
                        "docs": [
                            "A referendum has been timed out without being decided."
                        ]
                    },
                    {
                        "name": "Cancelled",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "ReferendumIndex",
                                "docs": [
                                    "Index of the referendum."
                                ]
                            },
                            {
                                "name": "tally",
                                "type": 448,
                                "typeName": "T::Tally",
                                "docs": [
                                    "The final tally of votes in this referendum."
                                ]
                            }
                        ],
                        "index": 11,
                        "docs": [
                            "A referendum has been cancelled."
                        ]
                    },
                    {
                        "name": "Killed",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "ReferendumIndex",
                                "docs": [
                                    "Index of the referendum."
                                ]
                            },
                            {
                                "name": "tally",
                                "type": 448,
                                "typeName": "T::Tally",
                                "docs": [
                                    "The final tally of votes in this referendum."
                                ]
                            }
                        ],
                        "index": 12,
                        "docs": [
                            "A referendum has been killed."
                        ]
                    },
                    {
                        "name": "SubmissionDepositRefunded",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "ReferendumIndex",
                                "docs": [
                                    "Index of the referendum."
                                ]
                            },
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": [
                                    "The account who placed the deposit."
                                ]
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "BalanceOf<T, I>",
                                "docs": [
                                    "The amount placed by the account."
                                ]
                            }
                        ],
                        "index": 13,
                        "docs": [
                            "The submission deposit has been refunded."
                        ]
                    },
                    {
                        "name": "MetadataSet",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "ReferendumIndex",
                                "docs": [
                                    "Index of the referendum."
                                ]
                            },
                            {
                                "name": "hash",
                                "type": 13,
                                "typeName": "T::Hash",
                                "docs": [
                                    "Preimage hash."
                                ]
                            }
                        ],
                        "index": 14,
                        "docs": [
                            "Metadata for a referendum has been set."
                        ]
                    },
                    {
                        "name": "MetadataCleared",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "ReferendumIndex",
                                "docs": [
                                    "Index of the referendum."
                                ]
                            },
                            {
                                "name": "hash",
                                "type": 13,
                                "typeName": "T::Hash",
                                "docs": [
                                    "Preimage hash."
                                ]
                            }
                        ],
                        "index": 15,
                        "docs": [
                            "Metadata for a referendum has been cleared."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 91,
            "path": [],
            "params": [],
            "def": {
                "tag": "primitive",
                "value": {
                    "tag": "u16"
                }
            },
            "docs": []
        },
        {
            "id": 92,
            "path": [
                "frame_support",
                "traits",
                "preimages",
                "Bounded"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 93
                },
                {
                    "name": "H",
                    "type": 446
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Legacy",
                        "fields": [
                            {
                                "name": "hash",
                                "type": 13,
                                "typeName": "H::Output",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Inline",
                        "fields": [
                            {
                                "type": 447,
                                "typeName": "BoundedInline",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Lookup",
                        "fields": [
                            {
                                "name": "hash",
                                "type": 13,
                                "typeName": "H::Output",
                                "docs": []
                            },
                            {
                                "name": "len",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 93,
            "path": [
                "polkadot_runtime",
                "RuntimeCall"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "System",
                        "fields": [
                            {
                                "type": 94,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Scheduler",
                        "fields": [
                            {
                                "type": 98,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Preimage",
                        "fields": [
                            {
                                "type": 100,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 10,
                        "docs": []
                    },
                    {
                        "name": "Babe",
                        "fields": [
                            {
                                "type": 102,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Babe, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Timestamp",
                        "fields": [
                            {
                                "type": 111,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "Indices",
                        "fields": [
                            {
                                "type": 112,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Indices, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "Balances",
                        "fields": [
                            {
                                "type": 115,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "Staking",
                        "fields": [
                            {
                                "type": 118,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Staking, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "Session",
                        "fields": [
                            {
                                "type": 133,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": []
                    },
                    {
                        "name": "Grandpa",
                        "fields": [
                            {
                                "type": 140,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 11,
                        "docs": []
                    },
                    {
                        "name": "Treasury",
                        "fields": [
                            {
                                "type": 151,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 19,
                        "docs": []
                    },
                    {
                        "name": "ConvictionVoting",
                        "fields": [
                            {
                                "type": 153,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ConvictionVoting, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 20,
                        "docs": []
                    },
                    {
                        "name": "Referenda",
                        "fields": [
                            {
                                "type": 158,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Referenda, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 21,
                        "docs": []
                    },
                    {
                        "name": "Whitelist",
                        "fields": [
                            {
                                "type": 168,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Whitelist, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 23,
                        "docs": []
                    },
                    {
                        "name": "Parameters",
                        "fields": [
                            {
                                "type": 169,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Parameters, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 27,
                        "docs": []
                    },
                    {
                        "name": "Claims",
                        "fields": [
                            {
                                "type": 180,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Claims, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 24,
                        "docs": []
                    },
                    {
                        "name": "Vesting",
                        "fields": [
                            {
                                "type": 188,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 25,
                        "docs": []
                    },
                    {
                        "name": "Utility",
                        "fields": [
                            {
                                "type": 190,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 26,
                        "docs": []
                    },
                    {
                        "name": "Proxy",
                        "fields": [
                            {
                                "type": 192,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 29,
                        "docs": []
                    },
                    {
                        "name": "Multisig",
                        "fields": [
                            {
                                "type": 195,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 30,
                        "docs": []
                    },
                    {
                        "name": "Bounties",
                        "fields": [
                            {
                                "type": 198,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Bounties, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 34,
                        "docs": []
                    },
                    {
                        "name": "ChildBounties",
                        "fields": [
                            {
                                "type": 199,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ChildBounties, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 38,
                        "docs": []
                    },
                    {
                        "name": "ElectionProviderMultiPhase",
                        "fields": [
                            {
                                "type": 200,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ElectionProviderMultiPhase, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 36,
                        "docs": []
                    },
                    {
                        "name": "VoterList",
                        "fields": [
                            {
                                "type": 261,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<VoterList, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 37,
                        "docs": []
                    },
                    {
                        "name": "NominationPools",
                        "fields": [
                            {
                                "type": 262,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NominationPools, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 39,
                        "docs": []
                    },
                    {
                        "name": "FastUnstake",
                        "fields": [
                            {
                                "type": 275,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FastUnstake, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 40,
                        "docs": []
                    },
                    {
                        "name": "Configuration",
                        "fields": [
                            {
                                "type": 276,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Configuration, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 51,
                        "docs": []
                    },
                    {
                        "name": "ParasShared",
                        "fields": [
                            {
                                "type": 285,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasShared, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 52,
                        "docs": []
                    },
                    {
                        "name": "ParaInclusion",
                        "fields": [
                            {
                                "type": 286,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParaInclusion, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 53,
                        "docs": []
                    },
                    {
                        "name": "ParaInherent",
                        "fields": [
                            {
                                "type": 287,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParaInherent, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 54,
                        "docs": []
                    },
                    {
                        "name": "Paras",
                        "fields": [
                            {
                                "type": 322,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Paras, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 56,
                        "docs": []
                    },
                    {
                        "name": "Initializer",
                        "fields": [
                            {
                                "type": 324,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Initializer, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 57,
                        "docs": []
                    },
                    {
                        "name": "Hrmp",
                        "fields": [
                            {
                                "type": 325,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Hrmp, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 60,
                        "docs": []
                    },
                    {
                        "name": "ParasDisputes",
                        "fields": [
                            {
                                "type": 327,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasDisputes, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 62,
                        "docs": []
                    },
                    {
                        "name": "ParasSlashing",
                        "fields": [
                            {
                                "type": 328,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasSlashing, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 63,
                        "docs": []
                    },
                    {
                        "name": "OnDemand",
                        "fields": [
                            {
                                "type": 332,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<OnDemand, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 64,
                        "docs": []
                    },
                    {
                        "name": "Registrar",
                        "fields": [
                            {
                                "type": 333,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Registrar, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 70,
                        "docs": []
                    },
                    {
                        "name": "Slots",
                        "fields": [
                            {
                                "type": 334,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Slots, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 71,
                        "docs": []
                    },
                    {
                        "name": "Auctions",
                        "fields": [
                            {
                                "type": 335,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Auctions, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 72,
                        "docs": []
                    },
                    {
                        "name": "Crowdloan",
                        "fields": [
                            {
                                "type": 337,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Crowdloan, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 73,
                        "docs": []
                    },
                    {
                        "name": "Coretime",
                        "fields": [
                            {
                                "type": 342,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Coretime, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 74,
                        "docs": []
                    },
                    {
                        "name": "StateTrieMigration",
                        "fields": [
                            {
                                "type": 347,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<StateTrieMigration, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 98,
                        "docs": []
                    },
                    {
                        "name": "XcmPallet",
                        "fields": [
                            {
                                "type": 353,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmPallet, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 99,
                        "docs": []
                    },
                    {
                        "name": "MessageQueue",
                        "fields": [
                            {
                                "type": 432,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MessageQueue, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 100,
                        "docs": []
                    },
                    {
                        "name": "AssetRate",
                        "fields": [
                            {
                                "type": 435,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssetRate, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 101,
                        "docs": []
                    },
                    {
                        "name": "Beefy",
                        "fields": [
                            {
                                "type": 437,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Beefy, Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 200,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 94,
            "path": [
                "frame_system",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "remark",
                        "fields": [
                            {
                                "name": "remark",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Make some on-chain remark.",
                            "",
                            "Can be executed by every `origin`."
                        ]
                    },
                    {
                        "name": "set_heap_pages",
                        "fields": [
                            {
                                "name": "pages",
                                "type": 12,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Set the number of pages in the WebAssembly environment's heap."
                        ]
                    },
                    {
                        "name": "set_code",
                        "fields": [
                            {
                                "name": "code",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Set the new runtime code."
                        ]
                    },
                    {
                        "name": "set_code_without_checks",
                        "fields": [
                            {
                                "name": "code",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Set the new runtime code without doing any checks of the given `code`.",
                            "",
                            "Note that runtime upgrades will not run if this is called with a not-increasing spec",
                            "version!"
                        ]
                    },
                    {
                        "name": "set_storage",
                        "fields": [
                            {
                                "name": "items",
                                "type": 95,
                                "typeName": "Vec<KeyValue>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Set some items of storage."
                        ]
                    },
                    {
                        "name": "kill_storage",
                        "fields": [
                            {
                                "name": "keys",
                                "type": 97,
                                "typeName": "Vec<Key>",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "Kill some items from storage."
                        ]
                    },
                    {
                        "name": "kill_prefix",
                        "fields": [
                            {
                                "name": "prefix",
                                "type": 14,
                                "typeName": "Key",
                                "docs": []
                            },
                            {
                                "name": "subkeys",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "Kill all storage items with a key that starts with the given prefix.",
                            "",
                            "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                            "the prefix we are removing to accurately calculate the weight of this function."
                        ]
                    },
                    {
                        "name": "remark_with_event",
                        "fields": [
                            {
                                "name": "remark",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "Make some on-chain remark and emit event."
                        ]
                    },
                    {
                        "name": "authorize_upgrade",
                        "fields": [
                            {
                                "name": "code_hash",
                                "type": 13,
                                "typeName": "T::Hash",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": [
                            "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                            "later.",
                            "",
                            "This call requires Root origin."
                        ]
                    },
                    {
                        "name": "authorize_upgrade_without_checks",
                        "fields": [
                            {
                                "name": "code_hash",
                                "type": 13,
                                "typeName": "T::Hash",
                                "docs": []
                            }
                        ],
                        "index": 10,
                        "docs": [
                            "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                            "later.",
                            "",
                            "WARNING: This authorizes an upgrade that will take place without any safety checks, for",
                            "example that the spec name remains the same and that the version number increases. Not",
                            "recommended for normal use. Use `authorize_upgrade` instead.",
                            "",
                            "This call requires Root origin."
                        ]
                    },
                    {
                        "name": "apply_authorized_upgrade",
                        "fields": [
                            {
                                "name": "code",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            }
                        ],
                        "index": 11,
                        "docs": [
                            "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
                            "",
                            "If the authorization required a version check, this call will ensure the spec name",
                            "remains unchanged and that the spec version has increased.",
                            "",
                            "Depending on the runtime's `OnSetCode` configuration, this function may directly apply",
                            "the new `code` in the same block or attempt to schedule the upgrade.",
                            "",
                            "All origins are allowed."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 95,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 96
            },
            "docs": []
        },
        {
            "id": 96,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    14,
                    14
                ]
            },
            "docs": []
        },
        {
            "id": 97,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 14
            },
            "docs": []
        },
        {
            "id": 98,
            "path": [
                "pallet_scheduler",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "schedule",
                        "fields": [
                            {
                                "name": "when",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            },
                            {
                                "name": "maybe_periodic",
                                "type": 99,
                                "typeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                                "docs": []
                            },
                            {
                                "name": "priority",
                                "type": 2,
                                "typeName": "schedule::Priority",
                                "docs": []
                            },
                            {
                                "name": "call",
                                "type": 93,
                                "typeName": "Box<<T as Config>::RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Anonymously schedule a task."
                        ]
                    },
                    {
                        "name": "cancel",
                        "fields": [
                            {
                                "name": "when",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            },
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Cancel an anonymously scheduled task."
                        ]
                    },
                    {
                        "name": "schedule_named",
                        "fields": [
                            {
                                "name": "id",
                                "type": 1,
                                "typeName": "TaskName",
                                "docs": []
                            },
                            {
                                "name": "when",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            },
                            {
                                "name": "maybe_periodic",
                                "type": 99,
                                "typeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                                "docs": []
                            },
                            {
                                "name": "priority",
                                "type": 2,
                                "typeName": "schedule::Priority",
                                "docs": []
                            },
                            {
                                "name": "call",
                                "type": 93,
                                "typeName": "Box<<T as Config>::RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Schedule a named task."
                        ]
                    },
                    {
                        "name": "cancel_named",
                        "fields": [
                            {
                                "name": "id",
                                "type": 1,
                                "typeName": "TaskName",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Cancel a named scheduled task."
                        ]
                    },
                    {
                        "name": "schedule_after",
                        "fields": [
                            {
                                "name": "after",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            },
                            {
                                "name": "maybe_periodic",
                                "type": 99,
                                "typeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                                "docs": []
                            },
                            {
                                "name": "priority",
                                "type": 2,
                                "typeName": "schedule::Priority",
                                "docs": []
                            },
                            {
                                "name": "call",
                                "type": 93,
                                "typeName": "Box<<T as Config>::RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Anonymously schedule a task after a delay."
                        ]
                    },
                    {
                        "name": "schedule_named_after",
                        "fields": [
                            {
                                "name": "id",
                                "type": 1,
                                "typeName": "TaskName",
                                "docs": []
                            },
                            {
                                "name": "after",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            },
                            {
                                "name": "maybe_periodic",
                                "type": 99,
                                "typeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                                "docs": []
                            },
                            {
                                "name": "priority",
                                "type": 2,
                                "typeName": "schedule::Priority",
                                "docs": []
                            },
                            {
                                "name": "call",
                                "type": 93,
                                "typeName": "Box<<T as Config>::RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "Schedule a named task after a delay."
                        ]
                    },
                    {
                        "name": "set_retry",
                        "fields": [
                            {
                                "name": "task",
                                "type": 32,
                                "typeName": "TaskAddress<BlockNumberFor<T>>",
                                "docs": []
                            },
                            {
                                "name": "retries",
                                "type": 2,
                                "typeName": "u8",
                                "docs": []
                            },
                            {
                                "name": "period",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "Set a retry configuration for a task so that, in case its scheduled run fails, it will",
                            "be retried after `period` blocks, for a total amount of `retries` retries or until it",
                            "succeeds.",
                            "",
                            "Tasks which need to be scheduled for a retry are still subject to weight metering and",
                            "agenda space, same as a regular task. If a periodic task fails, it will be scheduled",
                            "normally while the task is retrying.",
                            "",
                            "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic",
                            "clones of the original task. Their retry configuration will be derived from the",
                            "original task's configuration, but will have a lower value for `remaining` than the",
                            "original `total_retries`."
                        ]
                    },
                    {
                        "name": "set_retry_named",
                        "fields": [
                            {
                                "name": "id",
                                "type": 1,
                                "typeName": "TaskName",
                                "docs": []
                            },
                            {
                                "name": "retries",
                                "type": 2,
                                "typeName": "u8",
                                "docs": []
                            },
                            {
                                "name": "period",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "Set a retry configuration for a named task so that, in case its scheduled run fails, it",
                            "will be retried after `period` blocks, for a total amount of `retries` retries or until",
                            "it succeeds.",
                            "",
                            "Tasks which need to be scheduled for a retry are still subject to weight metering and",
                            "agenda space, same as a regular task. If a periodic task fails, it will be scheduled",
                            "normally while the task is retrying.",
                            "",
                            "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic",
                            "clones of the original task. Their retry configuration will be derived from the",
                            "original task's configuration, but will have a lower value for `remaining` than the",
                            "original `total_retries`."
                        ]
                    },
                    {
                        "name": "cancel_retry",
                        "fields": [
                            {
                                "name": "task",
                                "type": 32,
                                "typeName": "TaskAddress<BlockNumberFor<T>>",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": [
                            "Removes the retry configuration of a task."
                        ]
                    },
                    {
                        "name": "cancel_retry_named",
                        "fields": [
                            {
                                "name": "id",
                                "type": 1,
                                "typeName": "TaskName",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": [
                            "Cancel the retry configuration of a named task."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 99,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 32
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 32,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 100,
            "path": [
                "pallet_preimage",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "note_preimage",
                        "fields": [
                            {
                                "name": "bytes",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Register a preimage on-chain.",
                            "",
                            "If the preimage was previously requested, no fees or deposits are taken for providing",
                            "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
                        ]
                    },
                    {
                        "name": "unnote_preimage",
                        "fields": [
                            {
                                "name": "hash",
                                "type": 13,
                                "typeName": "T::Hash",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Clear an unrequested preimage from the runtime storage.",
                            "",
                            "If `len` is provided, then it will be a much cheaper operation.",
                            "",
                            "- `hash`: The hash of the preimage to be removed from the store.",
                            "- `len`: The length of the preimage of `hash`."
                        ]
                    },
                    {
                        "name": "request_preimage",
                        "fields": [
                            {
                                "name": "hash",
                                "type": 13,
                                "typeName": "T::Hash",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Request a preimage be uploaded to the chain without paying any fees or deposits.",
                            "",
                            "If the preimage requests has already been provided on-chain, we unreserve any deposit",
                            "a user may have paid, and take the control of the preimage out of their hands."
                        ]
                    },
                    {
                        "name": "unrequest_preimage",
                        "fields": [
                            {
                                "name": "hash",
                                "type": 13,
                                "typeName": "T::Hash",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Clear a previously made request for a preimage.",
                            "",
                            "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
                        ]
                    },
                    {
                        "name": "ensure_updated",
                        "fields": [
                            {
                                "name": "hashes",
                                "type": 101,
                                "typeName": "Vec<T::Hash>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Ensure that the a bulk of pre-images is upgraded.",
                            "",
                            "The caller pays no fee if at least 90% of pre-images were successfully updated."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 101,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 13
            },
            "docs": []
        },
        {
            "id": 102,
            "path": [
                "pallet_babe",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "report_equivocation",
                        "fields": [
                            {
                                "name": "equivocation_proof",
                                "type": 103,
                                "typeName": "Box<EquivocationProof<HeaderFor<T>>>",
                                "docs": []
                            },
                            {
                                "name": "key_owner_proof",
                                "type": 107,
                                "typeName": "T::KeyOwnerProof",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Report authority equivocation/misbehavior. This method will verify",
                            "the equivocation proof and validate the given key ownership proof",
                            "against the extracted offender. If both are valid, the offence will",
                            "be reported."
                        ]
                    },
                    {
                        "name": "report_equivocation_unsigned",
                        "fields": [
                            {
                                "name": "equivocation_proof",
                                "type": 103,
                                "typeName": "Box<EquivocationProof<HeaderFor<T>>>",
                                "docs": []
                            },
                            {
                                "name": "key_owner_proof",
                                "type": 107,
                                "typeName": "T::KeyOwnerProof",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Report authority equivocation/misbehavior. This method will verify",
                            "the equivocation proof and validate the given key ownership proof",
                            "against the extracted offender. If both are valid, the offence will",
                            "be reported.",
                            "This extrinsic must be called unsigned and it is expected that only",
                            "block authors will call it (validated in `ValidateUnsigned`), as such",
                            "if the block author is defined it will be defined as the equivocation",
                            "reporter."
                        ]
                    },
                    {
                        "name": "plan_config_change",
                        "fields": [
                            {
                                "name": "config",
                                "type": 108,
                                "typeName": "NextConfigDescriptor",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Plan an epoch config change. The epoch config change is recorded and will be enacted on",
                            "the next call to `enact_epoch_change`. The config will be activated one epoch after.",
                            "Multiple calls to this method will replace any existing planned config change that had",
                            "not been enacted yet."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 103,
            "path": [
                "sp_consensus_slots",
                "EquivocationProof"
            ],
            "params": [
                {
                    "name": "Header",
                    "type": 104
                },
                {
                    "name": "Id",
                    "type": 105
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "offender",
                        "type": 105,
                        "typeName": "Id",
                        "docs": []
                    },
                    {
                        "name": "slot",
                        "type": 106,
                        "typeName": "Slot",
                        "docs": []
                    },
                    {
                        "name": "first_header",
                        "type": 104,
                        "typeName": "Header",
                        "docs": []
                    },
                    {
                        "name": "second_header",
                        "type": 104,
                        "typeName": "Header",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 104,
            "path": [
                "sp_runtime",
                "generic",
                "header",
                "Header"
            ],
            "params": [
                {
                    "name": "Number",
                    "type": 4
                },
                {
                    "name": "Hash"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "parent_hash",
                        "type": 13,
                        "typeName": "Hash::Output",
                        "docs": []
                    },
                    {
                        "name": "number",
                        "type": 59,
                        "typeName": "Number",
                        "docs": []
                    },
                    {
                        "name": "state_root",
                        "type": 13,
                        "typeName": "Hash::Output",
                        "docs": []
                    },
                    {
                        "name": "extrinsics_root",
                        "type": 13,
                        "typeName": "Hash::Output",
                        "docs": []
                    },
                    {
                        "name": "digest",
                        "type": 15,
                        "typeName": "Digest",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 105,
            "path": [
                "sp_consensus_babe",
                "app",
                "Public"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 1,
                        "typeName": "sr25519::Public",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 106,
            "path": [
                "sp_consensus_slots",
                "Slot"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 12,
                        "typeName": "u64",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 107,
            "path": [
                "sp_session",
                "MembershipProof"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "session",
                        "type": 4,
                        "typeName": "SessionIndex",
                        "docs": []
                    },
                    {
                        "name": "trie_nodes",
                        "type": 97,
                        "typeName": "Vec<Vec<u8>>",
                        "docs": []
                    },
                    {
                        "name": "validator_count",
                        "type": 4,
                        "typeName": "ValidatorCount",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 108,
            "path": [
                "sp_consensus_babe",
                "digests",
                "NextConfigDescriptor"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "V1",
                        "fields": [
                            {
                                "name": "c",
                                "type": 109,
                                "typeName": "(u64, u64)",
                                "docs": []
                            },
                            {
                                "name": "allowed_slots",
                                "type": 110,
                                "typeName": "AllowedSlots",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 109,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    12,
                    12
                ]
            },
            "docs": []
        },
        {
            "id": 110,
            "path": [
                "sp_consensus_babe",
                "AllowedSlots"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "PrimarySlots",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "PrimaryAndSecondaryPlainSlots",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "PrimaryAndSecondaryVRFSlots",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 111,
            "path": [
                "pallet_timestamp",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "set",
                        "fields": [
                            {
                                "name": "now",
                                "type": 11,
                                "typeName": "T::Moment",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Set the current time.",
                            "",
                            "This call should be invoked exactly once per block. It will panic at the finalization",
                            "phase, if this call hasn't been invoked by that time.",
                            "",
                            "The timestamp should be greater than the previous one by the amount specified by",
                            "[`Config::MinimumPeriod`].",
                            "",
                            "The dispatch origin for this call must be _None_.",
                            "",
                            "This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware",
                            "that changing the complexity of this call could result exhausting the resources in a",
                            "block to execute any other calls.",
                            "",
                            "## Complexity",
                            "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                            "- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in",
                            "  `on_finalize`)",
                            "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 112,
            "path": [
                "pallet_indices",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "claim",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "T::AccountIndex",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Assign an previously unassigned index.",
                            "",
                            "Payment: `Deposit` is reserved from the sender account.",
                            "",
                            "The dispatch origin for this call must be _Signed_.",
                            "",
                            "- `index`: the index to be claimed. This must not be in use.",
                            "",
                            "Emits `IndexAssigned` if successful.",
                            "",
                            "## Complexity",
                            "- `O(1)`."
                        ]
                    },
                    {
                        "name": "transfer",
                        "fields": [
                            {
                                "name": "new",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "T::AccountIndex",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Assign an index already owned by the sender to another account. The balance reservation",
                            "is effectively transferred to the new account.",
                            "",
                            "The dispatch origin for this call must be _Signed_.",
                            "",
                            "- `index`: the index to be re-assigned. This must be owned by the sender.",
                            "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                            "",
                            "Emits `IndexAssigned` if successful.",
                            "",
                            "## Complexity",
                            "- `O(1)`."
                        ]
                    },
                    {
                        "name": "free",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "T::AccountIndex",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Free up an index owned by the sender.",
                            "",
                            "Payment: Any previous deposit placed for the index is unreserved in the sender account.",
                            "",
                            "The dispatch origin for this call must be _Signed_ and the sender must own the index.",
                            "",
                            "- `index`: the index to be freed. This must be owned by the sender.",
                            "",
                            "Emits `IndexFreed` if successful.",
                            "",
                            "## Complexity",
                            "- `O(1)`."
                        ]
                    },
                    {
                        "name": "force_transfer",
                        "fields": [
                            {
                                "name": "new",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "T::AccountIndex",
                                "docs": []
                            },
                            {
                                "name": "freeze",
                                "type": 8,
                                "typeName": "bool",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Force an index to an account. This doesn't require a deposit. If the index is already",
                            "held, then any deposit is reimbursed to its current owner.",
                            "",
                            "The dispatch origin for this call must be _Root_.",
                            "",
                            "- `index`: the index to be (re-)assigned.",
                            "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                            "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred.",
                            "",
                            "Emits `IndexAssigned` if successful.",
                            "",
                            "## Complexity",
                            "- `O(1)`."
                        ]
                    },
                    {
                        "name": "freeze",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "T::AccountIndex",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Freeze an index so it will always point to the sender account. This consumes the",
                            "deposit.",
                            "",
                            "The dispatch origin for this call must be _Signed_ and the signing account must have a",
                            "non-frozen account `index`.",
                            "",
                            "- `index`: the index to be frozen in place.",
                            "",
                            "Emits `IndexFrozen` if successful.",
                            "",
                            "## Complexity",
                            "- `O(1)`."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 113,
            "path": [
                "sp_runtime",
                "multiaddress",
                "MultiAddress"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                },
                {
                    "name": "AccountIndex",
                    "type": 35
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Id",
                        "fields": [
                            {
                                "type": 0,
                                "typeName": "AccountId",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Index",
                        "fields": [
                            {
                                "type": 114,
                                "typeName": "AccountIndex",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Raw",
                        "fields": [
                            {
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Address32",
                        "fields": [
                            {
                                "type": 1,
                                "typeName": "[u8; 32]",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "Address20",
                        "fields": [
                            {
                                "type": 62,
                                "typeName": "[u8; 20]",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 114,
            "path": [],
            "params": [],
            "def": {
                "tag": "compact",
                "value": 35
            },
            "docs": []
        },
        {
            "id": 115,
            "path": [
                "pallet_balances",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                },
                {
                    "name": "I"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "transfer_allow_death",
                        "fields": [
                            {
                                "name": "dest",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "value",
                                "type": 63,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Transfer some liquid free balance to another account.",
                            "",
                            "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.",
                            "If the sender's account is below the existential deposit as a result",
                            "of the transfer, the account will be reaped.",
                            "",
                            "The dispatch origin for this call must be `Signed` by the transactor."
                        ]
                    },
                    {
                        "name": "force_transfer",
                        "fields": [
                            {
                                "name": "source",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "value",
                                "type": 63,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Exactly as `transfer_allow_death`, except the origin must be root and the source account",
                            "may be specified."
                        ]
                    },
                    {
                        "name": "transfer_keep_alive",
                        "fields": [
                            {
                                "name": "dest",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "value",
                                "type": 63,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not",
                            "kill the origin account.",
                            "",
                            "99% of the time you want [`transfer_allow_death`] instead.",
                            "",
                            "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"
                        ]
                    },
                    {
                        "name": "transfer_all",
                        "fields": [
                            {
                                "name": "dest",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "keep_alive",
                                "type": 8,
                                "typeName": "bool",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Transfer the entire transferable balance from the caller account.",
                            "",
                            "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                            "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                            "transferred by this function. To ensure that this function results in a killed account,",
                            "you might need to prepare the account by removing any reference counters, storage",
                            "deposits, etc...",
                            "",
                            "The dispatch origin of this call must be Signed.",
                            "",
                            "- `dest`: The recipient of the transfer.",
                            "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                            "  of the funds the account has, causing the sender account to be killed (false), or",
                            "  transfer everything except at least the existential deposit, which will guarantee to",
                            "  keep the sender account alive (true)."
                        ]
                    },
                    {
                        "name": "force_unreserve",
                        "fields": [
                            {
                                "name": "who",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "Unreserve some balance from a user by force.",
                            "",
                            "Can only be called by ROOT."
                        ]
                    },
                    {
                        "name": "upgrade_accounts",
                        "fields": [
                            {
                                "name": "who",
                                "type": 116,
                                "typeName": "Vec<T::AccountId>",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "Upgrade a specified account.",
                            "",
                            "- `origin`: Must be `Signed`.",
                            "- `who`: The account to be upgraded.",
                            "",
                            "This will waive the transaction fee if at least all but 10% of the accounts needed to",
                            "be upgraded. (We let some not have to be upgraded just in order to allow for the",
                            "possibility of churn)."
                        ]
                    },
                    {
                        "name": "force_set_balance",
                        "fields": [
                            {
                                "name": "who",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "new_free",
                                "type": 63,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": [
                            "Set the regular balance of a given account.",
                            "",
                            "The dispatch origin for this call is `root`."
                        ]
                    },
                    {
                        "name": "force_adjust_total_issuance",
                        "fields": [
                            {
                                "name": "direction",
                                "type": 117,
                                "typeName": "AdjustmentDirection",
                                "docs": []
                            },
                            {
                                "name": "delta",
                                "type": 63,
                                "typeName": "T::Balance",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": [
                            "Adjust the total issuance in a saturating way.",
                            "",
                            "Can only be called by root and always needs a positive `delta`.",
                            "",
                            "# Example"
                        ]
                    },
                    {
                        "name": "burn",
                        "fields": [
                            {
                                "name": "value",
                                "type": 63,
                                "typeName": "T::Balance",
                                "docs": []
                            },
                            {
                                "name": "keep_alive",
                                "type": 8,
                                "typeName": "bool",
                                "docs": []
                            }
                        ],
                        "index": 10,
                        "docs": [
                            "Burn the specified liquid free balance from the origin account.",
                            "",
                            "If the origin's account ends up below the existential deposit as a result",
                            "of the burn and `keep_alive` is false, the account will be reaped.",
                            "",
                            "Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,",
                            "this `burn` operation will reduce total issuance by the amount _burned_."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 116,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 0
            },
            "docs": []
        },
        {
            "id": 117,
            "path": [
                "pallet_balances",
                "types",
                "AdjustmentDirection"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Increase",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Decrease",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 118,
            "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "bond",
                        "fields": [
                            {
                                "name": "value",
                                "type": 63,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "payee",
                                "type": 42,
                                "typeName": "RewardDestination<T::AccountId>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Take the origin account as a stash and lock up `value` of its balance. `controller` will",
                            "be the account that controls it.",
                            "",
                            "`value` must be more than the `minimum_balance` specified by `T::Currency`.",
                            "",
                            "The dispatch origin for this call must be _Signed_ by the stash account.",
                            "",
                            "Emits `Bonded`.",
                            "## Complexity",
                            "- Independent of the arguments. Moderate complexity.",
                            "- O(1).",
                            "- Three extra DB entries.",
                            "",
                            "NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned",
                            "unless the `origin` falls below _existential deposit_ (or equal to 0) and gets removed",
                            "as dust."
                        ]
                    },
                    {
                        "name": "bond_extra",
                        "fields": [
                            {
                                "name": "max_additional",
                                "type": 63,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Add some extra amount that have appeared in the stash `free_balance` into the balance up",
                            "for staking.",
                            "",
                            "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                            "",
                            "Use this if there are additional funds in your stash account that you wish to bond.",
                            "Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose",
                            "any limitation on the amount that can be added.",
                            "",
                            "Emits `Bonded`.",
                            "",
                            "## Complexity",
                            "- Independent of the arguments. Insignificant complexity.",
                            "- O(1)."
                        ]
                    },
                    {
                        "name": "unbond",
                        "fields": [
                            {
                                "name": "value",
                                "type": 63,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
                            "period ends. If this leaves an amount actively bonded less than",
                            "T::Currency::minimum_balance(), then it is increased to the full amount.",
                            "",
                            "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                            "",
                            "Once the unlock period is done, you can call `withdraw_unbonded` to actually move",
                            "the funds out of management ready for transfer.",
                            "",
                            "No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)",
                            "can co-exists at the same time. If there are no unlocking chunks slots available",
                            "[`Call::withdraw_unbonded`] is called to remove some of the chunks (if possible).",
                            "",
                            "If a user encounters the `InsufficientBond` error when calling this extrinsic,",
                            "they should call `chill` first in order to free up their bonded funds.",
                            "",
                            "Emits `Unbonded`.",
                            "",
                            "See also [`Call::withdraw_unbonded`]."
                        ]
                    },
                    {
                        "name": "withdraw_unbonded",
                        "fields": [
                            {
                                "name": "num_slashing_spans",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Remove any unlocked chunks from the `unlocking` queue from our management.",
                            "",
                            "This essentially frees up that balance to be used by the stash account to do whatever",
                            "it wants.",
                            "",
                            "The dispatch origin for this call must be _Signed_ by the controller.",
                            "",
                            "Emits `Withdrawn`.",
                            "",
                            "See also [`Call::unbond`].",
                            "",
                            "## Parameters",
                            "",
                            "- `num_slashing_spans` indicates the number of metadata slashing spans to clear when",
                            "this call results in a complete removal of all the data related to the stash account.",
                            "In this case, the `num_slashing_spans` must be larger or equal to the number of",
                            "slashing spans associated with the stash account in the [`SlashingSpans`] storage type,",
                            "otherwise the call will fail. The call weight is directly proportional to",
                            "`num_slashing_spans`.",
                            "",
                            "## Complexity",
                            "O(S) where S is the number of slashing spans to remove",
                            "NOTE: Weight annotation is the kill scenario, we refund otherwise."
                        ]
                    },
                    {
                        "name": "validate",
                        "fields": [
                            {
                                "name": "prefs",
                                "type": 44,
                                "typeName": "ValidatorPrefs",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Declare the desire to validate for the origin controller.",
                            "",
                            "Effects will be felt at the beginning of the next era.",
                            "",
                            "The dispatch origin for this call must be _Signed_ by the controller, not the stash."
                        ]
                    },
                    {
                        "name": "nominate",
                        "fields": [
                            {
                                "name": "targets",
                                "type": 119,
                                "typeName": "Vec<AccountIdLookupOf<T>>",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "Declare the desire to nominate `targets` for the origin controller.",
                            "",
                            "Effects will be felt at the beginning of the next era.",
                            "",
                            "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                            "",
                            "## Complexity",
                            "- The transaction's complexity is proportional to the size of `targets` (N)",
                            "which is capped at CompactAssignments::LIMIT (T::MaxNominations).",
                            "- Both the reads and writes follow a similar pattern."
                        ]
                    },
                    {
                        "name": "chill",
                        "fields": [],
                        "index": 6,
                        "docs": [
                            "Declare no desire to either validate or nominate.",
                            "",
                            "Effects will be felt at the beginning of the next era.",
                            "",
                            "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                            "",
                            "## Complexity",
                            "- Independent of the arguments. Insignificant complexity.",
                            "- Contains one read.",
                            "- Writes are limited to the `origin` account key."
                        ]
                    },
                    {
                        "name": "set_payee",
                        "fields": [
                            {
                                "name": "payee",
                                "type": 42,
                                "typeName": "RewardDestination<T::AccountId>",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "(Re-)set the payment target for a controller.",
                            "",
                            "Effects will be felt instantly (as soon as this function is completed successfully).",
                            "",
                            "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                            "",
                            "## Complexity",
                            "- O(1)",
                            "- Independent of the arguments. Insignificant complexity.",
                            "- Contains a limited number of reads.",
                            "- Writes are limited to the `origin` account key.",
                            "---------"
                        ]
                    },
                    {
                        "name": "set_controller",
                        "fields": [],
                        "index": 8,
                        "docs": [
                            "(Re-)sets the controller of a stash to the stash itself. This function previously",
                            "accepted a `controller` argument to set the controller to an account other than the",
                            "stash itself. This functionality has now been removed, now only setting the controller",
                            "to the stash, if it is not already.",
                            "",
                            "Effects will be felt instantly (as soon as this function is completed successfully).",
                            "",
                            "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                            "",
                            "## Complexity",
                            "O(1)",
                            "- Independent of the arguments. Insignificant complexity.",
                            "- Contains a limited number of reads.",
                            "- Writes are limited to the `origin` account key."
                        ]
                    },
                    {
                        "name": "set_validator_count",
                        "fields": [
                            {
                                "name": "new",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": [
                            "Sets the ideal number of validators.",
                            "",
                            "The dispatch origin must be Root.",
                            "",
                            "## Complexity",
                            "O(1)"
                        ]
                    },
                    {
                        "name": "increase_validator_count",
                        "fields": [
                            {
                                "name": "additional",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 10,
                        "docs": [
                            "Increments the ideal number of validators up to maximum of",
                            "`ElectionProviderBase::MaxWinners`.",
                            "",
                            "The dispatch origin must be Root.",
                            "",
                            "## Complexity",
                            "Same as [`Self::set_validator_count`]."
                        ]
                    },
                    {
                        "name": "scale_validator_count",
                        "fields": [
                            {
                                "name": "factor",
                                "type": 120,
                                "typeName": "Percent",
                                "docs": []
                            }
                        ],
                        "index": 11,
                        "docs": [
                            "Scale up the ideal number of validators by a factor up to maximum of",
                            "`ElectionProviderBase::MaxWinners`.",
                            "",
                            "The dispatch origin must be Root.",
                            "",
                            "## Complexity",
                            "Same as [`Self::set_validator_count`]."
                        ]
                    },
                    {
                        "name": "force_no_eras",
                        "fields": [],
                        "index": 12,
                        "docs": [
                            "Force there to be no new eras indefinitely.",
                            "",
                            "The dispatch origin must be Root.",
                            "",
                            "# Warning",
                            "",
                            "The election process starts multiple blocks before the end of the era.",
                            "Thus the election process may be ongoing when this is called. In this case the",
                            "election will continue until the next era is triggered.",
                            "",
                            "## Complexity",
                            "- No arguments.",
                            "- Weight: O(1)"
                        ]
                    },
                    {
                        "name": "force_new_era",
                        "fields": [],
                        "index": 13,
                        "docs": [
                            "Force there to be a new era at the end of the next session. After this, it will be",
                            "reset to normal (non-forced) behaviour.",
                            "",
                            "The dispatch origin must be Root.",
                            "",
                            "# Warning",
                            "",
                            "The election process starts multiple blocks before the end of the era.",
                            "If this is called just before a new era is triggered, the election process may not",
                            "have enough blocks to get a result.",
                            "",
                            "## Complexity",
                            "- No arguments.",
                            "- Weight: O(1)"
                        ]
                    },
                    {
                        "name": "set_invulnerables",
                        "fields": [
                            {
                                "name": "invulnerables",
                                "type": 116,
                                "typeName": "Vec<T::AccountId>",
                                "docs": []
                            }
                        ],
                        "index": 14,
                        "docs": [
                            "Set the validators who cannot be slashed (if any).",
                            "",
                            "The dispatch origin must be Root."
                        ]
                    },
                    {
                        "name": "force_unstake",
                        "fields": [
                            {
                                "name": "stash",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "num_slashing_spans",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 15,
                        "docs": [
                            "Force a current staker to become completely unstaked, immediately.",
                            "",
                            "The dispatch origin must be Root.",
                            "",
                            "## Parameters",
                            "",
                            "- `num_slashing_spans`: Refer to comments on [`Call::withdraw_unbonded`] for more",
                            "details."
                        ]
                    },
                    {
                        "name": "force_new_era_always",
                        "fields": [],
                        "index": 16,
                        "docs": [
                            "Force there to be a new era at the end of sessions indefinitely.",
                            "",
                            "The dispatch origin must be Root.",
                            "",
                            "# Warning",
                            "",
                            "The election process starts multiple blocks before the end of the era.",
                            "If this is called just before a new era is triggered, the election process may not",
                            "have enough blocks to get a result."
                        ]
                    },
                    {
                        "name": "cancel_deferred_slash",
                        "fields": [
                            {
                                "name": "era",
                                "type": 4,
                                "typeName": "EraIndex",
                                "docs": []
                            },
                            {
                                "name": "slash_indices",
                                "type": 121,
                                "typeName": "Vec<u32>",
                                "docs": []
                            }
                        ],
                        "index": 17,
                        "docs": [
                            "Cancel enactment of a deferred slash.",
                            "",
                            "Can be called by the `T::AdminOrigin`.",
                            "",
                            "Parameters: era and indices of the slashes for that era to kill."
                        ]
                    },
                    {
                        "name": "payout_stakers",
                        "fields": [
                            {
                                "name": "validator_stash",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "era",
                                "type": 4,
                                "typeName": "EraIndex",
                                "docs": []
                            }
                        ],
                        "index": 18,
                        "docs": [
                            "Pay out next page of the stakers behind a validator for the given era.",
                            "",
                            "- `validator_stash` is the stash account of the validator.",
                            "- `era` may be any era between `[current_era - history_depth; current_era]`.",
                            "",
                            "The origin of this call must be _Signed_. Any account can call this function, even if",
                            "it is not one of the stakers.",
                            "",
                            "The reward payout could be paged in case there are too many nominators backing the",
                            "`validator_stash`. This call will payout unpaid pages in an ascending order. To claim a",
                            "specific page, use `payout_stakers_by_page`.`",
                            "",
                            "If all pages are claimed, it returns an error `InvalidPage`."
                        ]
                    },
                    {
                        "name": "rebond",
                        "fields": [
                            {
                                "name": "value",
                                "type": 63,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 19,
                        "docs": [
                            "Rebond a portion of the stash scheduled to be unlocked.",
                            "",
                            "The dispatch origin must be signed by the controller.",
                            "",
                            "## Complexity",
                            "- Time complexity: O(L), where L is unlocking chunks",
                            "- Bounded by `MaxUnlockingChunks`."
                        ]
                    },
                    {
                        "name": "reap_stash",
                        "fields": [
                            {
                                "name": "stash",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "num_slashing_spans",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 20,
                        "docs": [
                            "Remove all data structures concerning a staker/stash once it is at a state where it can",
                            "be considered `dust` in the staking system. The requirements are:",
                            "",
                            "1. the `total_balance` of the stash is below existential deposit.",
                            "2. or, the `ledger.total` of the stash is below existential deposit.",
                            "3. or, existential deposit is zero and either `total_balance` or `ledger.total` is zero.",
                            "",
                            "The former can happen in cases like a slash; the latter when a fully unbonded account",
                            "is still receiving staking rewards in `RewardDestination::Staked`.",
                            "",
                            "It can be called by anyone, as long as `stash` meets the above requirements.",
                            "",
                            "Refunds the transaction fees upon successful execution.",
                            "",
                            "## Parameters",
                            "",
                            "- `num_slashing_spans`: Refer to comments on [`Call::withdraw_unbonded`] for more",
                            "details."
                        ]
                    },
                    {
                        "name": "kick",
                        "fields": [
                            {
                                "name": "who",
                                "type": 119,
                                "typeName": "Vec<AccountIdLookupOf<T>>",
                                "docs": []
                            }
                        ],
                        "index": 21,
                        "docs": [
                            "Remove the given nominations from the calling validator.",
                            "",
                            "Effects will be felt at the beginning of the next era.",
                            "",
                            "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                            "",
                            "- `who`: A list of nominator stash accounts who are nominating this validator which",
                            "  should no longer be nominating this validator.",
                            "",
                            "Note: Making this call only makes sense if you first set the validator preferences to",
                            "block any further nominations."
                        ]
                    },
                    {
                        "name": "set_staking_configs",
                        "fields": [
                            {
                                "name": "min_nominator_bond",
                                "type": 122,
                                "typeName": "ConfigOp<BalanceOf<T>>",
                                "docs": []
                            },
                            {
                                "name": "min_validator_bond",
                                "type": 122,
                                "typeName": "ConfigOp<BalanceOf<T>>",
                                "docs": []
                            },
                            {
                                "name": "max_nominator_count",
                                "type": 123,
                                "typeName": "ConfigOp<u32>",
                                "docs": []
                            },
                            {
                                "name": "max_validator_count",
                                "type": 123,
                                "typeName": "ConfigOp<u32>",
                                "docs": []
                            },
                            {
                                "name": "chill_threshold",
                                "type": 124,
                                "typeName": "ConfigOp<Percent>",
                                "docs": []
                            },
                            {
                                "name": "min_commission",
                                "type": 125,
                                "typeName": "ConfigOp<Perbill>",
                                "docs": []
                            },
                            {
                                "name": "max_staked_rewards",
                                "type": 124,
                                "typeName": "ConfigOp<Percent>",
                                "docs": []
                            }
                        ],
                        "index": 22,
                        "docs": [
                            "Update the various staking configurations .",
                            "",
                            "* `min_nominator_bond`: The minimum active bond needed to be a nominator.",
                            "* `min_validator_bond`: The minimum active bond needed to be a validator.",
                            "* `max_nominator_count`: The max number of users who can be a nominator at once. When",
                            "  set to `None`, no limit is enforced.",
                            "* `max_validator_count`: The max number of users who can be a validator at once. When",
                            "  set to `None`, no limit is enforced.",
                            "* `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which",
                            "  should be filled in order for the `chill_other` transaction to work.",
                            "* `min_commission`: The minimum amount of commission that each validators must maintain.",
                            "  This is checked only upon calling `validate`. Existing validators are not affected.",
                            "",
                            "RuntimeOrigin must be Root to call this function.",
                            "",
                            "NOTE: Existing nominators and validators will not be affected by this update.",
                            "to kick people under the new limits, `chill_other` should be called."
                        ]
                    },
                    {
                        "name": "chill_other",
                        "fields": [
                            {
                                "name": "stash",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 23,
                        "docs": [
                            "Declare a `controller` to stop participating as either a validator or nominator.",
                            "",
                            "Effects will be felt at the beginning of the next era.",
                            "",
                            "The dispatch origin for this call must be _Signed_, but can be called by anyone.",
                            "",
                            "If the caller is the same as the controller being targeted, then no further checks are",
                            "enforced, and this function behaves just like `chill`.",
                            "",
                            "If the caller is different than the controller being targeted, the following conditions",
                            "must be met:",
                            "",
                            "* `controller` must belong to a nominator who has become non-decodable,",
                            "",
                            "Or:",
                            "",
                            "* A `ChillThreshold` must be set and checked which defines how close to the max",
                            "  nominators or validators we must reach before users can start chilling one-another.",
                            "* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine",
                            "  how close we are to the threshold.",
                            "* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines",
                            "  if this is a person that should be chilled because they have not met the threshold",
                            "  bond required.",
                            "",
                            "This can be helpful if bond requirements are updated, and we need to remove old users",
                            "who do not satisfy these requirements."
                        ]
                    },
                    {
                        "name": "force_apply_min_commission",
                        "fields": [
                            {
                                "name": "validator_stash",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 24,
                        "docs": [
                            "Force a validator to have at least the minimum commission. This will not affect a",
                            "validator who already has a commission greater than or equal to the minimum. Any account",
                            "can call this."
                        ]
                    },
                    {
                        "name": "set_min_commission",
                        "fields": [
                            {
                                "name": "new",
                                "type": 43,
                                "typeName": "Perbill",
                                "docs": []
                            }
                        ],
                        "index": 25,
                        "docs": [
                            "Sets the minimum amount of commission that each validators must maintain.",
                            "",
                            "This call has lower privilege requirements than `set_staking_config` and can be called",
                            "by the `T::AdminOrigin`. Root can always call this."
                        ]
                    },
                    {
                        "name": "payout_stakers_by_page",
                        "fields": [
                            {
                                "name": "validator_stash",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "era",
                                "type": 4,
                                "typeName": "EraIndex",
                                "docs": []
                            },
                            {
                                "name": "page",
                                "type": 4,
                                "typeName": "Page",
                                "docs": []
                            }
                        ],
                        "index": 26,
                        "docs": [
                            "Pay out a page of the stakers behind a validator for the given era and page.",
                            "",
                            "- `validator_stash` is the stash account of the validator.",
                            "- `era` may be any era between `[current_era - history_depth; current_era]`.",
                            "- `page` is the page index of nominators to pay out with value between 0 and",
                            "  `num_nominators / T::MaxExposurePageSize`.",
                            "",
                            "The origin of this call must be _Signed_. Any account can call this function, even if",
                            "it is not one of the stakers.",
                            "",
                            "If a validator has more than [`Config::MaxExposurePageSize`] nominators backing",
                            "them, then the list of nominators is paged, with each page being capped at",
                            "[`Config::MaxExposurePageSize`.] If a validator has more than one page of nominators,",
                            "the call needs to be made for each page separately in order for all the nominators",
                            "backing a validator to receive the reward. The nominators are not sorted across pages",
                            "and so it should not be assumed the highest staker would be on the topmost page and vice",
                            "versa. If rewards are not claimed in [`Config::HistoryDepth`] eras, they are lost."
                        ]
                    },
                    {
                        "name": "update_payee",
                        "fields": [
                            {
                                "name": "controller",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 27,
                        "docs": [
                            "Migrates an account's `RewardDestination::Controller` to",
                            "`RewardDestination::Account(controller)`.",
                            "",
                            "Effects will be felt instantly (as soon as this function is completed successfully).",
                            "",
                            "This will waive the transaction fee if the `payee` is successfully migrated."
                        ]
                    },
                    {
                        "name": "deprecate_controller_batch",
                        "fields": [
                            {
                                "name": "controllers",
                                "type": 126,
                                "typeName": "BoundedVec<T::AccountId, T::MaxControllersInDeprecationBatch>",
                                "docs": []
                            }
                        ],
                        "index": 28,
                        "docs": [
                            "Updates a batch of controller accounts to their corresponding stash account if they are",
                            "not the same. Ignores any controller accounts that do not exist, and does not operate if",
                            "the stash and controller are already the same.",
                            "",
                            "Effects will be felt instantly (as soon as this function is completed successfully).",
                            "",
                            "The dispatch origin must be `T::AdminOrigin`."
                        ]
                    },
                    {
                        "name": "restore_ledger",
                        "fields": [
                            {
                                "name": "stash",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "maybe_controller",
                                "type": 127,
                                "typeName": "Option<T::AccountId>",
                                "docs": []
                            },
                            {
                                "name": "maybe_total",
                                "type": 128,
                                "typeName": "Option<BalanceOf<T>>",
                                "docs": []
                            },
                            {
                                "name": "maybe_unlocking",
                                "type": 129,
                                "typeName": "Option<BoundedVec<UnlockChunk<BalanceOf<T>>, T::\nMaxUnlockingChunks>>",
                                "docs": []
                            }
                        ],
                        "index": 29,
                        "docs": [
                            "Restores the state of a ledger which is in an inconsistent state.",
                            "",
                            "The requirements to restore a ledger are the following:",
                            "* The stash is bonded; or",
                            "* The stash is not bonded but it has a staking lock left behind; or",
                            "* If the stash has an associated ledger and its state is inconsistent; or",
                            "* If the ledger is not corrupted *but* its staking lock is out of sync.",
                            "",
                            "The `maybe_*` input parameters will overwrite the corresponding data and metadata of the",
                            "ledger associated with the stash. If the input parameters are not set, the ledger will",
                            "be reset values from on-chain state."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 119,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 113
            },
            "docs": []
        },
        {
            "id": 120,
            "path": [
                "sp_arithmetic",
                "per_things",
                "Percent"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 2,
                        "typeName": "u8",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 121,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 4
            },
            "docs": []
        },
        {
            "id": 122,
            "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "ConfigOp"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 6
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Noop",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Set",
                        "fields": [
                            {
                                "type": 6,
                                "typeName": "T",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Remove",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 123,
            "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "ConfigOp"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 4
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Noop",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Set",
                        "fields": [
                            {
                                "type": 4,
                                "typeName": "T",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Remove",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 124,
            "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "ConfigOp"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 120
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Noop",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Set",
                        "fields": [
                            {
                                "type": 120,
                                "typeName": "T",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Remove",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 125,
            "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "ConfigOp"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 43
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Noop",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Set",
                        "fields": [
                            {
                                "type": 43,
                                "typeName": "T",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Remove",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 126,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 0
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 116,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 127,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 0
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 0,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 128,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 6
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 6,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 129,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 130
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 130,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 130,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 131
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 132,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 131,
            "path": [
                "pallet_staking",
                "UnlockChunk"
            ],
            "params": [
                {
                    "name": "Balance",
                    "type": 6
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "value",
                        "type": 63,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "era",
                        "type": 59,
                        "typeName": "EraIndex",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 132,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 131
            },
            "docs": []
        },
        {
            "id": 133,
            "path": [
                "pallet_session",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "set_keys",
                        "fields": [
                            {
                                "name": "keys",
                                "type": 134,
                                "typeName": "T::Keys",
                                "docs": []
                            },
                            {
                                "name": "proof",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Sets the session key(s) of the function caller to `keys`.",
                            "Allows an account to set its session key prior to becoming a validator.",
                            "This doesn't take effect until the next session.",
                            "",
                            "The dispatch origin of this function must be signed.",
                            "",
                            "## Complexity",
                            "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is",
                            "  fixed."
                        ]
                    },
                    {
                        "name": "purge_keys",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "Removes any session key(s) of the function caller.",
                            "",
                            "This doesn't take effect until the next session.",
                            "",
                            "The dispatch origin of this function must be Signed and the account must be either be",
                            "convertible to a validator ID using the chain's typical addressing system (this usually",
                            "means being a controller account) or directly convertible into a validator ID (which",
                            "usually means being a stash account).",
                            "",
                            "## Complexity",
                            "- `O(1)` in number of key types. Actual cost depends on the number of length of",
                            "  `T::Keys::key_ids()` which is fixed."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 134,
            "path": [
                "polkadot_runtime",
                "SessionKeys"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "grandpa",
                        "type": 53,
                        "typeName": "<Grandpa as $crate::BoundToRuntimeAppPublic>::Public",
                        "docs": []
                    },
                    {
                        "name": "babe",
                        "type": 105,
                        "typeName": "<Babe as $crate::BoundToRuntimeAppPublic>::Public",
                        "docs": []
                    },
                    {
                        "name": "para_validator",
                        "type": 135,
                        "typeName": "<Initializer as $crate::BoundToRuntimeAppPublic>::Public",
                        "docs": []
                    },
                    {
                        "name": "para_assignment",
                        "type": 136,
                        "typeName": "<ParaSessionInfo as $crate::BoundToRuntimeAppPublic>::Public",
                        "docs": []
                    },
                    {
                        "name": "authority_discovery",
                        "type": 137,
                        "typeName": "<AuthorityDiscovery as $crate::BoundToRuntimeAppPublic>::Public",
                        "docs": []
                    },
                    {
                        "name": "beefy",
                        "type": 138,
                        "typeName": "<Beefy as $crate::BoundToRuntimeAppPublic>::Public",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 135,
            "path": [
                "polkadot_primitives",
                "v7",
                "validator_app",
                "Public"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 1,
                        "typeName": "sr25519::Public",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 136,
            "path": [
                "polkadot_primitives",
                "v7",
                "assignment_app",
                "Public"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 1,
                        "typeName": "sr25519::Public",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 137,
            "path": [
                "sp_authority_discovery",
                "app",
                "Public"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 1,
                        "typeName": "sr25519::Public",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 138,
            "path": [
                "sp_consensus_beefy",
                "ecdsa_crypto",
                "Public"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 139,
                        "typeName": "ecdsa::Public",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 139,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 33,
                    "type": 2
                }
            },
            "docs": []
        },
        {
            "id": 140,
            "path": [
                "pallet_grandpa",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "report_equivocation",
                        "fields": [
                            {
                                "name": "equivocation_proof",
                                "type": 141,
                                "typeName": "Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>",
                                "docs": []
                            },
                            {
                                "name": "key_owner_proof",
                                "type": 107,
                                "typeName": "T::KeyOwnerProof",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Report voter equivocation/misbehavior. This method will verify the",
                            "equivocation proof and validate the given key ownership proof",
                            "against the extracted offender. If both are valid, the offence",
                            "will be reported."
                        ]
                    },
                    {
                        "name": "report_equivocation_unsigned",
                        "fields": [
                            {
                                "name": "equivocation_proof",
                                "type": 141,
                                "typeName": "Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>",
                                "docs": []
                            },
                            {
                                "name": "key_owner_proof",
                                "type": 107,
                                "typeName": "T::KeyOwnerProof",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Report voter equivocation/misbehavior. This method will verify the",
                            "equivocation proof and validate the given key ownership proof",
                            "against the extracted offender. If both are valid, the offence",
                            "will be reported.",
                            "",
                            "This extrinsic must be called unsigned and it is expected that only",
                            "block authors will call it (validated in `ValidateUnsigned`), as such",
                            "if the block author is defined it will be defined as the equivocation",
                            "reporter."
                        ]
                    },
                    {
                        "name": "note_stalled",
                        "fields": [
                            {
                                "name": "delay",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            },
                            {
                                "name": "best_finalized_block_number",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Note that the current authority set of the GRANDPA finality gadget has stalled.",
                            "",
                            "This will trigger a forced authority set change at the beginning of the next session, to",
                            "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume",
                            "that the block signalling the forced change will not be re-orged e.g. 1000 blocks.",
                            "The block production rate (which may be slowed down because of finality lagging) should",
                            "be taken into account when choosing the `delay`. The GRANDPA voters based on the new",
                            "authority will start voting on top of `best_finalized_block_number` for new finalized",
                            "blocks. `best_finalized_block_number` should be the highest of the latest finalized",
                            "block of all validators of the new authority set.",
                            "",
                            "Only callable by root."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 141,
            "path": [
                "sp_consensus_grandpa",
                "EquivocationProof"
            ],
            "params": [
                {
                    "name": "H",
                    "type": 13
                },
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "set_id",
                        "type": 12,
                        "typeName": "SetId",
                        "docs": []
                    },
                    {
                        "name": "equivocation",
                        "type": 142,
                        "typeName": "Equivocation<H, N>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 142,
            "path": [
                "sp_consensus_grandpa",
                "Equivocation"
            ],
            "params": [
                {
                    "name": "H",
                    "type": 13
                },
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Prevote",
                        "fields": [
                            {
                                "type": 143,
                                "typeName": "finality_grandpa::Equivocation<AuthorityId, finality_grandpa::Prevote<\nH, N>, AuthoritySignature,>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Precommit",
                        "fields": [
                            {
                                "type": 148,
                                "typeName": "finality_grandpa::Equivocation<AuthorityId, finality_grandpa::Precommit\n<H, N>, AuthoritySignature,>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 143,
            "path": [
                "finality_grandpa",
                "Equivocation"
            ],
            "params": [
                {
                    "name": "Id",
                    "type": 53
                },
                {
                    "name": "V",
                    "type": 144
                },
                {
                    "name": "S",
                    "type": 145
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "round_number",
                        "type": 12,
                        "typeName": "u64",
                        "docs": []
                    },
                    {
                        "name": "identity",
                        "type": 53,
                        "typeName": "Id",
                        "docs": []
                    },
                    {
                        "name": "first",
                        "type": 147,
                        "typeName": "(V, S)",
                        "docs": []
                    },
                    {
                        "name": "second",
                        "type": 147,
                        "typeName": "(V, S)",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 144,
            "path": [
                "finality_grandpa",
                "Prevote"
            ],
            "params": [
                {
                    "name": "H",
                    "type": 13
                },
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "target_hash",
                        "type": 13,
                        "typeName": "H",
                        "docs": []
                    },
                    {
                        "name": "target_number",
                        "type": 4,
                        "typeName": "N",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 145,
            "path": [
                "sp_consensus_grandpa",
                "app",
                "Signature"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 146,
                        "typeName": "ed25519::Signature",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 146,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 64,
                    "type": 2
                }
            },
            "docs": []
        },
        {
            "id": 147,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    144,
                    145
                ]
            },
            "docs": []
        },
        {
            "id": 148,
            "path": [
                "finality_grandpa",
                "Equivocation"
            ],
            "params": [
                {
                    "name": "Id",
                    "type": 53
                },
                {
                    "name": "V",
                    "type": 149
                },
                {
                    "name": "S",
                    "type": 145
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "round_number",
                        "type": 12,
                        "typeName": "u64",
                        "docs": []
                    },
                    {
                        "name": "identity",
                        "type": 53,
                        "typeName": "Id",
                        "docs": []
                    },
                    {
                        "name": "first",
                        "type": 150,
                        "typeName": "(V, S)",
                        "docs": []
                    },
                    {
                        "name": "second",
                        "type": 150,
                        "typeName": "(V, S)",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 149,
            "path": [
                "finality_grandpa",
                "Precommit"
            ],
            "params": [
                {
                    "name": "H",
                    "type": 13
                },
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "target_hash",
                        "type": 13,
                        "typeName": "H",
                        "docs": []
                    },
                    {
                        "name": "target_number",
                        "type": 4,
                        "typeName": "N",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 150,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    149,
                    145
                ]
            },
            "docs": []
        },
        {
            "id": 151,
            "path": [
                "pallet_treasury",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                },
                {
                    "name": "I"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "spend_local",
                        "fields": [
                            {
                                "name": "amount",
                                "type": 63,
                                "typeName": "BalanceOf<T, I>",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Propose and approve a spend of treasury funds.",
                            "",
                            "## Dispatch Origin",
                            "",
                            "Must be [`Config::SpendOrigin`] with the `Success` value being at least `amount`.",
                            "",
                            "### Details",
                            "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
                            "beneficiary.",
                            "",
                            "### Parameters",
                            "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
                            "- `beneficiary`: The destination account for the transfer.",
                            "",
                            "## Events",
                            "",
                            "Emits [`Event::SpendApproved`] if successful."
                        ]
                    },
                    {
                        "name": "remove_approval",
                        "fields": [
                            {
                                "name": "proposal_id",
                                "type": 59,
                                "typeName": "ProposalIndex",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Force a previously approved proposal to be removed from the approval queue.",
                            "",
                            "## Dispatch Origin",
                            "",
                            "Must be [`Config::RejectOrigin`].",
                            "",
                            "## Details",
                            "",
                            "The original deposit will no longer be returned.",
                            "",
                            "### Parameters",
                            "- `proposal_id`: The index of a proposal",
                            "",
                            "### Complexity",
                            "- O(A) where `A` is the number of approvals",
                            "",
                            "### Errors",
                            "- [`Error::ProposalNotApproved`]: The `proposal_id` supplied was not found in the",
                            "  approval queue, i.e., the proposal has not been approved. This could also mean the",
                            "  proposal does not exist altogether, thus there is no way it would have been approved",
                            "  in the first place."
                        ]
                    },
                    {
                        "name": "spend",
                        "fields": [
                            {
                                "name": "asset_kind",
                                "type": 55,
                                "typeName": "Box<T::AssetKind>",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 63,
                                "typeName": "AssetBalanceOf<T, I>",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 81,
                                "typeName": "Box<BeneficiaryLookupOf<T, I>>",
                                "docs": []
                            },
                            {
                                "name": "valid_from",
                                "type": 152,
                                "typeName": "Option<BlockNumberFor<T>>",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "Propose and approve a spend of treasury funds.",
                            "",
                            "## Dispatch Origin",
                            "",
                            "Must be [`Config::SpendOrigin`] with the `Success` value being at least",
                            "`amount` of `asset_kind` in the native asset. The amount of `asset_kind` is converted",
                            "for assertion using the [`Config::BalanceConverter`].",
                            "",
                            "## Details",
                            "",
                            "Create an approved spend for transferring a specific `amount` of `asset_kind` to a",
                            "designated beneficiary. The spend must be claimed using the `payout` dispatchable within",
                            "the [`Config::PayoutPeriod`].",
                            "",
                            "### Parameters",
                            "- `asset_kind`: An indicator of the specific asset class to be spent.",
                            "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
                            "- `beneficiary`: The beneficiary of the spend.",
                            "- `valid_from`: The block number from which the spend can be claimed. It can refer to",
                            "  the past if the resulting spend has not yet expired according to the",
                            "  [`Config::PayoutPeriod`]. If `None`, the spend can be claimed immediately after",
                            "  approval.",
                            "",
                            "## Events",
                            "",
                            "Emits [`Event::AssetSpendApproved`] if successful."
                        ]
                    },
                    {
                        "name": "payout",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "SpendIndex",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "Claim a spend.",
                            "",
                            "## Dispatch Origin",
                            "",
                            "Must be signed",
                            "",
                            "## Details",
                            "",
                            "Spends must be claimed within some temporal bounds. A spend may be claimed within one",
                            "[`Config::PayoutPeriod`] from the `valid_from` block.",
                            "In case of a payout failure, the spend status must be updated with the `check_status`",
                            "dispatchable before retrying with the current function.",
                            "",
                            "### Parameters",
                            "- `index`: The spend index.",
                            "",
                            "## Events",
                            "",
                            "Emits [`Event::Paid`] if successful."
                        ]
                    },
                    {
                        "name": "check_status",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "SpendIndex",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "Check the status of the spend and remove it from the storage if processed.",
                            "",
                            "## Dispatch Origin",
                            "",
                            "Must be signed.",
                            "",
                            "## Details",
                            "",
                            "The status check is a prerequisite for retrying a failed payout.",
                            "If a spend has either succeeded or expired, it is removed from the storage by this",
                            "function. In such instances, transaction fees are refunded.",
                            "",
                            "### Parameters",
                            "- `index`: The spend index.",
                            "",
                            "## Events",
                            "",
                            "Emits [`Event::PaymentFailed`] if the spend payout has failed.",
                            "Emits [`Event::SpendProcessed`] if the spend payout has succeed."
                        ]
                    },
                    {
                        "name": "void_spend",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "SpendIndex",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": [
                            "Void previously approved spend.",
                            "",
                            "## Dispatch Origin",
                            "",
                            "Must be [`Config::RejectOrigin`].",
                            "",
                            "## Details",
                            "",
                            "A spend void is only possible if the payout has not been attempted yet.",
                            "",
                            "### Parameters",
                            "- `index`: The spend index.",
                            "",
                            "## Events",
                            "",
                            "Emits [`Event::AssetSpendVoided`] if successful."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 152,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 4
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 4,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 153,
            "path": [
                "pallet_conviction_voting",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                },
                {
                    "name": "I"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "vote",
                        "fields": [
                            {
                                "name": "poll_index",
                                "type": 59,
                                "typeName": "PollIndexOf<T, I>",
                                "docs": []
                            },
                            {
                                "name": "vote",
                                "type": 154,
                                "typeName": "AccountVote<BalanceOf<T, I>>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;",
                            "otherwise it is a vote to keep the status quo.",
                            "",
                            "The dispatch origin of this call must be _Signed_.",
                            "",
                            "- `poll_index`: The index of the poll to vote for.",
                            "- `vote`: The vote configuration.",
                            "",
                            "Weight: `O(R)` where R is the number of polls the voter has voted on."
                        ]
                    },
                    {
                        "name": "delegate",
                        "fields": [
                            {
                                "name": "class",
                                "type": 91,
                                "typeName": "ClassOf<T, I>",
                                "docs": []
                            },
                            {
                                "name": "to",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "conviction",
                                "type": 156,
                                "typeName": "Conviction",
                                "docs": []
                            },
                            {
                                "name": "balance",
                                "type": 6,
                                "typeName": "BalanceOf<T, I>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Delegate the voting power (with some given conviction) of the sending account for a",
                            "particular class of polls.",
                            "",
                            "The balance delegated is locked for as long as it's delegated, and thereafter for the",
                            "time appropriate for the conviction's lock period.",
                            "",
                            "The dispatch origin of this call must be _Signed_, and the signing account must either:",
                            "  - be delegating already; or",
                            "  - have no voting activity (if there is, then it will need to be removed through",
                            "    `remove_vote`).",
                            "",
                            "- `to`: The account whose voting the `target` account's voting power will follow.",
                            "- `class`: The class of polls to delegate. To delegate multiple classes, multiple calls",
                            "  to this function are required.",
                            "- `conviction`: The conviction that will be attached to the delegated votes. When the",
                            "  account is undelegated, the funds will be locked for the corresponding period.",
                            "- `balance`: The amount of the account's balance to be used in delegating. This must not",
                            "  be more than the account's current balance.",
                            "",
                            "Emits `Delegated`.",
                            "",
                            "Weight: `O(R)` where R is the number of polls the voter delegating to has",
                            "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
                        ]
                    },
                    {
                        "name": "undelegate",
                        "fields": [
                            {
                                "name": "class",
                                "type": 91,
                                "typeName": "ClassOf<T, I>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Undelegate the voting power of the sending account for a particular class of polls.",
                            "",
                            "Tokens may be unlocked following once an amount of time consistent with the lock period",
                            "of the conviction with which the delegation was issued has passed.",
                            "",
                            "The dispatch origin of this call must be _Signed_ and the signing account must be",
                            "currently delegating.",
                            "",
                            "- `class`: The class of polls to remove the delegation from.",
                            "",
                            "Emits `Undelegated`.",
                            "",
                            "Weight: `O(R)` where R is the number of polls the voter delegating to has",
                            "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
                        ]
                    },
                    {
                        "name": "unlock",
                        "fields": [
                            {
                                "name": "class",
                                "type": 91,
                                "typeName": "ClassOf<T, I>",
                                "docs": []
                            },
                            {
                                "name": "target",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Remove the lock caused by prior voting/delegating which has expired within a particular",
                            "class.",
                            "",
                            "The dispatch origin of this call must be _Signed_.",
                            "",
                            "- `class`: The class of polls to unlock.",
                            "- `target`: The account to remove the lock on.",
                            "",
                            "Weight: `O(R)` with R number of vote of target."
                        ]
                    },
                    {
                        "name": "remove_vote",
                        "fields": [
                            {
                                "name": "class",
                                "type": 157,
                                "typeName": "Option<ClassOf<T, I>>",
                                "docs": []
                            },
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "PollIndexOf<T, I>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Remove a vote for a poll.",
                            "",
                            "If:",
                            "- the poll was cancelled, or",
                            "- the poll is ongoing, or",
                            "- the poll has ended such that",
                            "  - the vote of the account was in opposition to the result; or",
                            "  - there was no conviction to the account's vote; or",
                            "  - the account made a split vote",
                            "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                            "funds being available.",
                            "",
                            "If, however, the poll has ended and:",
                            "- it finished corresponding to the vote of the account, and",
                            "- the account made a standard vote with conviction, and",
                            "- the lock period of the conviction is not over",
                            "...then the lock will be aggregated into the overall account's lock, which may involve",
                            "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                            "of both the amount locked and the time is it locked for).",
                            "",
                            "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                            "registered for poll `index`.",
                            "",
                            "- `index`: The index of poll of the vote to be removed.",
                            "- `class`: Optional parameter, if given it indicates the class of the poll. For polls",
                            "  which have finished or are cancelled, this must be `Some`.",
                            "",
                            "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
                            "  Weight is calculated for the maximum number of vote."
                        ]
                    },
                    {
                        "name": "remove_other_vote",
                        "fields": [
                            {
                                "name": "target",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "class",
                                "type": 91,
                                "typeName": "ClassOf<T, I>",
                                "docs": []
                            },
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "PollIndexOf<T, I>",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "Remove a vote for a poll.",
                            "",
                            "If the `target` is equal to the signer, then this function is exactly equivalent to",
                            "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                            "either because the poll was cancelled, because the voter lost the poll or",
                            "because the conviction period is over.",
                            "",
                            "The dispatch origin of this call must be _Signed_.",
                            "",
                            "- `target`: The account of the vote to be removed; this account must have voted for poll",
                            "  `index`.",
                            "- `index`: The index of poll of the vote to be removed.",
                            "- `class`: The class of the poll.",
                            "",
                            "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
                            "  Weight is calculated for the maximum number of vote."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 154,
            "path": [
                "pallet_conviction_voting",
                "vote",
                "AccountVote"
            ],
            "params": [
                {
                    "name": "Balance",
                    "type": 6
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Standard",
                        "fields": [
                            {
                                "name": "vote",
                                "type": 155,
                                "typeName": "Vote",
                                "docs": []
                            },
                            {
                                "name": "balance",
                                "type": 6,
                                "typeName": "Balance",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Split",
                        "fields": [
                            {
                                "name": "aye",
                                "type": 6,
                                "typeName": "Balance",
                                "docs": []
                            },
                            {
                                "name": "nay",
                                "type": 6,
                                "typeName": "Balance",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "SplitAbstain",
                        "fields": [
                            {
                                "name": "aye",
                                "type": 6,
                                "typeName": "Balance",
                                "docs": []
                            },
                            {
                                "name": "nay",
                                "type": 6,
                                "typeName": "Balance",
                                "docs": []
                            },
                            {
                                "name": "abstain",
                                "type": 6,
                                "typeName": "Balance",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 155,
            "path": [
                "pallet_conviction_voting",
                "vote",
                "Vote"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 156,
            "path": [
                "pallet_conviction_voting",
                "conviction",
                "Conviction"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Locked1x",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Locked2x",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Locked3x",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "Locked4x",
                        "fields": [],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "Locked5x",
                        "fields": [],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "Locked6x",
                        "fields": [],
                        "index": 6,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 157,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 91
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 91,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 158,
            "path": [
                "pallet_referenda",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                },
                {
                    "name": "I"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "submit",
                        "fields": [
                            {
                                "name": "proposal_origin",
                                "type": 159,
                                "typeName": "Box<PalletsOriginOf<T>>",
                                "docs": []
                            },
                            {
                                "name": "proposal",
                                "type": 92,
                                "typeName": "BoundedCallOf<T, I>",
                                "docs": []
                            },
                            {
                                "name": "enactment_moment",
                                "type": 166,
                                "typeName": "DispatchTime<BlockNumberFor<T>>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Propose a referendum on a privileged action.",
                            "",
                            "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds",
                            "  available.",
                            "- `proposal_origin`: The origin from which the proposal should be executed.",
                            "- `proposal`: The proposal.",
                            "- `enactment_moment`: The moment that the proposal should be enacted.",
                            "",
                            "Emits `Submitted`."
                        ]
                    },
                    {
                        "name": "place_decision_deposit",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "ReferendumIndex",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Post the Decision Deposit for a referendum.",
                            "",
                            "- `origin`: must be `Signed` and the account must have funds available for the",
                            "  referendum's track's Decision Deposit.",
                            "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be",
                            "  posted.",
                            "",
                            "Emits `DecisionDepositPlaced`."
                        ]
                    },
                    {
                        "name": "refund_decision_deposit",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "ReferendumIndex",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Refund the Decision Deposit for a closed referendum back to the depositor.",
                            "",
                            "- `origin`: must be `Signed` or `Root`.",
                            "- `index`: The index of a closed referendum whose Decision Deposit has not yet been",
                            "  refunded.",
                            "",
                            "Emits `DecisionDepositRefunded`."
                        ]
                    },
                    {
                        "name": "cancel",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "ReferendumIndex",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Cancel an ongoing referendum.",
                            "",
                            "- `origin`: must be the `CancelOrigin`.",
                            "- `index`: The index of the referendum to be cancelled.",
                            "",
                            "Emits `Cancelled`."
                        ]
                    },
                    {
                        "name": "kill",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "ReferendumIndex",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Cancel an ongoing referendum and slash the deposits.",
                            "",
                            "- `origin`: must be the `KillOrigin`.",
                            "- `index`: The index of the referendum to be cancelled.",
                            "",
                            "Emits `Killed` and `DepositSlashed`."
                        ]
                    },
                    {
                        "name": "nudge_referendum",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "ReferendumIndex",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "Advance a referendum onto its next logical state. Only used internally.",
                            "",
                            "- `origin`: must be `Root`.",
                            "- `index`: the referendum to be advanced."
                        ]
                    },
                    {
                        "name": "one_fewer_deciding",
                        "fields": [
                            {
                                "name": "track",
                                "type": 91,
                                "typeName": "TrackIdOf<T, I>",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "Advance a track onto its next logical state. Only used internally.",
                            "",
                            "- `origin`: must be `Root`.",
                            "- `track`: the track to be advanced.",
                            "",
                            "Action item for when there is now one fewer referendum in the deciding phase and the",
                            "`DecidingCount` is not yet updated. This means that we should either:",
                            "- begin deciding another referendum (and leave `DecidingCount` alone); or",
                            "- decrement `DecidingCount`."
                        ]
                    },
                    {
                        "name": "refund_submission_deposit",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "ReferendumIndex",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "Refund the Submission Deposit for a closed referendum back to the depositor.",
                            "",
                            "- `origin`: must be `Signed` or `Root`.",
                            "- `index`: The index of a closed referendum whose Submission Deposit has not yet been",
                            "  refunded.",
                            "",
                            "Emits `SubmissionDepositRefunded`."
                        ]
                    },
                    {
                        "name": "set_metadata",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "ReferendumIndex",
                                "docs": []
                            },
                            {
                                "name": "maybe_hash",
                                "type": 167,
                                "typeName": "Option<T::Hash>",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": [
                            "Set or clear metadata of a referendum.",
                            "",
                            "Parameters:",
                            "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a",
                            "  metadata of a finished referendum.",
                            "- `index`:  The index of a referendum to set or clear metadata for.",
                            "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 159,
            "path": [
                "polkadot_runtime",
                "OriginCaller"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "system",
                        "fields": [
                            {
                                "type": 160,
                                "typeName": "frame_system::Origin<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Origins",
                        "fields": [
                            {
                                "type": 161,
                                "typeName": "pallet_custom_origins::Origin",
                                "docs": []
                            }
                        ],
                        "index": 22,
                        "docs": []
                    },
                    {
                        "name": "ParachainsOrigin",
                        "fields": [
                            {
                                "type": 162,
                                "typeName": "parachains_origin::Origin",
                                "docs": []
                            }
                        ],
                        "index": 50,
                        "docs": []
                    },
                    {
                        "name": "XcmPallet",
                        "fields": [
                            {
                                "type": 164,
                                "typeName": "pallet_xcm::Origin",
                                "docs": []
                            }
                        ],
                        "index": 99,
                        "docs": []
                    },
                    {
                        "name": "Void",
                        "fields": [
                            {
                                "type": 165,
                                "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::\n__private::Void",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 160,
            "path": [
                "frame_support",
                "dispatch",
                "RawOrigin"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Root",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Signed",
                        "fields": [
                            {
                                "type": 0,
                                "typeName": "AccountId",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "None",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 161,
            "path": [
                "polkadot_runtime",
                "governance",
                "origins",
                "pallet_custom_origins",
                "Origin"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "StakingAdmin",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Treasurer",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "FellowshipAdmin",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "GeneralAdmin",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "AuctionAdmin",
                        "fields": [],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "LeaseAdmin",
                        "fields": [],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "ReferendumCanceller",
                        "fields": [],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "ReferendumKiller",
                        "fields": [],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "SmallTipper",
                        "fields": [],
                        "index": 8,
                        "docs": []
                    },
                    {
                        "name": "BigTipper",
                        "fields": [],
                        "index": 9,
                        "docs": []
                    },
                    {
                        "name": "SmallSpender",
                        "fields": [],
                        "index": 10,
                        "docs": []
                    },
                    {
                        "name": "MediumSpender",
                        "fields": [],
                        "index": 11,
                        "docs": []
                    },
                    {
                        "name": "BigSpender",
                        "fields": [],
                        "index": 12,
                        "docs": []
                    },
                    {
                        "name": "WhitelistedCaller",
                        "fields": [],
                        "index": 13,
                        "docs": []
                    },
                    {
                        "name": "WishForChange",
                        "fields": [],
                        "index": 14,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 162,
            "path": [
                "polkadot_runtime_parachains",
                "origin",
                "pallet",
                "Origin"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Parachain",
                        "fields": [
                            {
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 163,
            "path": [
                "polkadot_parachain_primitives",
                "primitives",
                "Id"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 164,
            "path": [
                "pallet_xcm",
                "pallet",
                "Origin"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Xcm",
                        "fields": [
                            {
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Response",
                        "fields": [
                            {
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 165,
            "path": [
                "sp_core",
                "Void"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": []
            },
            "docs": []
        },
        {
            "id": 166,
            "path": [
                "frame_support",
                "traits",
                "schedule",
                "DispatchTime"
            ],
            "params": [
                {
                    "name": "BlockNumber",
                    "type": 4
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "At",
                        "fields": [
                            {
                                "type": 4,
                                "typeName": "BlockNumber",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "After",
                        "fields": [
                            {
                                "type": 4,
                                "typeName": "BlockNumber",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 167,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 13
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 13,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 168,
            "path": [
                "pallet_whitelist",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "whitelist_call",
                        "fields": [
                            {
                                "name": "call_hash",
                                "type": 13,
                                "typeName": "T::Hash",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "remove_whitelisted_call",
                        "fields": [
                            {
                                "name": "call_hash",
                                "type": 13,
                                "typeName": "T::Hash",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "dispatch_whitelisted_call",
                        "fields": [
                            {
                                "name": "call_hash",
                                "type": 13,
                                "typeName": "T::Hash",
                                "docs": []
                            },
                            {
                                "name": "call_encoded_len",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "call_weight_witness",
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "dispatch_whitelisted_call_with_preimage",
                        "fields": [
                            {
                                "name": "call",
                                "type": 93,
                                "typeName": "Box<<T as Config>::RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 169,
            "path": [
                "pallet_parameters",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "set_parameter",
                        "fields": [
                            {
                                "name": "key_value",
                                "type": 170,
                                "typeName": "T::RuntimeParameters",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Set the value of a parameter.",
                            "",
                            "The dispatch origin of this call must be `AdminOrigin` for the given `key`. Values be",
                            "deleted by setting them to `None`."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 170,
            "path": [
                "polkadot_runtime",
                "RuntimeParameters"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Inflation",
                        "fields": [
                            {
                                "type": 171,
                                "typeName": "dynamic_params::inflation::Parameters",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 171,
            "path": [
                "polkadot_runtime",
                "dynamic_params",
                "inflation",
                "Parameters"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "MinInflation",
                        "fields": [
                            {
                                "type": 172,
                                "typeName": "MinInflation",
                                "docs": []
                            },
                            {
                                "type": 173,
                                "typeName": "Option<Perquintill>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "MaxInflation",
                        "fields": [
                            {
                                "type": 175,
                                "typeName": "MaxInflation",
                                "docs": []
                            },
                            {
                                "type": 173,
                                "typeName": "Option<Perquintill>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "IdealStake",
                        "fields": [
                            {
                                "type": 176,
                                "typeName": "IdealStake",
                                "docs": []
                            },
                            {
                                "type": 173,
                                "typeName": "Option<Perquintill>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Falloff",
                        "fields": [
                            {
                                "type": 177,
                                "typeName": "Falloff",
                                "docs": []
                            },
                            {
                                "type": 173,
                                "typeName": "Option<Perquintill>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "UseAuctionSlots",
                        "fields": [
                            {
                                "type": 178,
                                "typeName": "UseAuctionSlots",
                                "docs": []
                            },
                            {
                                "type": 179,
                                "typeName": "Option<bool>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 172,
            "path": [
                "polkadot_runtime",
                "dynamic_params",
                "inflation",
                "MinInflation"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": []
            },
            "docs": []
        },
        {
            "id": 173,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 174
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 174,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 174,
            "path": [
                "sp_arithmetic",
                "per_things",
                "Perquintill"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 12,
                        "typeName": "u64",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 175,
            "path": [
                "polkadot_runtime",
                "dynamic_params",
                "inflation",
                "MaxInflation"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": []
            },
            "docs": []
        },
        {
            "id": 176,
            "path": [
                "polkadot_runtime",
                "dynamic_params",
                "inflation",
                "IdealStake"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": []
            },
            "docs": []
        },
        {
            "id": 177,
            "path": [
                "polkadot_runtime",
                "dynamic_params",
                "inflation",
                "Falloff"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": []
            },
            "docs": []
        },
        {
            "id": 178,
            "path": [
                "polkadot_runtime",
                "dynamic_params",
                "inflation",
                "UseAuctionSlots"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": []
            },
            "docs": []
        },
        {
            "id": 179,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 8
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 8,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 180,
            "path": [
                "polkadot_runtime_common",
                "claims",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "claim",
                        "fields": [
                            {
                                "name": "dest",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "ethereum_signature",
                                "type": 181,
                                "typeName": "EcdsaSignature",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Make a claim to collect your DOTs.",
                            "",
                            "The dispatch origin for this call must be _None_.",
                            "",
                            "Unsigned Validation:",
                            "A call to claim is deemed valid if the signature provided matches",
                            "the expected signed message of:",
                            "",
                            "> Ethereum Signed Message:",
                            "> (configured prefix string)(address)",
                            "",
                            "and `address` matches the `dest` account.",
                            "",
                            "Parameters:",
                            "- `dest`: The destination account to payout the claim.",
                            "- `ethereum_signature`: The signature of an ethereum signed message matching the format",
                            "  described above.",
                            "",
                            "<weight>",
                            "The weight of this call is invariant over the input parameters.",
                            "Weight includes logic to validate unsigned `claim` call.",
                            "",
                            "Total Complexity: O(1)",
                            "</weight>"
                        ]
                    },
                    {
                        "name": "mint_claim",
                        "fields": [
                            {
                                "name": "who",
                                "type": 183,
                                "typeName": "EthereumAddress",
                                "docs": []
                            },
                            {
                                "name": "value",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "vesting_schedule",
                                "type": 184,
                                "typeName": "Option<(BalanceOf<T>, BalanceOf<T>, BlockNumberFor<T>)>",
                                "docs": []
                            },
                            {
                                "name": "statement",
                                "type": 186,
                                "typeName": "Option<StatementKind>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Mint a new claim to collect DOTs.",
                            "",
                            "The dispatch origin for this call must be _Root_.",
                            "",
                            "Parameters:",
                            "- `who`: The Ethereum address allowed to collect this claim.",
                            "- `value`: The number of DOTs that will be claimed.",
                            "- `vesting_schedule`: An optional vesting schedule for these DOTs.",
                            "",
                            "<weight>",
                            "The weight of this call is invariant over the input parameters.",
                            "We assume worst case that both vesting and statement is being inserted.",
                            "",
                            "Total Complexity: O(1)",
                            "</weight>"
                        ]
                    },
                    {
                        "name": "claim_attest",
                        "fields": [
                            {
                                "name": "dest",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "ethereum_signature",
                                "type": 181,
                                "typeName": "EcdsaSignature",
                                "docs": []
                            },
                            {
                                "name": "statement",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Make a claim to collect your DOTs by signing a statement.",
                            "",
                            "The dispatch origin for this call must be _None_.",
                            "",
                            "Unsigned Validation:",
                            "A call to `claim_attest` is deemed valid if the signature provided matches",
                            "the expected signed message of:",
                            "",
                            "> Ethereum Signed Message:",
                            "> (configured prefix string)(address)(statement)",
                            "",
                            "and `address` matches the `dest` account; the `statement` must match that which is",
                            "expected according to your purchase arrangement.",
                            "",
                            "Parameters:",
                            "- `dest`: The destination account to payout the claim.",
                            "- `ethereum_signature`: The signature of an ethereum signed message matching the format",
                            "  described above.",
                            "- `statement`: The identity of the statement which is being attested to in the",
                            "  signature.",
                            "",
                            "<weight>",
                            "The weight of this call is invariant over the input parameters.",
                            "Weight includes logic to validate unsigned `claim_attest` call.",
                            "",
                            "Total Complexity: O(1)",
                            "</weight>"
                        ]
                    },
                    {
                        "name": "attest",
                        "fields": [
                            {
                                "name": "statement",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Attest to a statement, needed to finalize the claims process.",
                            "",
                            "WARNING: Insecure unless your chain includes `PrevalidateAttests` as a",
                            "`SignedExtension`.",
                            "",
                            "Unsigned Validation:",
                            "A call to attest is deemed valid if the sender has a `Preclaim` registered",
                            "and provides a `statement` which is expected for the account.",
                            "",
                            "Parameters:",
                            "- `statement`: The identity of the statement which is being attested to in the",
                            "  signature.",
                            "",
                            "<weight>",
                            "The weight of this call is invariant over the input parameters.",
                            "Weight includes logic to do pre-validation on `attest` call.",
                            "",
                            "Total Complexity: O(1)",
                            "</weight>"
                        ]
                    },
                    {
                        "name": "move_claim",
                        "fields": [
                            {
                                "name": "old",
                                "type": 183,
                                "typeName": "EthereumAddress",
                                "docs": []
                            },
                            {
                                "name": "new",
                                "type": 183,
                                "typeName": "EthereumAddress",
                                "docs": []
                            },
                            {
                                "name": "maybe_preclaim",
                                "type": 127,
                                "typeName": "Option<T::AccountId>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 181,
            "path": [
                "polkadot_runtime_common",
                "claims",
                "EcdsaSignature"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 182,
                        "typeName": "[u8; 65]",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 182,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 65,
                    "type": 2
                }
            },
            "docs": []
        },
        {
            "id": 183,
            "path": [
                "polkadot_runtime_common",
                "claims",
                "EthereumAddress"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 62,
                        "typeName": "[u8; 20]",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 184,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 185
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 185,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 185,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    6,
                    6,
                    4
                ]
            },
            "docs": []
        },
        {
            "id": 186,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 187
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 187,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 187,
            "path": [
                "polkadot_runtime_common",
                "claims",
                "StatementKind"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Regular",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Saft",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 188,
            "path": [
                "pallet_vesting",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "vest",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "Unlock any vested funds of the sender account.",
                            "",
                            "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
                            "locked under this pallet.",
                            "",
                            "Emits either `VestingCompleted` or `VestingUpdated`.",
                            "",
                            "## Complexity",
                            "- `O(1)`."
                        ]
                    },
                    {
                        "name": "vest_other",
                        "fields": [
                            {
                                "name": "target",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Unlock any vested funds of a `target` account.",
                            "",
                            "The dispatch origin for this call must be _Signed_.",
                            "",
                            "- `target`: The account whose vested funds should be unlocked. Must have funds still",
                            "locked under this pallet.",
                            "",
                            "Emits either `VestingCompleted` or `VestingUpdated`.",
                            "",
                            "## Complexity",
                            "- `O(1)`."
                        ]
                    },
                    {
                        "name": "vested_transfer",
                        "fields": [
                            {
                                "name": "target",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "schedule",
                                "type": 189,
                                "typeName": "VestingInfo<BalanceOf<T>, BlockNumberFor<T>>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Create a vested transfer.",
                            "",
                            "The dispatch origin for this call must be _Signed_.",
                            "",
                            "- `target`: The account receiving the vested funds.",
                            "- `schedule`: The vesting schedule attached to the transfer.",
                            "",
                            "Emits `VestingCreated`.",
                            "",
                            "NOTE: This will unlock all schedules through the current block.",
                            "",
                            "## Complexity",
                            "- `O(1)`."
                        ]
                    },
                    {
                        "name": "force_vested_transfer",
                        "fields": [
                            {
                                "name": "source",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "target",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "schedule",
                                "type": 189,
                                "typeName": "VestingInfo<BalanceOf<T>, BlockNumberFor<T>>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Force a vested transfer.",
                            "",
                            "The dispatch origin for this call must be _Root_.",
                            "",
                            "- `source`: The account whose funds should be transferred.",
                            "- `target`: The account that should be transferred the vested funds.",
                            "- `schedule`: The vesting schedule attached to the transfer.",
                            "",
                            "Emits `VestingCreated`.",
                            "",
                            "NOTE: This will unlock all schedules through the current block.",
                            "",
                            "## Complexity",
                            "- `O(1)`."
                        ]
                    },
                    {
                        "name": "merge_schedules",
                        "fields": [
                            {
                                "name": "schedule1_index",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "schedule2_index",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
                            "the highest possible start and end blocks. If both schedules have already started the",
                            "current block will be used as the schedule start; with the caveat that if one schedule",
                            "is finished by the current block, the other will be treated as the new merged schedule,",
                            "unmodified.",
                            "",
                            "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
                            "NOTE: This will unlock all schedules through the current block prior to merging.",
                            "NOTE: If both schedules have ended by the current block, no new schedule will be created",
                            "and both will be removed.",
                            "",
                            "Merged schedule attributes:",
                            "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
                            "  current_block)`.",
                            "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
                            "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
                            "",
                            "The dispatch origin for this call must be _Signed_.",
                            "",
                            "- `schedule1_index`: index of the first schedule to merge.",
                            "- `schedule2_index`: index of the second schedule to merge."
                        ]
                    },
                    {
                        "name": "force_remove_vesting_schedule",
                        "fields": [
                            {
                                "name": "target",
                                "type": 113,
                                "typeName": "<T::Lookup as StaticLookup>::Source",
                                "docs": []
                            },
                            {
                                "name": "schedule_index",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "Force remove a vesting schedule",
                            "",
                            "The dispatch origin for this call must be _Root_.",
                            "",
                            "- `target`: An account that has a vesting schedule",
                            "- `schedule_index`: The vesting schedule index that should be removed"
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 189,
            "path": [
                "pallet_vesting",
                "vesting_info",
                "VestingInfo"
            ],
            "params": [
                {
                    "name": "Balance",
                    "type": 6
                },
                {
                    "name": "BlockNumber",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "locked",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "per_block",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "starting_block",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 190,
            "path": [
                "pallet_utility",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "batch",
                        "fields": [
                            {
                                "name": "calls",
                                "type": 191,
                                "typeName": "Vec<<T as Config>::RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Send a batch of dispatch calls.",
                            "",
                            "May be called from any origin except `None`.",
                            "",
                            "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                            "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                            "",
                            "If origin is root then the calls are dispatched without checking origin filter. (This",
                            "includes bypassing `frame_system::Config::BaseCallFilter`).",
                            "",
                            "## Complexity",
                            "- O(C) where C is the number of calls to be batched.",
                            "",
                            "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                            "event is deposited. If a call failed and the batch was interrupted, then the",
                            "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                            "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                            "event is deposited."
                        ]
                    },
                    {
                        "name": "as_derivative",
                        "fields": [
                            {
                                "name": "index",
                                "type": 91,
                                "typeName": "u16",
                                "docs": []
                            },
                            {
                                "name": "call",
                                "type": 93,
                                "typeName": "Box<<T as Config>::RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Send a call through an indexed pseudonym of the sender.",
                            "",
                            "Filter from origin are passed along. The call will be dispatched with an origin which",
                            "use the same filter as the origin of this call.",
                            "",
                            "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                            "because you expect `proxy` to have been used prior in the call stack and you do not want",
                            "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                            "in the Multisig pallet instead.",
                            "",
                            "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                            "",
                            "The dispatch origin for this call must be _Signed_."
                        ]
                    },
                    {
                        "name": "batch_all",
                        "fields": [
                            {
                                "name": "calls",
                                "type": 191,
                                "typeName": "Vec<<T as Config>::RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Send a batch of dispatch calls and atomically execute them.",
                            "The whole transaction will rollback and fail if any of the calls failed.",
                            "",
                            "May be called from any origin except `None`.",
                            "",
                            "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                            "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                            "",
                            "If origin is root then the calls are dispatched without checking origin filter. (This",
                            "includes bypassing `frame_system::Config::BaseCallFilter`).",
                            "",
                            "## Complexity",
                            "- O(C) where C is the number of calls to be batched."
                        ]
                    },
                    {
                        "name": "dispatch_as",
                        "fields": [
                            {
                                "name": "as_origin",
                                "type": 159,
                                "typeName": "Box<T::PalletsOrigin>",
                                "docs": []
                            },
                            {
                                "name": "call",
                                "type": 93,
                                "typeName": "Box<<T as Config>::RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Dispatches a function call with a provided origin.",
                            "",
                            "The dispatch origin for this call must be _Root_.",
                            "",
                            "## Complexity",
                            "- O(1)."
                        ]
                    },
                    {
                        "name": "force_batch",
                        "fields": [
                            {
                                "name": "calls",
                                "type": 191,
                                "typeName": "Vec<<T as Config>::RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Send a batch of dispatch calls.",
                            "Unlike `batch`, it allows errors and won't interrupt.",
                            "",
                            "May be called from any origin except `None`.",
                            "",
                            "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                            "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                            "",
                            "If origin is root then the calls are dispatch without checking origin filter. (This",
                            "includes bypassing `frame_system::Config::BaseCallFilter`).",
                            "",
                            "## Complexity",
                            "- O(C) where C is the number of calls to be batched."
                        ]
                    },
                    {
                        "name": "with_weight",
                        "fields": [
                            {
                                "name": "call",
                                "type": 93,
                                "typeName": "Box<<T as Config>::RuntimeCall>",
                                "docs": []
                            },
                            {
                                "name": "weight",
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "Dispatch a function call with a specified weight.",
                            "",
                            "This function does not check the weight of the call, and instead allows the",
                            "Root origin to specify the weight of the call.",
                            "",
                            "The dispatch origin for this call must be _Root_."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 191,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 93
            },
            "docs": []
        },
        {
            "id": 192,
            "path": [
                "pallet_proxy",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "proxy",
                        "fields": [
                            {
                                "name": "real",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "force_proxy_type",
                                "type": 193,
                                "typeName": "Option<T::ProxyType>",
                                "docs": []
                            },
                            {
                                "name": "call",
                                "type": 93,
                                "typeName": "Box<<T as Config>::RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Dispatch the given `call` from an account that the sender is authorised for through",
                            "`add_proxy`.",
                            "",
                            "The dispatch origin for this call must be _Signed_.",
                            "",
                            "Parameters:",
                            "- `real`: The account that the proxy will make a call on behalf of.",
                            "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                            "- `call`: The call to be made by the `real` account."
                        ]
                    },
                    {
                        "name": "add_proxy",
                        "fields": [
                            {
                                "name": "delegate",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "proxy_type",
                                "type": 194,
                                "typeName": "T::ProxyType",
                                "docs": []
                            },
                            {
                                "name": "delay",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Register a proxy account for the sender that is able to make calls on its behalf.",
                            "",
                            "The dispatch origin for this call must be _Signed_.",
                            "",
                            "Parameters:",
                            "- `proxy`: The account that the `caller` would like to make a proxy.",
                            "- `proxy_type`: The permissions allowed for this proxy account.",
                            "- `delay`: The announcement period required of the initial proxy. Will generally be",
                            "zero."
                        ]
                    },
                    {
                        "name": "remove_proxy",
                        "fields": [
                            {
                                "name": "delegate",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "proxy_type",
                                "type": 194,
                                "typeName": "T::ProxyType",
                                "docs": []
                            },
                            {
                                "name": "delay",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Unregister a proxy account for the sender.",
                            "",
                            "The dispatch origin for this call must be _Signed_.",
                            "",
                            "Parameters:",
                            "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                            "- `proxy_type`: The permissions currently enabled for the removed proxy account."
                        ]
                    },
                    {
                        "name": "remove_proxies",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "Unregister all proxy accounts for the sender.",
                            "",
                            "The dispatch origin for this call must be _Signed_.",
                            "",
                            "WARNING: This may be called on accounts created by `pure`, however if done, then",
                            "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
                        ]
                    },
                    {
                        "name": "create_pure",
                        "fields": [
                            {
                                "name": "proxy_type",
                                "type": 194,
                                "typeName": "T::ProxyType",
                                "docs": []
                            },
                            {
                                "name": "delay",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            },
                            {
                                "name": "index",
                                "type": 91,
                                "typeName": "u16",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                            "initialize it with a proxy of `proxy_type` for `origin` sender.",
                            "",
                            "Requires a `Signed` origin.",
                            "",
                            "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                            "new account. This will almost always be the most permissive `ProxyType` possible to",
                            "allow for maximum flexibility.",
                            "- `index`: A disambiguation index, in case this is called multiple times in the same",
                            "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                            "want to use `0`.",
                            "- `delay`: The announcement period required of the initial proxy. Will generally be",
                            "zero.",
                            "",
                            "Fails with `Duplicate` if this has already been called in this transaction, from the",
                            "same sender, with the same parameters.",
                            "",
                            "Fails if there are insufficient funds to pay for deposit."
                        ]
                    },
                    {
                        "name": "kill_pure",
                        "fields": [
                            {
                                "name": "spawner",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "proxy_type",
                                "type": 194,
                                "typeName": "T::ProxyType",
                                "docs": []
                            },
                            {
                                "name": "index",
                                "type": 91,
                                "typeName": "u16",
                                "docs": []
                            },
                            {
                                "name": "height",
                                "type": 59,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            },
                            {
                                "name": "ext_index",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "Removes a previously spawned pure proxy.",
                            "",
                            "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                            "inaccessible.",
                            "",
                            "Requires a `Signed` origin, and the sender account must have been created by a call to",
                            "`pure` with corresponding parameters.",
                            "",
                            "- `spawner`: The account that originally called `pure` to create this account.",
                            "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
                            "- `proxy_type`: The proxy type originally passed to `pure`.",
                            "- `height`: The height of the chain when the call to `pure` was processed.",
                            "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
                            "",
                            "Fails with `NoPermission` in case the caller is not a previously created pure",
                            "account whose `pure` call has corresponding parameters."
                        ]
                    },
                    {
                        "name": "announce",
                        "fields": [
                            {
                                "name": "real",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "call_hash",
                                "type": 13,
                                "typeName": "CallHashOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "Publish the hash of a proxy-call that will be made in the future.",
                            "",
                            "This must be called some number of blocks before the corresponding `proxy` is attempted",
                            "if the delay associated with the proxy relationship is greater than zero.",
                            "",
                            "No more than `MaxPending` announcements may be made at any one time.",
                            "",
                            "This will take a deposit of `AnnouncementDepositFactor` as well as",
                            "`AnnouncementDepositBase` if there are no other pending announcements.",
                            "",
                            "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                            "",
                            "Parameters:",
                            "- `real`: The account that the proxy will make a call on behalf of.",
                            "- `call_hash`: The hash of the call to be made by the `real` account."
                        ]
                    },
                    {
                        "name": "remove_announcement",
                        "fields": [
                            {
                                "name": "real",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "call_hash",
                                "type": 13,
                                "typeName": "CallHashOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "Remove a given announcement.",
                            "",
                            "May be called by a proxy account to remove a call they previously announced and return",
                            "the deposit.",
                            "",
                            "The dispatch origin for this call must be _Signed_.",
                            "",
                            "Parameters:",
                            "- `real`: The account that the proxy will make a call on behalf of.",
                            "- `call_hash`: The hash of the call to be made by the `real` account."
                        ]
                    },
                    {
                        "name": "reject_announcement",
                        "fields": [
                            {
                                "name": "delegate",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "call_hash",
                                "type": 13,
                                "typeName": "CallHashOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": [
                            "Remove the given announcement of a delegate.",
                            "",
                            "May be called by a target (proxied) account to remove a call that one of their delegates",
                            "(`delegate`) has announced they want to execute. The deposit is returned.",
                            "",
                            "The dispatch origin for this call must be _Signed_.",
                            "",
                            "Parameters:",
                            "- `delegate`: The account that previously announced the call.",
                            "- `call_hash`: The hash of the call to be made."
                        ]
                    },
                    {
                        "name": "proxy_announced",
                        "fields": [
                            {
                                "name": "delegate",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "real",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "force_proxy_type",
                                "type": 193,
                                "typeName": "Option<T::ProxyType>",
                                "docs": []
                            },
                            {
                                "name": "call",
                                "type": 93,
                                "typeName": "Box<<T as Config>::RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": [
                            "Dispatch the given `call` from an account that the sender is authorized for through",
                            "`add_proxy`.",
                            "",
                            "Removes any corresponding announcement(s).",
                            "",
                            "The dispatch origin for this call must be _Signed_.",
                            "",
                            "Parameters:",
                            "- `real`: The account that the proxy will make a call on behalf of.",
                            "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                            "- `call`: The call to be made by the `real` account."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 193,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 194
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 194,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 194,
            "path": [
                "polkadot_runtime",
                "ProxyType"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Any",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "NonTransfer",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Governance",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Staking",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "CancelProxy",
                        "fields": [],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "Auction",
                        "fields": [],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "NominationPools",
                        "fields": [],
                        "index": 8,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 195,
            "path": [
                "pallet_multisig",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "as_multi_threshold_1",
                        "fields": [
                            {
                                "name": "other_signatories",
                                "type": 116,
                                "typeName": "Vec<T::AccountId>",
                                "docs": []
                            },
                            {
                                "name": "call",
                                "type": 93,
                                "typeName": "Box<<T as Config>::RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Immediately dispatch a multi-signature call using a single approval from the caller.",
                            "",
                            "The dispatch origin for this call must be _Signed_.",
                            "",
                            "- `other_signatories`: The accounts (other than the sender) who are part of the",
                            "multi-signature, but do not participate in the approval process.",
                            "- `call`: The call to be executed.",
                            "",
                            "Result is equivalent to the dispatched result.",
                            "",
                            "## Complexity",
                            "O(Z + C) where Z is the length of the call and C its execution weight."
                        ]
                    },
                    {
                        "name": "as_multi",
                        "fields": [
                            {
                                "name": "threshold",
                                "type": 91,
                                "typeName": "u16",
                                "docs": []
                            },
                            {
                                "name": "other_signatories",
                                "type": 116,
                                "typeName": "Vec<T::AccountId>",
                                "docs": []
                            },
                            {
                                "name": "maybe_timepoint",
                                "type": 196,
                                "typeName": "Option<Timepoint<BlockNumberFor<T>>>",
                                "docs": []
                            },
                            {
                                "name": "call",
                                "type": 93,
                                "typeName": "Box<<T as Config>::RuntimeCall>",
                                "docs": []
                            },
                            {
                                "name": "max_weight",
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Register approval for a dispatch to be made from a deterministic composite account if",
                            "approved by a total of `threshold - 1` of `other_signatories`.",
                            "",
                            "If there are enough, then dispatch the call.",
                            "",
                            "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                            "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                            "is cancelled.",
                            "",
                            "The dispatch origin for this call must be _Signed_.",
                            "",
                            "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                            "- `other_signatories`: The accounts (other than the sender) who can approve this",
                            "dispatch. May not be empty.",
                            "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                            "not the first approval, then it must be `Some`, with the timepoint (block number and",
                            "transaction index) of the first approval transaction.",
                            "- `call`: The call to be executed.",
                            "",
                            "NOTE: Unless this is the final approval, you will generally want to use",
                            "`approve_as_multi` instead, since it only requires a hash of the call.",
                            "",
                            "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                            "on success, result is `Ok` and the result from the interior call, if it was executed,",
                            "may be found in the deposited `MultisigExecuted` event.",
                            "",
                            "## Complexity",
                            "- `O(S + Z + Call)`.",
                            "- Up to one balance-reserve or unreserve operation.",
                            "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                            "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                            "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                            "- One encode & hash, both of complexity `O(S)`.",
                            "- Up to one binary search and insert (`O(logS + S)`).",
                            "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                            "- One event.",
                            "- The weight of the `call`.",
                            "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                            "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                        ]
                    },
                    {
                        "name": "approve_as_multi",
                        "fields": [
                            {
                                "name": "threshold",
                                "type": 91,
                                "typeName": "u16",
                                "docs": []
                            },
                            {
                                "name": "other_signatories",
                                "type": 116,
                                "typeName": "Vec<T::AccountId>",
                                "docs": []
                            },
                            {
                                "name": "maybe_timepoint",
                                "type": 196,
                                "typeName": "Option<Timepoint<BlockNumberFor<T>>>",
                                "docs": []
                            },
                            {
                                "name": "call_hash",
                                "type": 1,
                                "typeName": "[u8; 32]",
                                "docs": []
                            },
                            {
                                "name": "max_weight",
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Register approval for a dispatch to be made from a deterministic composite account if",
                            "approved by a total of `threshold - 1` of `other_signatories`.",
                            "",
                            "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                            "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                            "is cancelled.",
                            "",
                            "The dispatch origin for this call must be _Signed_.",
                            "",
                            "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                            "- `other_signatories`: The accounts (other than the sender) who can approve this",
                            "dispatch. May not be empty.",
                            "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                            "not the first approval, then it must be `Some`, with the timepoint (block number and",
                            "transaction index) of the first approval transaction.",
                            "- `call_hash`: The hash of the call to be executed.",
                            "",
                            "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                            "",
                            "## Complexity",
                            "- `O(S)`.",
                            "- Up to one balance-reserve or unreserve operation.",
                            "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                            "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                            "- One encode & hash, both of complexity `O(S)`.",
                            "- Up to one binary search and insert (`O(logS + S)`).",
                            "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                            "- One event.",
                            "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                            "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                        ]
                    },
                    {
                        "name": "cancel_as_multi",
                        "fields": [
                            {
                                "name": "threshold",
                                "type": 91,
                                "typeName": "u16",
                                "docs": []
                            },
                            {
                                "name": "other_signatories",
                                "type": 116,
                                "typeName": "Vec<T::AccountId>",
                                "docs": []
                            },
                            {
                                "name": "timepoint",
                                "type": 197,
                                "typeName": "Timepoint<BlockNumberFor<T>>",
                                "docs": []
                            },
                            {
                                "name": "call_hash",
                                "type": 1,
                                "typeName": "[u8; 32]",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                            "for this operation will be unreserved on success.",
                            "",
                            "The dispatch origin for this call must be _Signed_.",
                            "",
                            "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                            "- `other_signatories`: The accounts (other than the sender) who can approve this",
                            "dispatch. May not be empty.",
                            "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
                            "transaction for this dispatch.",
                            "- `call_hash`: The hash of the call to be executed.",
                            "",
                            "## Complexity",
                            "- `O(S)`.",
                            "- Up to one balance-reserve or unreserve operation.",
                            "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                            "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                            "- One encode & hash, both of complexity `O(S)`.",
                            "- One event.",
                            "- I/O: 1 read `O(S)`, one remove.",
                            "- Storage: removes one item."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 196,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 197
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 197,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 197,
            "path": [
                "pallet_multisig",
                "Timepoint"
            ],
            "params": [
                {
                    "name": "BlockNumber",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "height",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                    },
                    {
                        "name": "index",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 198,
            "path": [
                "pallet_bounties",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                },
                {
                    "name": "I"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "propose_bounty",
                        "fields": [
                            {
                                "name": "value",
                                "type": 63,
                                "typeName": "BalanceOf<T, I>",
                                "docs": []
                            },
                            {
                                "name": "description",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Propose a new bounty.",
                            "",
                            "The dispatch origin for this call must be _Signed_.",
                            "",
                            "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                            "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,",
                            "or slashed when rejected.",
                            "",
                            "- `curator`: The curator account whom will manage this bounty.",
                            "- `fee`: The curator fee.",
                            "- `value`: The total payment amount of this bounty, curator fee included.",
                            "- `description`: The description of this bounty."
                        ]
                    },
                    {
                        "name": "approve_bounty",
                        "fields": [
                            {
                                "name": "bounty_id",
                                "type": 59,
                                "typeName": "BountyIndex",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Approve a bounty proposal. At a later time, the bounty will be funded and become active",
                            "and the original deposit will be returned.",
                            "",
                            "May only be called from `T::SpendOrigin`.",
                            "",
                            "## Complexity",
                            "- O(1)."
                        ]
                    },
                    {
                        "name": "propose_curator",
                        "fields": [
                            {
                                "name": "bounty_id",
                                "type": 59,
                                "typeName": "BountyIndex",
                                "docs": []
                            },
                            {
                                "name": "curator",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "fee",
                                "type": 63,
                                "typeName": "BalanceOf<T, I>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Propose a curator to a funded bounty.",
                            "",
                            "May only be called from `T::SpendOrigin`.",
                            "",
                            "## Complexity",
                            "- O(1)."
                        ]
                    },
                    {
                        "name": "unassign_curator",
                        "fields": [
                            {
                                "name": "bounty_id",
                                "type": 59,
                                "typeName": "BountyIndex",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Unassign curator from a bounty.",
                            "",
                            "This function can only be called by the `RejectOrigin` a signed origin.",
                            "",
                            "If this function is called by the `RejectOrigin`, we assume that the curator is",
                            "malicious or inactive. As a result, we will slash the curator when possible.",
                            "",
                            "If the origin is the curator, we take this as a sign they are unable to do their job and",
                            "they willingly give up. We could slash them, but for now we allow them to recover their",
                            "deposit and exit without issue. (We may want to change this if it is abused.)",
                            "",
                            "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows",
                            "anyone in the community to call out that a curator is not doing their due diligence, and",
                            "we should pick a new curator. In this case the curator should also be slashed.",
                            "",
                            "## Complexity",
                            "- O(1)."
                        ]
                    },
                    {
                        "name": "accept_curator",
                        "fields": [
                            {
                                "name": "bounty_id",
                                "type": 59,
                                "typeName": "BountyIndex",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Accept the curator role for a bounty.",
                            "A deposit will be reserved from curator and refund upon successful payout.",
                            "",
                            "May only be called from the curator.",
                            "",
                            "## Complexity",
                            "- O(1)."
                        ]
                    },
                    {
                        "name": "award_bounty",
                        "fields": [
                            {
                                "name": "bounty_id",
                                "type": 59,
                                "typeName": "BountyIndex",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds",
                            "after a delay.",
                            "",
                            "The dispatch origin for this call must be the curator of this bounty.",
                            "",
                            "- `bounty_id`: Bounty ID to award.",
                            "- `beneficiary`: The beneficiary account whom will receive the payout.",
                            "",
                            "## Complexity",
                            "- O(1)."
                        ]
                    },
                    {
                        "name": "claim_bounty",
                        "fields": [
                            {
                                "name": "bounty_id",
                                "type": 59,
                                "typeName": "BountyIndex",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "Claim the payout from an awarded bounty after payout delay.",
                            "",
                            "The dispatch origin for this call must be the beneficiary of this bounty.",
                            "",
                            "- `bounty_id`: Bounty ID to claim.",
                            "",
                            "## Complexity",
                            "- O(1)."
                        ]
                    },
                    {
                        "name": "close_bounty",
                        "fields": [
                            {
                                "name": "bounty_id",
                                "type": 59,
                                "typeName": "BountyIndex",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "Cancel a proposed or active bounty. All the funds will be sent to treasury and",
                            "the curator deposit will be unreserved if possible.",
                            "",
                            "Only `T::RejectOrigin` is able to cancel a bounty.",
                            "",
                            "- `bounty_id`: Bounty ID to cancel.",
                            "",
                            "## Complexity",
                            "- O(1)."
                        ]
                    },
                    {
                        "name": "extend_bounty_expiry",
                        "fields": [
                            {
                                "name": "bounty_id",
                                "type": 59,
                                "typeName": "BountyIndex",
                                "docs": []
                            },
                            {
                                "name": "remark",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": [
                            "Extend the expiry time of an active bounty.",
                            "",
                            "The dispatch origin for this call must be the curator of this bounty.",
                            "",
                            "- `bounty_id`: Bounty ID to extend.",
                            "- `remark`: additional information.",
                            "",
                            "## Complexity",
                            "- O(1)."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 199,
            "path": [
                "pallet_child_bounties",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "add_child_bounty",
                        "fields": [
                            {
                                "name": "parent_bounty_id",
                                "type": 59,
                                "typeName": "BountyIndex",
                                "docs": []
                            },
                            {
                                "name": "value",
                                "type": 63,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "description",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Add a new child-bounty.",
                            "",
                            "The dispatch origin for this call must be the curator of parent",
                            "bounty and the parent bounty must be in \"active\" state.",
                            "",
                            "Child-bounty gets added successfully & fund gets transferred from",
                            "parent bounty to child-bounty account, if parent bounty has enough",
                            "funds, else the call fails.",
                            "",
                            "Upper bound to maximum number of active  child bounties that can be",
                            "added are managed via runtime trait config",
                            "[`Config::MaxActiveChildBountyCount`].",
                            "",
                            "If the call is success, the status of child-bounty is updated to",
                            "\"Added\".",
                            "",
                            "- `parent_bounty_id`: Index of parent bounty for which child-bounty is being added.",
                            "- `value`: Value for executing the proposal.",
                            "- `description`: Text description for the child-bounty."
                        ]
                    },
                    {
                        "name": "propose_curator",
                        "fields": [
                            {
                                "name": "parent_bounty_id",
                                "type": 59,
                                "typeName": "BountyIndex",
                                "docs": []
                            },
                            {
                                "name": "child_bounty_id",
                                "type": 59,
                                "typeName": "BountyIndex",
                                "docs": []
                            },
                            {
                                "name": "curator",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "fee",
                                "type": 63,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Propose curator for funded child-bounty.",
                            "",
                            "The dispatch origin for this call must be curator of parent bounty.",
                            "",
                            "Parent bounty must be in active state, for this child-bounty call to",
                            "work.",
                            "",
                            "Child-bounty must be in \"Added\" state, for processing the call. And",
                            "state of child-bounty is moved to \"CuratorProposed\" on successful",
                            "call completion.",
                            "",
                            "- `parent_bounty_id`: Index of parent bounty.",
                            "- `child_bounty_id`: Index of child bounty.",
                            "- `curator`: Address of child-bounty curator.",
                            "- `fee`: payment fee to child-bounty curator for execution."
                        ]
                    },
                    {
                        "name": "accept_curator",
                        "fields": [
                            {
                                "name": "parent_bounty_id",
                                "type": 59,
                                "typeName": "BountyIndex",
                                "docs": []
                            },
                            {
                                "name": "child_bounty_id",
                                "type": 59,
                                "typeName": "BountyIndex",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Accept the curator role for the child-bounty.",
                            "",
                            "The dispatch origin for this call must be the curator of this",
                            "child-bounty.",
                            "",
                            "A deposit will be reserved from the curator and refund upon",
                            "successful payout or cancellation.",
                            "",
                            "Fee for curator is deducted from curator fee of parent bounty.",
                            "",
                            "Parent bounty must be in active state, for this child-bounty call to",
                            "work.",
                            "",
                            "Child-bounty must be in \"CuratorProposed\" state, for processing the",
                            "call. And state of child-bounty is moved to \"Active\" on successful",
                            "call completion.",
                            "",
                            "- `parent_bounty_id`: Index of parent bounty.",
                            "- `child_bounty_id`: Index of child bounty."
                        ]
                    },
                    {
                        "name": "unassign_curator",
                        "fields": [
                            {
                                "name": "parent_bounty_id",
                                "type": 59,
                                "typeName": "BountyIndex",
                                "docs": []
                            },
                            {
                                "name": "child_bounty_id",
                                "type": 59,
                                "typeName": "BountyIndex",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Unassign curator from a child-bounty.",
                            "",
                            "The dispatch origin for this call can be either `RejectOrigin`, or",
                            "the curator of the parent bounty, or any signed origin.",
                            "",
                            "For the origin other than T::RejectOrigin and the child-bounty",
                            "curator, parent bounty must be in active state, for this call to",
                            "work. We allow child-bounty curator and T::RejectOrigin to execute",
                            "this call irrespective of the parent bounty state.",
                            "",
                            "If this function is called by the `RejectOrigin` or the",
                            "parent bounty curator, we assume that the child-bounty curator is",
                            "malicious or inactive. As a result, child-bounty curator deposit is",
                            "slashed.",
                            "",
                            "If the origin is the child-bounty curator, we take this as a sign",
                            "that they are unable to do their job, and are willingly giving up.",
                            "We could slash the deposit, but for now we allow them to unreserve",
                            "their deposit and exit without issue. (We may want to change this if",
                            "it is abused.)",
                            "",
                            "Finally, the origin can be anyone iff the child-bounty curator is",
                            "\"inactive\". Expiry update due of parent bounty is used to estimate",
                            "inactive state of child-bounty curator.",
                            "",
                            "This allows anyone in the community to call out that a child-bounty",
                            "curator is not doing their due diligence, and we should pick a new",
                            "one. In this case the child-bounty curator deposit is slashed.",
                            "",
                            "State of child-bounty is moved to Added state on successful call",
                            "completion.",
                            "",
                            "- `parent_bounty_id`: Index of parent bounty.",
                            "- `child_bounty_id`: Index of child bounty."
                        ]
                    },
                    {
                        "name": "award_child_bounty",
                        "fields": [
                            {
                                "name": "parent_bounty_id",
                                "type": 59,
                                "typeName": "BountyIndex",
                                "docs": []
                            },
                            {
                                "name": "child_bounty_id",
                                "type": 59,
                                "typeName": "BountyIndex",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Award child-bounty to a beneficiary.",
                            "",
                            "The beneficiary will be able to claim the funds after a delay.",
                            "",
                            "The dispatch origin for this call must be the parent curator or",
                            "curator of this child-bounty.",
                            "",
                            "Parent bounty must be in active state, for this child-bounty call to",
                            "work.",
                            "",
                            "Child-bounty must be in active state, for processing the call. And",
                            "state of child-bounty is moved to \"PendingPayout\" on successful call",
                            "completion.",
                            "",
                            "- `parent_bounty_id`: Index of parent bounty.",
                            "- `child_bounty_id`: Index of child bounty.",
                            "- `beneficiary`: Beneficiary account."
                        ]
                    },
                    {
                        "name": "claim_child_bounty",
                        "fields": [
                            {
                                "name": "parent_bounty_id",
                                "type": 59,
                                "typeName": "BountyIndex",
                                "docs": []
                            },
                            {
                                "name": "child_bounty_id",
                                "type": 59,
                                "typeName": "BountyIndex",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "Claim the payout from an awarded child-bounty after payout delay.",
                            "",
                            "The dispatch origin for this call may be any signed origin.",
                            "",
                            "Call works independent of parent bounty state, No need for parent",
                            "bounty to be in active state.",
                            "",
                            "The Beneficiary is paid out with agreed bounty value. Curator fee is",
                            "paid & curator deposit is unreserved.",
                            "",
                            "Child-bounty must be in \"PendingPayout\" state, for processing the",
                            "call. And instance of child-bounty is removed from the state on",
                            "successful call completion.",
                            "",
                            "- `parent_bounty_id`: Index of parent bounty.",
                            "- `child_bounty_id`: Index of child bounty."
                        ]
                    },
                    {
                        "name": "close_child_bounty",
                        "fields": [
                            {
                                "name": "parent_bounty_id",
                                "type": 59,
                                "typeName": "BountyIndex",
                                "docs": []
                            },
                            {
                                "name": "child_bounty_id",
                                "type": 59,
                                "typeName": "BountyIndex",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "Cancel a proposed or active child-bounty. Child-bounty account funds",
                            "are transferred to parent bounty account. The child-bounty curator",
                            "deposit may be unreserved if possible.",
                            "",
                            "The dispatch origin for this call must be either parent curator or",
                            "`T::RejectOrigin`.",
                            "",
                            "If the state of child-bounty is `Active`, curator deposit is",
                            "unreserved.",
                            "",
                            "If the state of child-bounty is `PendingPayout`, call fails &",
                            "returns `PendingPayout` error.",
                            "",
                            "For the origin other than T::RejectOrigin, parent bounty must be in",
                            "active state, for this child-bounty call to work. For origin",
                            "T::RejectOrigin execution is forced.",
                            "",
                            "Instance of child-bounty is removed from the state on successful",
                            "call completion.",
                            "",
                            "- `parent_bounty_id`: Index of parent bounty.",
                            "- `child_bounty_id`: Index of child bounty."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 200,
            "path": [
                "pallet_election_provider_multi_phase",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "submit_unsigned",
                        "fields": [
                            {
                                "name": "raw_solution",
                                "type": 201,
                                "typeName": "Box<RawSolution<SolutionOf<T::MinerConfig>>>",
                                "docs": []
                            },
                            {
                                "name": "witness",
                                "type": 254,
                                "typeName": "SolutionOrSnapshotSize",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Submit a solution for the unsigned phase.",
                            "",
                            "The dispatch origin fo this call must be __none__.",
                            "",
                            "This submission is checked on the fly. Moreover, this unsigned solution is only",
                            "validated when submitted to the pool from the **local** node. Effectively, this means",
                            "that only active validators can submit this transaction when authoring a block (similar",
                            "to an inherent).",
                            "",
                            "To prevent any incorrect solution (and thus wasted time/weight), this transaction will",
                            "panic if the solution submitted by the validator is invalid in any way, effectively",
                            "putting their authoring reward at risk.",
                            "",
                            "No deposit or reward is associated with this submission."
                        ]
                    },
                    {
                        "name": "set_minimum_untrusted_score",
                        "fields": [
                            {
                                "name": "maybe_next_score",
                                "type": 255,
                                "typeName": "Option<ElectionScore>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Set a new value for `MinimumUntrustedScore`.",
                            "",
                            "Dispatch origin must be aligned with `T::ForceOrigin`.",
                            "",
                            "This check can be turned off by setting the value to `None`."
                        ]
                    },
                    {
                        "name": "set_emergency_election_result",
                        "fields": [
                            {
                                "name": "supports",
                                "type": 256,
                                "typeName": "Supports<T::AccountId>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Set a solution in the queue, to be handed out to the client of this pallet in the next",
                            "call to `ElectionProvider::elect`.",
                            "",
                            "This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.",
                            "",
                            "The solution is not checked for any feasibility and is assumed to be trustworthy, as any",
                            "feasibility check itself can in principle cause the election process to fail (due to",
                            "memory/weight constrains)."
                        ]
                    },
                    {
                        "name": "submit",
                        "fields": [
                            {
                                "name": "raw_solution",
                                "type": 201,
                                "typeName": "Box<RawSolution<SolutionOf<T::MinerConfig>>>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Submit a solution for the signed phase.",
                            "",
                            "The dispatch origin fo this call must be __signed__.",
                            "",
                            "The solution is potentially queued, based on the claimed score and processed at the end",
                            "of the signed phase.",
                            "",
                            "A deposit is reserved and recorded for the solution. Based on the outcome, the solution",
                            "might be rewarded, slashed, or get all or a part of the deposit back."
                        ]
                    },
                    {
                        "name": "governance_fallback",
                        "fields": [
                            {
                                "name": "maybe_max_voters",
                                "type": 152,
                                "typeName": "Option<u32>",
                                "docs": []
                            },
                            {
                                "name": "maybe_max_targets",
                                "type": 152,
                                "typeName": "Option<u32>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Trigger the governance fallback.",
                            "",
                            "This can only be called when [`Phase::Emergency`] is enabled, as an alternative to",
                            "calling [`Call::set_emergency_election_result`]."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 201,
            "path": [
                "pallet_election_provider_multi_phase",
                "RawSolution"
            ],
            "params": [
                {
                    "name": "S",
                    "type": 202
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "solution",
                        "type": 202,
                        "typeName": "S",
                        "docs": []
                    },
                    {
                        "name": "score",
                        "type": 253,
                        "typeName": "ElectionScore",
                        "docs": []
                    },
                    {
                        "name": "round",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 202,
            "path": [
                "polkadot_runtime",
                "NposCompactSolution16"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "votes1",
                        "type": 203,
                        "docs": []
                    },
                    {
                        "name": "votes2",
                        "type": 206,
                        "docs": []
                    },
                    {
                        "name": "votes3",
                        "type": 211,
                        "docs": []
                    },
                    {
                        "name": "votes4",
                        "type": 214,
                        "docs": []
                    },
                    {
                        "name": "votes5",
                        "type": 217,
                        "docs": []
                    },
                    {
                        "name": "votes6",
                        "type": 220,
                        "docs": []
                    },
                    {
                        "name": "votes7",
                        "type": 223,
                        "docs": []
                    },
                    {
                        "name": "votes8",
                        "type": 226,
                        "docs": []
                    },
                    {
                        "name": "votes9",
                        "type": 229,
                        "docs": []
                    },
                    {
                        "name": "votes10",
                        "type": 232,
                        "docs": []
                    },
                    {
                        "name": "votes11",
                        "type": 235,
                        "docs": []
                    },
                    {
                        "name": "votes12",
                        "type": 238,
                        "docs": []
                    },
                    {
                        "name": "votes13",
                        "type": 241,
                        "docs": []
                    },
                    {
                        "name": "votes14",
                        "type": 244,
                        "docs": []
                    },
                    {
                        "name": "votes15",
                        "type": 247,
                        "docs": []
                    },
                    {
                        "name": "votes16",
                        "type": 250,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 203,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 204
            },
            "docs": []
        },
        {
            "id": 204,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    59,
                    205
                ]
            },
            "docs": []
        },
        {
            "id": 205,
            "path": [],
            "params": [],
            "def": {
                "tag": "compact",
                "value": 91
            },
            "docs": []
        },
        {
            "id": 206,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 207
            },
            "docs": []
        },
        {
            "id": 207,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    59,
                    208,
                    205
                ]
            },
            "docs": []
        },
        {
            "id": 208,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    205,
                    209
                ]
            },
            "docs": []
        },
        {
            "id": 209,
            "path": [],
            "params": [],
            "def": {
                "tag": "compact",
                "value": 210
            },
            "docs": []
        },
        {
            "id": 210,
            "path": [
                "sp_arithmetic",
                "per_things",
                "PerU16"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 91,
                        "typeName": "u16",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 211,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 212
            },
            "docs": []
        },
        {
            "id": 212,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    59,
                    213,
                    205
                ]
            },
            "docs": []
        },
        {
            "id": 213,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 2,
                    "type": 208
                }
            },
            "docs": []
        },
        {
            "id": 214,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 215
            },
            "docs": []
        },
        {
            "id": 215,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    59,
                    216,
                    205
                ]
            },
            "docs": []
        },
        {
            "id": 216,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 3,
                    "type": 208
                }
            },
            "docs": []
        },
        {
            "id": 217,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 218
            },
            "docs": []
        },
        {
            "id": 218,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    59,
                    219,
                    205
                ]
            },
            "docs": []
        },
        {
            "id": 219,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 4,
                    "type": 208
                }
            },
            "docs": []
        },
        {
            "id": 220,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 221
            },
            "docs": []
        },
        {
            "id": 221,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    59,
                    222,
                    205
                ]
            },
            "docs": []
        },
        {
            "id": 222,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 5,
                    "type": 208
                }
            },
            "docs": []
        },
        {
            "id": 223,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 224
            },
            "docs": []
        },
        {
            "id": 224,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    59,
                    225,
                    205
                ]
            },
            "docs": []
        },
        {
            "id": 225,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 6,
                    "type": 208
                }
            },
            "docs": []
        },
        {
            "id": 226,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 227
            },
            "docs": []
        },
        {
            "id": 227,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    59,
                    228,
                    205
                ]
            },
            "docs": []
        },
        {
            "id": 228,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 7,
                    "type": 208
                }
            },
            "docs": []
        },
        {
            "id": 229,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 230
            },
            "docs": []
        },
        {
            "id": 230,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    59,
                    231,
                    205
                ]
            },
            "docs": []
        },
        {
            "id": 231,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 8,
                    "type": 208
                }
            },
            "docs": []
        },
        {
            "id": 232,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 233
            },
            "docs": []
        },
        {
            "id": 233,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    59,
                    234,
                    205
                ]
            },
            "docs": []
        },
        {
            "id": 234,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 9,
                    "type": 208
                }
            },
            "docs": []
        },
        {
            "id": 235,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 236
            },
            "docs": []
        },
        {
            "id": 236,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    59,
                    237,
                    205
                ]
            },
            "docs": []
        },
        {
            "id": 237,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 10,
                    "type": 208
                }
            },
            "docs": []
        },
        {
            "id": 238,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 239
            },
            "docs": []
        },
        {
            "id": 239,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    59,
                    240,
                    205
                ]
            },
            "docs": []
        },
        {
            "id": 240,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 11,
                    "type": 208
                }
            },
            "docs": []
        },
        {
            "id": 241,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 242
            },
            "docs": []
        },
        {
            "id": 242,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    59,
                    243,
                    205
                ]
            },
            "docs": []
        },
        {
            "id": 243,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 12,
                    "type": 208
                }
            },
            "docs": []
        },
        {
            "id": 244,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 245
            },
            "docs": []
        },
        {
            "id": 245,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    59,
                    246,
                    205
                ]
            },
            "docs": []
        },
        {
            "id": 246,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 13,
                    "type": 208
                }
            },
            "docs": []
        },
        {
            "id": 247,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 248
            },
            "docs": []
        },
        {
            "id": 248,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    59,
                    249,
                    205
                ]
            },
            "docs": []
        },
        {
            "id": 249,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 14,
                    "type": 208
                }
            },
            "docs": []
        },
        {
            "id": 250,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 251
            },
            "docs": []
        },
        {
            "id": 251,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    59,
                    252,
                    205
                ]
            },
            "docs": []
        },
        {
            "id": 252,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 15,
                    "type": 208
                }
            },
            "docs": []
        },
        {
            "id": 253,
            "path": [
                "sp_npos_elections",
                "ElectionScore"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "minimal_stake",
                        "type": 6,
                        "typeName": "ExtendedBalance",
                        "docs": []
                    },
                    {
                        "name": "sum_stake",
                        "type": 6,
                        "typeName": "ExtendedBalance",
                        "docs": []
                    },
                    {
                        "name": "sum_stake_squared",
                        "type": 6,
                        "typeName": "ExtendedBalance",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 254,
            "path": [
                "pallet_election_provider_multi_phase",
                "SolutionOrSnapshotSize"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "voters",
                        "type": 59,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "targets",
                        "type": 59,
                        "typeName": "u32",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 255,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 253
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 253,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 256,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 257
            },
            "docs": []
        },
        {
            "id": 257,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    0,
                    258
                ]
            },
            "docs": []
        },
        {
            "id": 258,
            "path": [
                "sp_npos_elections",
                "Support"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "total",
                        "type": 6,
                        "typeName": "ExtendedBalance",
                        "docs": []
                    },
                    {
                        "name": "voters",
                        "type": 259,
                        "typeName": "Vec<(AccountId, ExtendedBalance)>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 259,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 260
            },
            "docs": []
        },
        {
            "id": 260,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    0,
                    6
                ]
            },
            "docs": []
        },
        {
            "id": 261,
            "path": [
                "pallet_bags_list",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                },
                {
                    "name": "I"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "rebag",
                        "fields": [
                            {
                                "name": "dislocated",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Declare that some `dislocated` account has, through rewards or penalties, sufficiently",
                            "changed its score that it should properly fall into a different bag than its current",
                            "one.",
                            "",
                            "Anyone can call this function about any potentially dislocated account.",
                            "",
                            "Will always update the stored score of `dislocated` to the correct score, based on",
                            "`ScoreProvider`.",
                            "",
                            "If `dislocated` does not exists, it returns an error."
                        ]
                    },
                    {
                        "name": "put_in_front_of",
                        "fields": [
                            {
                                "name": "lighter",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Move the caller's Id directly in front of `lighter`.",
                            "",
                            "The dispatch origin for this call must be _Signed_ and can only be called by the Id of",
                            "the account going in front of `lighter`. Fee is payed by the origin under all",
                            "circumstances.",
                            "",
                            "Only works if:",
                            "",
                            "- both nodes are within the same bag,",
                            "- and `origin` has a greater `Score` than `lighter`."
                        ]
                    },
                    {
                        "name": "put_in_front_of_other",
                        "fields": [
                            {
                                "name": "heavier",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "lighter",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Same as [`Pallet::put_in_front_of`], but it can be called by anyone.",
                            "",
                            "Fee is paid by the origin under all circumstances."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 262,
            "path": [
                "pallet_nomination_pools",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "join",
                        "fields": [
                            {
                                "name": "amount",
                                "type": 63,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Stake funds with a pool. The amount to bond is transferred from the member to the",
                            "pools account and immediately increases the pools bond.",
                            "",
                            "# Note",
                            "",
                            "* An account can only be a member of a single pool.",
                            "* An account cannot join the same pool multiple times.",
                            "* This call will *not* dust the member account, so the member must have at least",
                            "  `existential deposit + amount` in their account.",
                            "* Only a pool with [`PoolState::Open`] can be joined"
                        ]
                    },
                    {
                        "name": "bond_extra",
                        "fields": [
                            {
                                "name": "extra",
                                "type": 263,
                                "typeName": "BondExtra<BalanceOf<T>>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Bond `extra` more funds from `origin` into the pool to which they already belong.",
                            "",
                            "Additional funds can come from either the free balance of the account, of from the",
                            "accumulated rewards, see [`BondExtra`].",
                            "",
                            "Bonding extra funds implies an automatic payout of all pending rewards as well.",
                            "See `bond_extra_other` to bond pending rewards of `other` members."
                        ]
                    },
                    {
                        "name": "claim_payout",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "A bonded member can use this to claim their payout based on the rewards that the pool",
                            "has accumulated since their last claimed payout (OR since joining if this is their first",
                            "time claiming rewards). The payout will be transferred to the member's account.",
                            "",
                            "The member will earn rewards pro rata based on the members stake vs the sum of the",
                            "members in the pools stake. Rewards do not \"expire\".",
                            "",
                            "See `claim_payout_other` to claim rewards on behalf of some `other` pool member."
                        ]
                    },
                    {
                        "name": "unbond",
                        "fields": [
                            {
                                "name": "member_account",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "unbonding_points",
                                "type": 63,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Unbond up to `unbonding_points` of the `member_account`'s funds from the pool. It",
                            "implicitly collects the rewards one last time, since not doing so would mean some",
                            "rewards would be forfeited.",
                            "",
                            "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any",
                            "account).",
                            "",
                            "# Conditions for a permissionless dispatch.",
                            "",
                            "* The pool is blocked and the caller is either the root or bouncer. This is refereed to",
                            "  as a kick.",
                            "* The pool is destroying and the member is not the depositor.",
                            "* The pool is destroying, the member is the depositor and no other members are in the",
                            "  pool.",
                            "",
                            "## Conditions for permissioned dispatch (i.e. the caller is also the",
                            "`member_account`):",
                            "",
                            "* The caller is not the depositor.",
                            "* The caller is the depositor, the pool is destroying and no other members are in the",
                            "  pool.",
                            "",
                            "# Note",
                            "",
                            "If there are too many unlocking chunks to unbond with the pool account,",
                            "[`Call::pool_withdraw_unbonded`] can be called to try and minimize unlocking chunks.",
                            "The [`StakingInterface::unbond`] will implicitly call [`Call::pool_withdraw_unbonded`]",
                            "to try to free chunks if necessary (ie. if unbound was called and no unlocking chunks",
                            "are available). However, it may not be possible to release the current unlocking chunks,",
                            "in which case, the result of this call will likely be the `NoMoreChunks` error from the",
                            "staking system."
                        ]
                    },
                    {
                        "name": "pool_withdraw_unbonded",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "num_slashing_spans",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Call `withdraw_unbonded` for the pools account. This call can be made by any account.",
                            "",
                            "This is useful if there are too many unlocking chunks to call `unbond`, and some",
                            "can be cleared by withdrawing. In the case there are too many unlocking chunks, the user",
                            "would probably see an error like `NoMoreChunks` emitted from the staking system when",
                            "they attempt to unbond."
                        ]
                    },
                    {
                        "name": "withdraw_unbonded",
                        "fields": [
                            {
                                "name": "member_account",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "num_slashing_spans",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "Withdraw unbonded funds from `member_account`. If no bonded funds can be unbonded, an",
                            "error is returned.",
                            "",
                            "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any",
                            "account).",
                            "",
                            "# Conditions for a permissionless dispatch",
                            "",
                            "* The pool is in destroy mode and the target is not the depositor.",
                            "* The target is the depositor and they are the only member in the sub pools.",
                            "* The pool is blocked and the caller is either the root or bouncer.",
                            "",
                            "# Conditions for permissioned dispatch",
                            "",
                            "* The caller is the target and they are not the depositor.",
                            "",
                            "# Note",
                            "",
                            "- If the target is the depositor, the pool will be destroyed.",
                            "- If the pool has any pending slash, we also try to slash the member before letting them",
                            "withdraw. This calculation adds some weight overhead and is only defensive. In reality,",
                            "pool slashes must have been already applied via permissionless [`Call::apply_slash`]."
                        ]
                    },
                    {
                        "name": "create",
                        "fields": [
                            {
                                "name": "amount",
                                "type": 63,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "root",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "nominator",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "bouncer",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "Create a new delegation pool.",
                            "",
                            "# Arguments",
                            "",
                            "* `amount` - The amount of funds to delegate to the pool. This also acts of a sort of",
                            "  deposit since the pools creator cannot fully unbond funds until the pool is being",
                            "  destroyed.",
                            "* `index` - A disambiguation index for creating the account. Likely only useful when",
                            "  creating multiple pools in the same extrinsic.",
                            "* `root` - The account to set as [`PoolRoles::root`].",
                            "* `nominator` - The account to set as the [`PoolRoles::nominator`].",
                            "* `bouncer` - The account to set as the [`PoolRoles::bouncer`].",
                            "",
                            "# Note",
                            "",
                            "In addition to `amount`, the caller will transfer the existential deposit; so the caller",
                            "needs at have at least `amount + existential_deposit` transferable."
                        ]
                    },
                    {
                        "name": "create_with_pool_id",
                        "fields": [
                            {
                                "name": "amount",
                                "type": 63,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "root",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "nominator",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "bouncer",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "Create a new delegation pool with a previously used pool id",
                            "",
                            "# Arguments",
                            "",
                            "same as `create` with the inclusion of",
                            "* `pool_id` - `A valid PoolId."
                        ]
                    },
                    {
                        "name": "nominate",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "validators",
                                "type": 116,
                                "typeName": "Vec<T::AccountId>",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": [
                            "Nominate on behalf of the pool.",
                            "",
                            "The dispatch origin of this call must be signed by the pool nominator or the pool",
                            "root role.",
                            "",
                            "This directly forward the call to the staking pallet, on behalf of the pool bonded",
                            "account.",
                            "",
                            "# Note",
                            "",
                            "In addition to a `root` or `nominator` role of `origin`, pool's depositor needs to have",
                            "at least `depositor_min_bond` in the pool to start nominating."
                        ]
                    },
                    {
                        "name": "set_state",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "state",
                                "type": 264,
                                "typeName": "PoolState",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": [
                            "Set a new state for the pool.",
                            "",
                            "If a pool is already in the `Destroying` state, then under no condition can its state",
                            "change again.",
                            "",
                            "The dispatch origin of this call must be either:",
                            "",
                            "1. signed by the bouncer, or the root role of the pool,",
                            "2. if the pool conditions to be open are NOT met (as described by `ok_to_be_open`), and",
                            "   then the state of the pool can be permissionlessly changed to `Destroying`."
                        ]
                    },
                    {
                        "name": "set_metadata",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "metadata",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            }
                        ],
                        "index": 10,
                        "docs": [
                            "Set a new metadata for the pool.",
                            "",
                            "The dispatch origin of this call must be signed by the bouncer, or the root role of the",
                            "pool."
                        ]
                    },
                    {
                        "name": "set_configs",
                        "fields": [
                            {
                                "name": "min_join_bond",
                                "type": 265,
                                "typeName": "ConfigOp<BalanceOf<T>>",
                                "docs": []
                            },
                            {
                                "name": "min_create_bond",
                                "type": 265,
                                "typeName": "ConfigOp<BalanceOf<T>>",
                                "docs": []
                            },
                            {
                                "name": "max_pools",
                                "type": 266,
                                "typeName": "ConfigOp<u32>",
                                "docs": []
                            },
                            {
                                "name": "max_members",
                                "type": 266,
                                "typeName": "ConfigOp<u32>",
                                "docs": []
                            },
                            {
                                "name": "max_members_per_pool",
                                "type": 266,
                                "typeName": "ConfigOp<u32>",
                                "docs": []
                            },
                            {
                                "name": "global_max_commission",
                                "type": 267,
                                "typeName": "ConfigOp<Perbill>",
                                "docs": []
                            }
                        ],
                        "index": 11,
                        "docs": [
                            "Update configurations for the nomination pools. The origin for this call must be",
                            "[`Config::AdminOrigin`].",
                            "",
                            "# Arguments",
                            "",
                            "* `min_join_bond` - Set [`MinJoinBond`].",
                            "* `min_create_bond` - Set [`MinCreateBond`].",
                            "* `max_pools` - Set [`MaxPools`].",
                            "* `max_members` - Set [`MaxPoolMembers`].",
                            "* `max_members_per_pool` - Set [`MaxPoolMembersPerPool`].",
                            "* `global_max_commission` - Set [`GlobalMaxCommission`]."
                        ]
                    },
                    {
                        "name": "update_roles",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "new_root",
                                "type": 268,
                                "typeName": "ConfigOp<T::AccountId>",
                                "docs": []
                            },
                            {
                                "name": "new_nominator",
                                "type": 268,
                                "typeName": "ConfigOp<T::AccountId>",
                                "docs": []
                            },
                            {
                                "name": "new_bouncer",
                                "type": 268,
                                "typeName": "ConfigOp<T::AccountId>",
                                "docs": []
                            }
                        ],
                        "index": 12,
                        "docs": [
                            "Update the roles of the pool.",
                            "",
                            "The root is the only entity that can change any of the roles, including itself,",
                            "excluding the depositor, who can never change.",
                            "",
                            "It emits an event, notifying UIs of the role change. This event is quite relevant to",
                            "most pool members and they should be informed of changes to pool roles."
                        ]
                    },
                    {
                        "name": "chill",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            }
                        ],
                        "index": 13,
                        "docs": [
                            "Chill on behalf of the pool.",
                            "",
                            "The dispatch origin of this call can be signed by the pool nominator or the pool",
                            "root role, same as [`Pallet::nominate`].",
                            "",
                            "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any",
                            "account).",
                            "",
                            "# Conditions for a permissionless dispatch:",
                            "* When pool depositor has less than `MinNominatorBond` staked, otherwise  pool members",
                            "  are unable to unbond.",
                            "",
                            "# Conditions for permissioned dispatch:",
                            "* The caller has a nominator or root role of the pool.",
                            "This directly forward the call to the staking pallet, on behalf of the pool bonded",
                            "account."
                        ]
                    },
                    {
                        "name": "bond_extra_other",
                        "fields": [
                            {
                                "name": "member",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            },
                            {
                                "name": "extra",
                                "type": 263,
                                "typeName": "BondExtra<BalanceOf<T>>",
                                "docs": []
                            }
                        ],
                        "index": 14,
                        "docs": [
                            "`origin` bonds funds from `extra` for some pool member `member` into their respective",
                            "pools.",
                            "",
                            "`origin` can bond extra funds from free balance or pending rewards when `origin ==",
                            "other`.",
                            "",
                            "In the case of `origin != other`, `origin` can only bond extra pending rewards of",
                            "`other` members assuming set_claim_permission for the given member is",
                            "`PermissionlessCompound` or `PermissionlessAll`."
                        ]
                    },
                    {
                        "name": "set_claim_permission",
                        "fields": [
                            {
                                "name": "permission",
                                "type": 269,
                                "typeName": "ClaimPermission",
                                "docs": []
                            }
                        ],
                        "index": 15,
                        "docs": [
                            "Allows a pool member to set a claim permission to allow or disallow permissionless",
                            "bonding and withdrawing.",
                            "",
                            "# Arguments",
                            "",
                            "* `origin` - Member of a pool.",
                            "* `permission` - The permission to be applied."
                        ]
                    },
                    {
                        "name": "claim_payout_other",
                        "fields": [
                            {
                                "name": "other",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 16,
                        "docs": [
                            "`origin` can claim payouts on some pool member `other`'s behalf.",
                            "",
                            "Pool member `other` must have a `PermissionlessWithdraw` or `PermissionlessAll` claim",
                            "permission for this call to be successful."
                        ]
                    },
                    {
                        "name": "set_commission",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "new_commission",
                                "type": 270,
                                "typeName": "Option<(Perbill, T::AccountId)>",
                                "docs": []
                            }
                        ],
                        "index": 17,
                        "docs": [
                            "Set the commission of a pool.",
                            "Both a commission percentage and a commission payee must be provided in the `current`",
                            "tuple. Where a `current` of `None` is provided, any current commission will be removed.",
                            "",
                            "- If a `None` is supplied to `new_commission`, existing commission will be removed."
                        ]
                    },
                    {
                        "name": "set_commission_max",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "max_commission",
                                "type": 43,
                                "typeName": "Perbill",
                                "docs": []
                            }
                        ],
                        "index": 18,
                        "docs": [
                            "Set the maximum commission of a pool.",
                            "",
                            "- Initial max can be set to any `Perbill`, and only smaller values thereafter.",
                            "- Current commission will be lowered in the event it is higher than a new max",
                            "  commission."
                        ]
                    },
                    {
                        "name": "set_commission_change_rate",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "change_rate",
                                "type": 272,
                                "typeName": "CommissionChangeRate<BlockNumberFor<T>>",
                                "docs": []
                            }
                        ],
                        "index": 19,
                        "docs": [
                            "Set the commission change rate for a pool.",
                            "",
                            "Initial change rate is not bounded, whereas subsequent updates can only be more",
                            "restrictive than the current."
                        ]
                    },
                    {
                        "name": "claim_commission",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            }
                        ],
                        "index": 20,
                        "docs": [
                            "Claim pending commission.",
                            "",
                            "The dispatch origin of this call must be signed by the `root` role of the pool. Pending",
                            "commission is paid out and added to total claimed commission`. Total pending commission",
                            "is reset to zero. the current."
                        ]
                    },
                    {
                        "name": "adjust_pool_deposit",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            }
                        ],
                        "index": 21,
                        "docs": [
                            "Top up the deficit or withdraw the excess ED from the pool.",
                            "",
                            "When a pool is created, the pool depositor transfers ED to the reward account of the",
                            "pool. ED is subject to change and over time, the deposit in the reward account may be",
                            "insufficient to cover the ED deficit of the pool or vice-versa where there is excess",
                            "deposit to the pool. This call allows anyone to adjust the ED deposit of the",
                            "pool by either topping up the deficit or claiming the excess."
                        ]
                    },
                    {
                        "name": "set_commission_claim_permission",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "permission",
                                "type": 273,
                                "typeName": "Option<CommissionClaimPermission<T::AccountId>>",
                                "docs": []
                            }
                        ],
                        "index": 22,
                        "docs": [
                            "Set or remove a pool's commission claim permission.",
                            "",
                            "Determines who can claim the pool's pending commission. Only the `Root` role of the pool",
                            "is able to configure commission claim permissions."
                        ]
                    },
                    {
                        "name": "apply_slash",
                        "fields": [
                            {
                                "name": "member_account",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 23,
                        "docs": [
                            "Apply a pending slash on a member.",
                            "",
                            "Fails unless [`crate::pallet::Config::StakeAdapter`] is of strategy type:",
                            "[`adapter::StakeStrategyType::Delegate`].",
                            "",
                            "This call can be dispatched permissionlessly (i.e. by any account). If the member has",
                            "slash to be applied, caller may be rewarded with the part of the slash."
                        ]
                    },
                    {
                        "name": "migrate_delegation",
                        "fields": [
                            {
                                "name": "member_account",
                                "type": 113,
                                "typeName": "AccountIdLookupOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 24,
                        "docs": [
                            "Migrates delegated funds from the pool account to the `member_account`.",
                            "",
                            "Fails unless [`crate::pallet::Config::StakeAdapter`] is of strategy type:",
                            "[`adapter::StakeStrategyType::Delegate`].",
                            "",
                            "This is a permission-less call and refunds any fee if claim is successful.",
                            "",
                            "If the pool has migrated to delegation based staking, the staked tokens of pool members",
                            "can be moved and held in their own account. See [`adapter::DelegateStake`]"
                        ]
                    },
                    {
                        "name": "migrate_pool_to_delegate_stake",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            }
                        ],
                        "index": 25,
                        "docs": [
                            "Migrate pool from [`adapter::StakeStrategyType::Transfer`] to",
                            "[`adapter::StakeStrategyType::Delegate`].",
                            "",
                            "Fails unless [`crate::pallet::Config::StakeAdapter`] is of strategy type:",
                            "[`adapter::StakeStrategyType::Delegate`].",
                            "",
                            "This call can be dispatched permissionlessly, and refunds any fee if successful.",
                            "",
                            "If the pool has already migrated to delegation based staking, this call will fail."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 263,
            "path": [
                "pallet_nomination_pools",
                "BondExtra"
            ],
            "params": [
                {
                    "name": "Balance",
                    "type": 6
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "FreeBalance",
                        "fields": [
                            {
                                "type": 6,
                                "typeName": "Balance",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Rewards",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 264,
            "path": [
                "pallet_nomination_pools",
                "PoolState"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Open",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Blocked",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Destroying",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 265,
            "path": [
                "pallet_nomination_pools",
                "ConfigOp"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 6
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Noop",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Set",
                        "fields": [
                            {
                                "type": 6,
                                "typeName": "T",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Remove",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 266,
            "path": [
                "pallet_nomination_pools",
                "ConfigOp"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 4
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Noop",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Set",
                        "fields": [
                            {
                                "type": 4,
                                "typeName": "T",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Remove",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 267,
            "path": [
                "pallet_nomination_pools",
                "ConfigOp"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 43
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Noop",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Set",
                        "fields": [
                            {
                                "type": 43,
                                "typeName": "T",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Remove",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 268,
            "path": [
                "pallet_nomination_pools",
                "ConfigOp"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 0
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Noop",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Set",
                        "fields": [
                            {
                                "type": 0,
                                "typeName": "T",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Remove",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 269,
            "path": [
                "pallet_nomination_pools",
                "ClaimPermission"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Permissioned",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "PermissionlessCompound",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "PermissionlessWithdraw",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "PermissionlessAll",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 270,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 271
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 271,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 271,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    43,
                    0
                ]
            },
            "docs": []
        },
        {
            "id": 272,
            "path": [
                "pallet_nomination_pools",
                "CommissionChangeRate"
            ],
            "params": [
                {
                    "name": "BlockNumber",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "max_increase",
                        "type": 43,
                        "typeName": "Perbill",
                        "docs": []
                    },
                    {
                        "name": "min_delay",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 273,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 274
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 274,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 274,
            "path": [
                "pallet_nomination_pools",
                "CommissionClaimPermission"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Permissionless",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Account",
                        "fields": [
                            {
                                "type": 0,
                                "typeName": "AccountId",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 275,
            "path": [
                "pallet_fast_unstake",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "register_fast_unstake",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "Register oneself for fast-unstake.",
                            "",
                            "## Dispatch Origin",
                            "",
                            "The dispatch origin of this call must be *signed* by whoever is permitted to call",
                            "unbond funds by the staking system. See [`Config::Staking`].",
                            "",
                            "## Details",
                            "",
                            "The stash associated with the origin must have no ongoing unlocking chunks. If",
                            "successful, this will fully unbond and chill the stash. Then, it will enqueue the stash",
                            "to be checked in further blocks.",
                            "",
                            "If by the time this is called, the stash is actually eligible for fast-unstake, then",
                            "they are guaranteed to remain eligible, because the call will chill them as well.",
                            "",
                            "If the check works, the entire staking data is removed, i.e. the stash is fully",
                            "unstaked.",
                            "",
                            "If the check fails, the stash remains chilled and waiting for being unbonded as in with",
                            "the normal staking system, but they lose part of their unbonding chunks due to consuming",
                            "the chain's resources.",
                            "",
                            "## Events",
                            "",
                            "Some events from the staking and currency system might be emitted."
                        ]
                    },
                    {
                        "name": "deregister",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "Deregister oneself from the fast-unstake.",
                            "",
                            "## Dispatch Origin",
                            "",
                            "The dispatch origin of this call must be *signed* by whoever is permitted to call",
                            "unbond funds by the staking system. See [`Config::Staking`].",
                            "",
                            "## Details",
                            "",
                            "This is useful if one is registered, they are still waiting, and they change their mind.",
                            "",
                            "Note that the associated stash is still fully unbonded and chilled as a consequence of",
                            "calling [`Pallet::register_fast_unstake`]. Therefore, this should probably be followed",
                            "by a call to `rebond` in the staking system.",
                            "",
                            "## Events",
                            "",
                            "Some events from the staking and currency system might be emitted."
                        ]
                    },
                    {
                        "name": "control",
                        "fields": [
                            {
                                "name": "eras_to_check",
                                "type": 4,
                                "typeName": "EraIndex",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Control the operation of this pallet.",
                            "",
                            "## Dispatch Origin",
                            "",
                            "The dispatch origin of this call must be [`Config::ControlOrigin`].",
                            "",
                            "## Details",
                            "",
                            "Can set the number of eras to check per block, and potentially other admin work.",
                            "",
                            "## Events",
                            "",
                            "No events are emitted from this dispatch."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 276,
            "path": [
                "polkadot_runtime_parachains",
                "configuration",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "set_validation_upgrade_cooldown",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Set the validation upgrade cooldown."
                        ]
                    },
                    {
                        "name": "set_validation_upgrade_delay",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Set the validation upgrade delay."
                        ]
                    },
                    {
                        "name": "set_code_retention_period",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Set the acceptance period for an included candidate."
                        ]
                    },
                    {
                        "name": "set_max_code_size",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Set the max validation code size for incoming upgrades."
                        ]
                    },
                    {
                        "name": "set_max_pov_size",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Set the max POV block size for incoming upgrades."
                        ]
                    },
                    {
                        "name": "set_max_head_data_size",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "Set the max head data size for paras."
                        ]
                    },
                    {
                        "name": "set_coretime_cores",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "Set the number of coretime execution cores.",
                            "",
                            "NOTE: that this configuration is managed by the coretime chain. Only manually change",
                            "this, if you really know what you are doing!"
                        ]
                    },
                    {
                        "name": "set_max_availability_timeouts",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "Set the max number of times a claim may timeout on a core before it is abandoned"
                        ]
                    },
                    {
                        "name": "set_group_rotation_frequency",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": [
                            "Set the parachain validator-group rotation frequency"
                        ]
                    },
                    {
                        "name": "set_paras_availability_period",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": [
                            "Set the availability period for paras."
                        ]
                    },
                    {
                        "name": "set_scheduling_lookahead",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 11,
                        "docs": [
                            "Set the scheduling lookahead, in expected number of blocks at peak throughput."
                        ]
                    },
                    {
                        "name": "set_max_validators_per_core",
                        "fields": [
                            {
                                "name": "new",
                                "type": 152,
                                "typeName": "Option<u32>",
                                "docs": []
                            }
                        ],
                        "index": 12,
                        "docs": [
                            "Set the maximum number of validators to assign to any core."
                        ]
                    },
                    {
                        "name": "set_max_validators",
                        "fields": [
                            {
                                "name": "new",
                                "type": 152,
                                "typeName": "Option<u32>",
                                "docs": []
                            }
                        ],
                        "index": 13,
                        "docs": [
                            "Set the maximum number of validators to use in parachain consensus."
                        ]
                    },
                    {
                        "name": "set_dispute_period",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "SessionIndex",
                                "docs": []
                            }
                        ],
                        "index": 14,
                        "docs": [
                            "Set the dispute period, in number of sessions to keep for disputes."
                        ]
                    },
                    {
                        "name": "set_dispute_post_conclusion_acceptance_period",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            }
                        ],
                        "index": 15,
                        "docs": [
                            "Set the dispute post conclusion acceptance period."
                        ]
                    },
                    {
                        "name": "set_no_show_slots",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 18,
                        "docs": [
                            "Set the no show slots, in number of number of consensus slots.",
                            "Must be at least 1."
                        ]
                    },
                    {
                        "name": "set_n_delay_tranches",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 19,
                        "docs": [
                            "Set the total number of delay tranches."
                        ]
                    },
                    {
                        "name": "set_zeroth_delay_tranche_width",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 20,
                        "docs": [
                            "Set the zeroth delay tranche width."
                        ]
                    },
                    {
                        "name": "set_needed_approvals",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 21,
                        "docs": [
                            "Set the number of validators needed to approve a block."
                        ]
                    },
                    {
                        "name": "set_relay_vrf_modulo_samples",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 22,
                        "docs": [
                            "Set the number of samples to do of the `RelayVRFModulo` approval assignment criterion."
                        ]
                    },
                    {
                        "name": "set_max_upward_queue_count",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 23,
                        "docs": [
                            "Sets the maximum items that can present in a upward dispatch queue at once."
                        ]
                    },
                    {
                        "name": "set_max_upward_queue_size",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 24,
                        "docs": [
                            "Sets the maximum total size of items that can present in a upward dispatch queue at",
                            "once."
                        ]
                    },
                    {
                        "name": "set_max_downward_message_size",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 25,
                        "docs": [
                            "Set the critical downward message size."
                        ]
                    },
                    {
                        "name": "set_max_upward_message_size",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 27,
                        "docs": [
                            "Sets the maximum size of an upward message that can be sent by a candidate."
                        ]
                    },
                    {
                        "name": "set_max_upward_message_num_per_candidate",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 28,
                        "docs": [
                            "Sets the maximum number of messages that a candidate can contain."
                        ]
                    },
                    {
                        "name": "set_hrmp_open_request_ttl",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 29,
                        "docs": [
                            "Sets the number of sessions after which an HRMP open channel request expires."
                        ]
                    },
                    {
                        "name": "set_hrmp_sender_deposit",
                        "fields": [
                            {
                                "name": "new",
                                "type": 6,
                                "typeName": "Balance",
                                "docs": []
                            }
                        ],
                        "index": 30,
                        "docs": [
                            "Sets the amount of funds that the sender should provide for opening an HRMP channel."
                        ]
                    },
                    {
                        "name": "set_hrmp_recipient_deposit",
                        "fields": [
                            {
                                "name": "new",
                                "type": 6,
                                "typeName": "Balance",
                                "docs": []
                            }
                        ],
                        "index": 31,
                        "docs": [
                            "Sets the amount of funds that the recipient should provide for accepting opening an HRMP",
                            "channel."
                        ]
                    },
                    {
                        "name": "set_hrmp_channel_max_capacity",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 32,
                        "docs": [
                            "Sets the maximum number of messages allowed in an HRMP channel at once."
                        ]
                    },
                    {
                        "name": "set_hrmp_channel_max_total_size",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 33,
                        "docs": [
                            "Sets the maximum total size of messages in bytes allowed in an HRMP channel at once."
                        ]
                    },
                    {
                        "name": "set_hrmp_max_parachain_inbound_channels",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 34,
                        "docs": [
                            "Sets the maximum number of inbound HRMP channels a parachain is allowed to accept."
                        ]
                    },
                    {
                        "name": "set_hrmp_channel_max_message_size",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 36,
                        "docs": [
                            "Sets the maximum size of a message that could ever be put into an HRMP channel."
                        ]
                    },
                    {
                        "name": "set_hrmp_max_parachain_outbound_channels",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 37,
                        "docs": [
                            "Sets the maximum number of outbound HRMP channels a parachain is allowed to open."
                        ]
                    },
                    {
                        "name": "set_hrmp_max_message_num_per_candidate",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 39,
                        "docs": [
                            "Sets the maximum number of outbound HRMP messages can be sent by a candidate."
                        ]
                    },
                    {
                        "name": "set_pvf_voting_ttl",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "SessionIndex",
                                "docs": []
                            }
                        ],
                        "index": 42,
                        "docs": [
                            "Set the number of session changes after which a PVF pre-checking voting is rejected."
                        ]
                    },
                    {
                        "name": "set_minimum_validation_upgrade_delay",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            }
                        ],
                        "index": 43,
                        "docs": [
                            "Sets the minimum delay between announcing the upgrade block for a parachain until the",
                            "upgrade taking place.",
                            "",
                            "See the field documentation for information and constraints for the new value."
                        ]
                    },
                    {
                        "name": "set_bypass_consistency_check",
                        "fields": [
                            {
                                "name": "new",
                                "type": 8,
                                "typeName": "bool",
                                "docs": []
                            }
                        ],
                        "index": 44,
                        "docs": [
                            "Setting this to true will disable consistency checks for the configuration setters.",
                            "Use with caution."
                        ]
                    },
                    {
                        "name": "set_async_backing_params",
                        "fields": [
                            {
                                "name": "new",
                                "type": 277,
                                "typeName": "AsyncBackingParams",
                                "docs": []
                            }
                        ],
                        "index": 45,
                        "docs": [
                            "Set the asynchronous backing parameters."
                        ]
                    },
                    {
                        "name": "set_executor_params",
                        "fields": [
                            {
                                "name": "new",
                                "type": 278,
                                "typeName": "ExecutorParams",
                                "docs": []
                            }
                        ],
                        "index": 46,
                        "docs": [
                            "Set PVF executor parameters."
                        ]
                    },
                    {
                        "name": "set_on_demand_base_fee",
                        "fields": [
                            {
                                "name": "new",
                                "type": 6,
                                "typeName": "Balance",
                                "docs": []
                            }
                        ],
                        "index": 47,
                        "docs": [
                            "Set the on demand (parathreads) base fee."
                        ]
                    },
                    {
                        "name": "set_on_demand_fee_variability",
                        "fields": [
                            {
                                "name": "new",
                                "type": 43,
                                "typeName": "Perbill",
                                "docs": []
                            }
                        ],
                        "index": 48,
                        "docs": [
                            "Set the on demand (parathreads) fee variability."
                        ]
                    },
                    {
                        "name": "set_on_demand_queue_max_size",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 49,
                        "docs": [
                            "Set the on demand (parathreads) queue max size."
                        ]
                    },
                    {
                        "name": "set_on_demand_target_queue_utilization",
                        "fields": [
                            {
                                "name": "new",
                                "type": 43,
                                "typeName": "Perbill",
                                "docs": []
                            }
                        ],
                        "index": 50,
                        "docs": [
                            "Set the on demand (parathreads) fee variability."
                        ]
                    },
                    {
                        "name": "set_on_demand_ttl",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            }
                        ],
                        "index": 51,
                        "docs": [
                            "Set the on demand (parathreads) ttl in the claimqueue."
                        ]
                    },
                    {
                        "name": "set_minimum_backing_votes",
                        "fields": [
                            {
                                "name": "new",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 52,
                        "docs": [
                            "Set the minimum backing votes threshold."
                        ]
                    },
                    {
                        "name": "set_node_feature",
                        "fields": [
                            {
                                "name": "index",
                                "type": 2,
                                "typeName": "u8",
                                "docs": []
                            },
                            {
                                "name": "value",
                                "type": 8,
                                "typeName": "bool",
                                "docs": []
                            }
                        ],
                        "index": 53,
                        "docs": [
                            "Set/Unset a node feature."
                        ]
                    },
                    {
                        "name": "set_approval_voting_params",
                        "fields": [
                            {
                                "name": "new",
                                "type": 283,
                                "typeName": "ApprovalVotingParams",
                                "docs": []
                            }
                        ],
                        "index": 54,
                        "docs": [
                            "Set approval-voting-params."
                        ]
                    },
                    {
                        "name": "set_scheduler_params",
                        "fields": [
                            {
                                "name": "new",
                                "type": 284,
                                "typeName": "SchedulerParams<BlockNumberFor<T>>",
                                "docs": []
                            }
                        ],
                        "index": 55,
                        "docs": [
                            "Set scheduler-params."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 277,
            "path": [
                "polkadot_primitives",
                "v7",
                "async_backing",
                "AsyncBackingParams"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "max_candidate_depth",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "allowed_ancestry_len",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 278,
            "path": [
                "polkadot_primitives",
                "v7",
                "executor_params",
                "ExecutorParams"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 279,
                        "typeName": "Vec<ExecutorParam>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 279,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 280
            },
            "docs": []
        },
        {
            "id": 280,
            "path": [
                "polkadot_primitives",
                "v7",
                "executor_params",
                "ExecutorParam"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "MaxMemoryPages",
                        "fields": [
                            {
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "StackLogicalMax",
                        "fields": [
                            {
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "StackNativeMax",
                        "fields": [
                            {
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "PrecheckingMaxMemory",
                        "fields": [
                            {
                                "type": 12,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "PvfPrepTimeout",
                        "fields": [
                            {
                                "type": 281,
                                "typeName": "PvfPrepKind",
                                "docs": []
                            },
                            {
                                "type": 12,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "PvfExecTimeout",
                        "fields": [
                            {
                                "type": 282,
                                "typeName": "PvfExecKind",
                                "docs": []
                            },
                            {
                                "type": 12,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "WasmExtBulkMemory",
                        "fields": [],
                        "index": 7,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 281,
            "path": [
                "polkadot_primitives",
                "v7",
                "PvfPrepKind"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Precheck",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Prepare",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 282,
            "path": [
                "polkadot_primitives",
                "v7",
                "PvfExecKind"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Backing",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Approval",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 283,
            "path": [
                "polkadot_primitives",
                "v7",
                "ApprovalVotingParams"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "max_approval_coalesce_count",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 284,
            "path": [
                "polkadot_primitives",
                "vstaging",
                "SchedulerParams"
            ],
            "params": [
                {
                    "name": "BlockNumber",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "group_rotation_frequency",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                    },
                    {
                        "name": "paras_availability_period",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                    },
                    {
                        "name": "max_validators_per_core",
                        "type": 152,
                        "typeName": "Option<u32>",
                        "docs": []
                    },
                    {
                        "name": "lookahead",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "num_cores",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "max_availability_timeouts",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "on_demand_queue_max_size",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "on_demand_target_queue_utilization",
                        "type": 43,
                        "typeName": "Perbill",
                        "docs": []
                    },
                    {
                        "name": "on_demand_fee_variability",
                        "type": 43,
                        "typeName": "Perbill",
                        "docs": []
                    },
                    {
                        "name": "on_demand_base_fee",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "ttl",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 285,
            "path": [
                "polkadot_runtime_parachains",
                "shared",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": []
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 286,
            "path": [
                "polkadot_runtime_parachains",
                "inclusion",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": []
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 287,
            "path": [
                "polkadot_runtime_parachains",
                "paras_inherent",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "enter",
                        "fields": [
                            {
                                "name": "data",
                                "type": 288,
                                "typeName": "ParachainsInherentData<HeaderFor<T>>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Enter the paras inherent. This will process bitfields and backed candidates."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 288,
            "path": [
                "polkadot_primitives",
                "v7",
                "InherentData"
            ],
            "params": [
                {
                    "name": "HDR",
                    "type": 104
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "bitfields",
                        "type": 289,
                        "typeName": "UncheckedSignedAvailabilityBitfields",
                        "docs": []
                    },
                    {
                        "name": "backed_candidates",
                        "type": 296,
                        "typeName": "Vec<BackedCandidate<HDR::Hash>>",
                        "docs": []
                    },
                    {
                        "name": "disputes",
                        "type": 313,
                        "typeName": "MultiDisputeStatementSet",
                        "docs": []
                    },
                    {
                        "name": "parent_header",
                        "type": 104,
                        "typeName": "HDR",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 289,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 290
            },
            "docs": []
        },
        {
            "id": 290,
            "path": [
                "polkadot_primitives",
                "v7",
                "signed",
                "UncheckedSigned"
            ],
            "params": [
                {
                    "name": "Payload",
                    "type": 291
                },
                {
                    "name": "RealPayload",
                    "type": 291
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "payload",
                        "type": 291,
                        "typeName": "Payload",
                        "docs": []
                    },
                    {
                        "name": "validator_index",
                        "type": 294,
                        "typeName": "ValidatorIndex",
                        "docs": []
                    },
                    {
                        "name": "signature",
                        "type": 295,
                        "typeName": "ValidatorSignature",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 291,
            "path": [
                "polkadot_primitives",
                "v7",
                "AvailabilityBitfield"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 292,
                        "typeName": "BitVec<u8, bitvec::order::Lsb0>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 292,
            "path": [],
            "params": [],
            "def": {
                "tag": "bitSequence",
                "value": {
                    "bitStoreType": 2,
                    "bitOrderType": 293
                }
            },
            "docs": []
        },
        {
            "id": 293,
            "path": [
                "bitvec",
                "order",
                "Lsb0"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": []
            },
            "docs": []
        },
        {
            "id": 294,
            "path": [
                "polkadot_primitives",
                "v7",
                "ValidatorIndex"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 295,
            "path": [
                "polkadot_primitives",
                "v7",
                "validator_app",
                "Signature"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 146,
                        "typeName": "sr25519::Signature",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 296,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 297
            },
            "docs": []
        },
        {
            "id": 297,
            "path": [
                "polkadot_primitives",
                "v7",
                "BackedCandidate"
            ],
            "params": [
                {
                    "name": "H",
                    "type": 13
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "candidate",
                        "type": 298,
                        "typeName": "CommittedCandidateReceipt<H>",
                        "docs": []
                    },
                    {
                        "name": "validity_votes",
                        "type": 311,
                        "typeName": "Vec<ValidityAttestation>",
                        "docs": []
                    },
                    {
                        "name": "validator_indices",
                        "type": 292,
                        "typeName": "BitVec<u8, bitvec::order::Lsb0>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 298,
            "path": [
                "polkadot_primitives",
                "v7",
                "CommittedCandidateReceipt"
            ],
            "params": [
                {
                    "name": "H",
                    "type": 13
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "descriptor",
                        "type": 299,
                        "typeName": "CandidateDescriptor<H>",
                        "docs": []
                    },
                    {
                        "name": "commitments",
                        "type": 303,
                        "typeName": "CandidateCommitments",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 299,
            "path": [
                "polkadot_primitives",
                "v7",
                "CandidateDescriptor"
            ],
            "params": [
                {
                    "name": "H",
                    "type": 13
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "para_id",
                        "type": 163,
                        "typeName": "Id",
                        "docs": []
                    },
                    {
                        "name": "relay_parent",
                        "type": 13,
                        "typeName": "H",
                        "docs": []
                    },
                    {
                        "name": "collator",
                        "type": 300,
                        "typeName": "CollatorId",
                        "docs": []
                    },
                    {
                        "name": "persisted_validation_data_hash",
                        "type": 13,
                        "typeName": "Hash",
                        "docs": []
                    },
                    {
                        "name": "pov_hash",
                        "type": 13,
                        "typeName": "Hash",
                        "docs": []
                    },
                    {
                        "name": "erasure_root",
                        "type": 13,
                        "typeName": "Hash",
                        "docs": []
                    },
                    {
                        "name": "signature",
                        "type": 301,
                        "typeName": "CollatorSignature",
                        "docs": []
                    },
                    {
                        "name": "para_head",
                        "type": 13,
                        "typeName": "Hash",
                        "docs": []
                    },
                    {
                        "name": "validation_code_hash",
                        "type": 302,
                        "typeName": "ValidationCodeHash",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 300,
            "path": [
                "polkadot_primitives",
                "v7",
                "collator_app",
                "Public"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 1,
                        "typeName": "sr25519::Public",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 301,
            "path": [
                "polkadot_primitives",
                "v7",
                "collator_app",
                "Signature"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 146,
                        "typeName": "sr25519::Signature",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 302,
            "path": [
                "polkadot_parachain_primitives",
                "primitives",
                "ValidationCodeHash"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 13,
                        "typeName": "Hash",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 303,
            "path": [
                "polkadot_primitives",
                "v7",
                "CandidateCommitments"
            ],
            "params": [
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "upward_messages",
                        "type": 304,
                        "typeName": "UpwardMessages",
                        "docs": []
                    },
                    {
                        "name": "horizontal_messages",
                        "type": 305,
                        "typeName": "HorizontalMessages",
                        "docs": []
                    },
                    {
                        "name": "new_validation_code",
                        "type": 308,
                        "typeName": "Option<ValidationCode>",
                        "docs": []
                    },
                    {
                        "name": "head_data",
                        "type": 310,
                        "typeName": "HeadData",
                        "docs": []
                    },
                    {
                        "name": "processed_downward_messages",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "hrmp_watermark",
                        "type": 4,
                        "typeName": "N",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 304,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 14
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 97,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 305,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 306
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 307,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 306,
            "path": [
                "polkadot_core_primitives",
                "OutboundHrmpMessage"
            ],
            "params": [
                {
                    "name": "Id",
                    "type": 163
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "recipient",
                        "type": 163,
                        "typeName": "Id",
                        "docs": []
                    },
                    {
                        "name": "data",
                        "type": 14,
                        "typeName": "sp_std::vec::Vec<u8>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 307,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 306
            },
            "docs": []
        },
        {
            "id": 308,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 309
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 309,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 309,
            "path": [
                "polkadot_parachain_primitives",
                "primitives",
                "ValidationCode"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 14,
                        "typeName": "Vec<u8>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 310,
            "path": [
                "polkadot_parachain_primitives",
                "primitives",
                "HeadData"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 14,
                        "typeName": "Vec<u8>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 311,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 312
            },
            "docs": []
        },
        {
            "id": 312,
            "path": [
                "polkadot_primitives",
                "v7",
                "ValidityAttestation"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Implicit",
                        "fields": [
                            {
                                "type": 295,
                                "typeName": "ValidatorSignature",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Explicit",
                        "fields": [
                            {
                                "type": 295,
                                "typeName": "ValidatorSignature",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 313,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 314
            },
            "docs": []
        },
        {
            "id": 314,
            "path": [
                "polkadot_primitives",
                "v7",
                "DisputeStatementSet"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "candidate_hash",
                        "type": 315,
                        "typeName": "CandidateHash",
                        "docs": []
                    },
                    {
                        "name": "session",
                        "type": 4,
                        "typeName": "SessionIndex",
                        "docs": []
                    },
                    {
                        "name": "statements",
                        "type": 316,
                        "typeName": "Vec<(DisputeStatement, ValidatorIndex, ValidatorSignature)>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 315,
            "path": [
                "polkadot_core_primitives",
                "CandidateHash"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 13,
                        "typeName": "Hash",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 316,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 317
            },
            "docs": []
        },
        {
            "id": 317,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    318,
                    294,
                    295
                ]
            },
            "docs": []
        },
        {
            "id": 318,
            "path": [
                "polkadot_primitives",
                "v7",
                "DisputeStatement"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Valid",
                        "fields": [
                            {
                                "type": 319,
                                "typeName": "ValidDisputeStatementKind",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Invalid",
                        "fields": [
                            {
                                "type": 321,
                                "typeName": "InvalidDisputeStatementKind",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 319,
            "path": [
                "polkadot_primitives",
                "v7",
                "ValidDisputeStatementKind"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Explicit",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "BackingSeconded",
                        "fields": [
                            {
                                "type": 13,
                                "typeName": "Hash",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "BackingValid",
                        "fields": [
                            {
                                "type": 13,
                                "typeName": "Hash",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "ApprovalChecking",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "ApprovalCheckingMultipleCandidates",
                        "fields": [
                            {
                                "type": 320,
                                "typeName": "Vec<CandidateHash>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 320,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 315
            },
            "docs": []
        },
        {
            "id": 321,
            "path": [
                "polkadot_primitives",
                "v7",
                "InvalidDisputeStatementKind"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Explicit",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 322,
            "path": [
                "polkadot_runtime_parachains",
                "paras",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "force_set_current_code",
                        "fields": [
                            {
                                "name": "para",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "new_code",
                                "type": 309,
                                "typeName": "ValidationCode",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Set the storage for the parachain validation code immediately."
                        ]
                    },
                    {
                        "name": "force_set_current_head",
                        "fields": [
                            {
                                "name": "para",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "new_head",
                                "type": 310,
                                "typeName": "HeadData",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Set the storage for the current parachain head data immediately."
                        ]
                    },
                    {
                        "name": "force_schedule_code_upgrade",
                        "fields": [
                            {
                                "name": "para",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "new_code",
                                "type": 309,
                                "typeName": "ValidationCode",
                                "docs": []
                            },
                            {
                                "name": "relay_parent_number",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Schedule an upgrade as if it was scheduled in the given relay parent block."
                        ]
                    },
                    {
                        "name": "force_note_new_head",
                        "fields": [
                            {
                                "name": "para",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "new_head",
                                "type": 310,
                                "typeName": "HeadData",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Note a new block head for para within the context of the current block."
                        ]
                    },
                    {
                        "name": "force_queue_action",
                        "fields": [
                            {
                                "name": "para",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Put a parachain directly into the next session's action queue.",
                            "We can't queue it any sooner than this without going into the",
                            "initializer..."
                        ]
                    },
                    {
                        "name": "add_trusted_validation_code",
                        "fields": [
                            {
                                "name": "validation_code",
                                "type": 309,
                                "typeName": "ValidationCode",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "Adds the validation code to the storage.",
                            "",
                            "The code will not be added if it is already present. Additionally, if PVF pre-checking",
                            "is running for that code, it will be instantly accepted.",
                            "",
                            "Otherwise, the code will be added into the storage. Note that the code will be added",
                            "into storage with reference count 0. This is to account the fact that there are no users",
                            "for this code yet. The caller will have to make sure that this code eventually gets",
                            "used by some parachain or removed from the storage to avoid storage leaks. For the",
                            "latter prefer to use the `poke_unused_validation_code` dispatchable to raw storage",
                            "manipulation.",
                            "",
                            "This function is mainly meant to be used for upgrading parachains that do not follow",
                            "the go-ahead signal while the PVF pre-checking feature is enabled."
                        ]
                    },
                    {
                        "name": "poke_unused_validation_code",
                        "fields": [
                            {
                                "name": "validation_code_hash",
                                "type": 302,
                                "typeName": "ValidationCodeHash",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "Remove the validation code from the storage iff the reference count is 0.",
                            "",
                            "This is better than removing the storage directly, because it will not remove the code",
                            "that was suddenly got used by some parachain while this dispatchable was pending",
                            "dispatching."
                        ]
                    },
                    {
                        "name": "include_pvf_check_statement",
                        "fields": [
                            {
                                "name": "stmt",
                                "type": 323,
                                "typeName": "PvfCheckStatement",
                                "docs": []
                            },
                            {
                                "name": "signature",
                                "type": 295,
                                "typeName": "ValidatorSignature",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "Includes a statement for a PVF pre-checking vote. Potentially, finalizes the vote and",
                            "enacts the results if that was the last vote before achieving the supermajority."
                        ]
                    },
                    {
                        "name": "force_set_most_recent_context",
                        "fields": [
                            {
                                "name": "para",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "context",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": [
                            "Set the storage for the current parachain head data immediately."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 323,
            "path": [
                "polkadot_primitives",
                "v7",
                "PvfCheckStatement"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "accept",
                        "type": 8,
                        "typeName": "bool",
                        "docs": []
                    },
                    {
                        "name": "subject",
                        "type": 302,
                        "typeName": "ValidationCodeHash",
                        "docs": []
                    },
                    {
                        "name": "session_index",
                        "type": 4,
                        "typeName": "SessionIndex",
                        "docs": []
                    },
                    {
                        "name": "validator_index",
                        "type": 294,
                        "typeName": "ValidatorIndex",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 324,
            "path": [
                "polkadot_runtime_parachains",
                "initializer",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "force_approve",
                        "fields": [
                            {
                                "name": "up_to",
                                "type": 4,
                                "typeName": "BlockNumber",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Issue a signal to the consensus engine to forcibly act as though all parachain",
                            "blocks in all relay chain blocks up to and including the given number in the current",
                            "chain are valid and should be finalized."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 325,
            "path": [
                "polkadot_runtime_parachains",
                "hrmp",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "hrmp_init_open_channel",
                        "fields": [
                            {
                                "name": "recipient",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "proposed_max_capacity",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "proposed_max_message_size",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Initiate opening a channel from a parachain to a given recipient with given channel",
                            "parameters.",
                            "",
                            "- `proposed_max_capacity` - specifies how many messages can be in the channel at once.",
                            "- `proposed_max_message_size` - specifies the maximum size of the messages.",
                            "",
                            "These numbers are a subject to the relay-chain configuration limits.",
                            "",
                            "The channel can be opened only after the recipient confirms it and only on a session",
                            "change."
                        ]
                    },
                    {
                        "name": "hrmp_accept_open_channel",
                        "fields": [
                            {
                                "name": "sender",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Accept a pending open channel request from the given sender.",
                            "",
                            "The channel will be opened only on the next session boundary."
                        ]
                    },
                    {
                        "name": "hrmp_close_channel",
                        "fields": [
                            {
                                "name": "channel_id",
                                "type": 326,
                                "typeName": "HrmpChannelId",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Initiate unilateral closing of a channel. The origin must be either the sender or the",
                            "recipient in the channel being closed.",
                            "",
                            "The closure can only happen on a session change."
                        ]
                    },
                    {
                        "name": "force_clean_hrmp",
                        "fields": [
                            {
                                "name": "para",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "num_inbound",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "num_outbound",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "This extrinsic triggers the cleanup of all the HRMP storage items that a para may have.",
                            "Normally this happens once per session, but this allows you to trigger the cleanup",
                            "immediately for a specific parachain.",
                            "",
                            "Number of inbound and outbound channels for `para` must be provided as witness data.",
                            "",
                            "Origin must be the `ChannelManager`."
                        ]
                    },
                    {
                        "name": "force_process_hrmp_open",
                        "fields": [
                            {
                                "name": "channels",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Force process HRMP open channel requests.",
                            "",
                            "If there are pending HRMP open channel requests, you can use this function to process",
                            "all of those requests immediately.",
                            "",
                            "Total number of opening channels must be provided as witness data.",
                            "",
                            "Origin must be the `ChannelManager`."
                        ]
                    },
                    {
                        "name": "force_process_hrmp_close",
                        "fields": [
                            {
                                "name": "channels",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "Force process HRMP close channel requests.",
                            "",
                            "If there are pending HRMP close channel requests, you can use this function to process",
                            "all of those requests immediately.",
                            "",
                            "Total number of closing channels must be provided as witness data.",
                            "",
                            "Origin must be the `ChannelManager`."
                        ]
                    },
                    {
                        "name": "hrmp_cancel_open_request",
                        "fields": [
                            {
                                "name": "channel_id",
                                "type": 326,
                                "typeName": "HrmpChannelId",
                                "docs": []
                            },
                            {
                                "name": "open_requests",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "This cancels a pending open channel request. It can be canceled by either of the sender",
                            "or the recipient for that request. The origin must be either of those.",
                            "",
                            "The cancellation happens immediately. It is not possible to cancel the request if it is",
                            "already accepted.",
                            "",
                            "Total number of open requests (i.e. `HrmpOpenChannelRequestsList`) must be provided as",
                            "witness data."
                        ]
                    },
                    {
                        "name": "force_open_hrmp_channel",
                        "fields": [
                            {
                                "name": "sender",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "recipient",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "max_capacity",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "max_message_size",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "Open a channel from a `sender` to a `recipient` `ParaId`. Although opened by governance,",
                            "the `max_capacity` and `max_message_size` are still subject to the Relay Chain's",
                            "configured limits.",
                            "",
                            "Expected use is when one (and only one) of the `ParaId`s involved in the channel is",
                            "governed by the system, e.g. a system parachain.",
                            "",
                            "Origin must be the `ChannelManager`."
                        ]
                    },
                    {
                        "name": "establish_system_channel",
                        "fields": [
                            {
                                "name": "sender",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "recipient",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": [
                            "Establish an HRMP channel between two system chains. If the channel does not already",
                            "exist, the transaction fees will be refunded to the caller. The system does not take",
                            "deposits for channels between system chains, and automatically sets the message number",
                            "and size limits to the maximum allowed by the network's configuration.",
                            "",
                            "Arguments:",
                            "",
                            "- `sender`: A system chain, `ParaId`.",
                            "- `recipient`: A system chain, `ParaId`.",
                            "",
                            "Any signed origin can call this function, but _both_ inputs MUST be system chains. If",
                            "the channel does not exist yet, there is no fee."
                        ]
                    },
                    {
                        "name": "poke_channel_deposits",
                        "fields": [
                            {
                                "name": "sender",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "recipient",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": [
                            "Update the deposits held for an HRMP channel to the latest `Configuration`. Channels",
                            "with system chains do not require a deposit.",
                            "",
                            "Arguments:",
                            "",
                            "- `sender`: A chain, `ParaId`.",
                            "- `recipient`: A chain, `ParaId`.",
                            "",
                            "Any signed origin can call this function."
                        ]
                    },
                    {
                        "name": "establish_channel_with_system",
                        "fields": [
                            {
                                "name": "target_system_chain",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 10,
                        "docs": [
                            "Establish a bidirectional HRMP channel between a parachain and a system chain.",
                            "",
                            "Arguments:",
                            "",
                            "- `target_system_chain`: A system chain, `ParaId`.",
                            "",
                            "The origin needs to be the parachain origin."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 326,
            "path": [
                "polkadot_parachain_primitives",
                "primitives",
                "HrmpChannelId"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "sender",
                        "type": 163,
                        "typeName": "Id",
                        "docs": []
                    },
                    {
                        "name": "recipient",
                        "type": 163,
                        "typeName": "Id",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 327,
            "path": [
                "polkadot_runtime_parachains",
                "disputes",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "force_unfreeze",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 328,
            "path": [
                "polkadot_runtime_parachains",
                "disputes",
                "slashing",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "report_dispute_lost_unsigned",
                        "fields": [
                            {
                                "name": "dispute_proof",
                                "type": 329,
                                "typeName": "Box<DisputeProof>",
                                "docs": []
                            },
                            {
                                "name": "key_owner_proof",
                                "type": 107,
                                "typeName": "T::KeyOwnerProof",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 329,
            "path": [
                "polkadot_primitives",
                "v7",
                "slashing",
                "DisputeProof"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "time_slot",
                        "type": 330,
                        "typeName": "DisputesTimeSlot",
                        "docs": []
                    },
                    {
                        "name": "kind",
                        "type": 331,
                        "typeName": "SlashingOffenceKind",
                        "docs": []
                    },
                    {
                        "name": "validator_index",
                        "type": 294,
                        "typeName": "ValidatorIndex",
                        "docs": []
                    },
                    {
                        "name": "validator_id",
                        "type": 135,
                        "typeName": "ValidatorId",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 330,
            "path": [
                "polkadot_primitives",
                "v7",
                "slashing",
                "DisputesTimeSlot"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "session_index",
                        "type": 4,
                        "typeName": "SessionIndex",
                        "docs": []
                    },
                    {
                        "name": "candidate_hash",
                        "type": 315,
                        "typeName": "CandidateHash",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 331,
            "path": [
                "polkadot_primitives",
                "v7",
                "slashing",
                "SlashingOffenceKind"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "ForInvalid",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "AgainstValid",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 332,
            "path": [
                "polkadot_runtime_parachains",
                "assigner_on_demand",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "place_order_allow_death",
                        "fields": [
                            {
                                "name": "max_amount",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "para_id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Create a single on demand core order.",
                            "Will use the spot price for the current block and will reap the account if needed.",
                            "",
                            "Parameters:",
                            "- `origin`: The sender of the call, funds will be withdrawn from this account.",
                            "- `max_amount`: The maximum balance to withdraw from the origin to place an order.",
                            "- `para_id`: A `ParaId` the origin wants to provide blockspace for.",
                            "",
                            "Errors:",
                            "- `InsufficientBalance`: from the Currency implementation",
                            "- `QueueFull`",
                            "- `SpotPriceHigherThanMaxAmount`",
                            "",
                            "Events:",
                            "- `OnDemandOrderPlaced`"
                        ]
                    },
                    {
                        "name": "place_order_keep_alive",
                        "fields": [
                            {
                                "name": "max_amount",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "para_id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Same as the [`place_order_allow_death`](Self::place_order_allow_death) call , but with a",
                            "check that placing the order will not reap the account.",
                            "",
                            "Parameters:",
                            "- `origin`: The sender of the call, funds will be withdrawn from this account.",
                            "- `max_amount`: The maximum balance to withdraw from the origin to place an order.",
                            "- `para_id`: A `ParaId` the origin wants to provide blockspace for.",
                            "",
                            "Errors:",
                            "- `InsufficientBalance`: from the Currency implementation",
                            "- `QueueFull`",
                            "- `SpotPriceHigherThanMaxAmount`",
                            "",
                            "Events:",
                            "- `OnDemandOrderPlaced`"
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 333,
            "path": [
                "polkadot_runtime_common",
                "paras_registrar",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "register",
                        "fields": [
                            {
                                "name": "id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "genesis_head",
                                "type": 310,
                                "typeName": "HeadData",
                                "docs": []
                            },
                            {
                                "name": "validation_code",
                                "type": 309,
                                "typeName": "ValidationCode",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Register head data and validation code for a reserved Para Id.",
                            "",
                            "## Arguments",
                            "- `origin`: Must be called by a `Signed` origin.",
                            "- `id`: The para ID. Must be owned/managed by the `origin` signing account.",
                            "- `genesis_head`: The genesis head data of the parachain/thread.",
                            "- `validation_code`: The initial validation code of the parachain/thread.",
                            "",
                            "## Deposits/Fees",
                            "The account with the originating signature must reserve a deposit.",
                            "",
                            "The deposit is required to cover the costs associated with storing the genesis head",
                            "data and the validation code.",
                            "This accounts for the potential to store validation code of a size up to the",
                            "`max_code_size`, as defined in the configuration pallet",
                            "",
                            "Anything already reserved previously for this para ID is accounted for.",
                            "",
                            "## Events",
                            "The `Registered` event is emitted in case of success."
                        ]
                    },
                    {
                        "name": "force_register",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "deposit",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "genesis_head",
                                "type": 310,
                                "typeName": "HeadData",
                                "docs": []
                            },
                            {
                                "name": "validation_code",
                                "type": 309,
                                "typeName": "ValidationCode",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Force the registration of a Para Id on the relay chain.",
                            "",
                            "This function must be called by a Root origin.",
                            "",
                            "The deposit taken can be specified for this registration. Any `ParaId`",
                            "can be registered, including sub-1000 IDs which are System Parachains."
                        ]
                    },
                    {
                        "name": "deregister",
                        "fields": [
                            {
                                "name": "id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Deregister a Para Id, freeing all data and returning any deposit.",
                            "",
                            "The caller must be Root, the `para` owner, or the `para` itself. The para must be an",
                            "on-demand parachain."
                        ]
                    },
                    {
                        "name": "swap",
                        "fields": [
                            {
                                "name": "id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "other",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Swap a lease holding parachain with another parachain, either on-demand or lease",
                            "holding.",
                            "",
                            "The origin must be Root, the `para` owner, or the `para` itself.",
                            "",
                            "The swap will happen only if there is already an opposite swap pending. If there is not,",
                            "the swap will be stored in the pending swaps map, ready for a later confirmatory swap.",
                            "",
                            "The `ParaId`s remain mapped to the same head data and code so external code can rely on",
                            "`ParaId` to be a long-term identifier of a notional \"parachain\". However, their",
                            "scheduling info (i.e. whether they're an on-demand parachain or lease holding",
                            "parachain), auction information and the auction deposit are switched."
                        ]
                    },
                    {
                        "name": "remove_lock",
                        "fields": [
                            {
                                "name": "para",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Remove a manager lock from a para. This will allow the manager of a",
                            "previously locked para to deregister or swap a para without using governance.",
                            "",
                            "Can only be called by the Root origin or the parachain."
                        ]
                    },
                    {
                        "name": "reserve",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "Reserve a Para Id on the relay chain.",
                            "",
                            "This function will reserve a new Para Id to be owned/managed by the origin account.",
                            "The origin account is able to register head data and validation code using `register` to",
                            "create an on-demand parachain. Using the Slots pallet, an on-demand parachain can then",
                            "be upgraded to a lease holding parachain.",
                            "",
                            "## Arguments",
                            "- `origin`: Must be called by a `Signed` origin. Becomes the manager/owner of the new",
                            "  para ID.",
                            "",
                            "## Deposits/Fees",
                            "The origin must reserve a deposit of `ParaDeposit` for the registration.",
                            "",
                            "## Events",
                            "The `Reserved` event is emitted in case of success, which provides the ID reserved for",
                            "use."
                        ]
                    },
                    {
                        "name": "add_lock",
                        "fields": [
                            {
                                "name": "para",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "Add a manager lock from a para. This will prevent the manager of a",
                            "para to deregister or swap a para.",
                            "",
                            "Can be called by Root, the parachain, or the parachain manager if the parachain is",
                            "unlocked."
                        ]
                    },
                    {
                        "name": "schedule_code_upgrade",
                        "fields": [
                            {
                                "name": "para",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "new_code",
                                "type": 309,
                                "typeName": "ValidationCode",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "Schedule a parachain upgrade.",
                            "",
                            "This will kick off a check of `new_code` by all validators. After the majority of the",
                            "validators have reported on the validity of the code, the code will either be enacted",
                            "or the upgrade will be rejected. If the code will be enacted, the current code of the",
                            "parachain will be overwritten directly. This means that any PoV will be checked by this",
                            "new code. The parachain itself will not be informed explicitly that the validation code",
                            "has changed.",
                            "",
                            "Can be called by Root, the parachain, or the parachain manager if the parachain is",
                            "unlocked."
                        ]
                    },
                    {
                        "name": "set_current_head",
                        "fields": [
                            {
                                "name": "para",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "new_head",
                                "type": 310,
                                "typeName": "HeadData",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": [
                            "Set the parachain's current head.",
                            "",
                            "Can be called by Root, the parachain, or the parachain manager if the parachain is",
                            "unlocked."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 334,
            "path": [
                "polkadot_runtime_common",
                "slots",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "force_lease",
                        "fields": [
                            {
                                "name": "para",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "leaser",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "period_begin",
                                "type": 4,
                                "typeName": "LeasePeriodOf<T>",
                                "docs": []
                            },
                            {
                                "name": "period_count",
                                "type": 4,
                                "typeName": "LeasePeriodOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Just a connect into the `lease_out` call, in case Root wants to force some lease to",
                            "happen independently of any other on-chain mechanism to use it.",
                            "",
                            "The dispatch origin for this call must match `T::ForceOrigin`."
                        ]
                    },
                    {
                        "name": "clear_all_leases",
                        "fields": [
                            {
                                "name": "para",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Clear all leases for a Para Id, refunding any deposits back to the original owners.",
                            "",
                            "The dispatch origin for this call must match `T::ForceOrigin`."
                        ]
                    },
                    {
                        "name": "trigger_onboard",
                        "fields": [
                            {
                                "name": "para",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Try to onboard a parachain that has a lease for the current lease period.",
                            "",
                            "This function can be useful if there was some state issue with a para that should",
                            "have onboarded, but was unable to. As long as they have a lease period, we can",
                            "let them onboard from here.",
                            "",
                            "Origin must be signed, but can be called by anyone."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 335,
            "path": [
                "polkadot_runtime_common",
                "auctions",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "new_auction",
                        "fields": [
                            {
                                "name": "duration",
                                "type": 59,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            },
                            {
                                "name": "lease_period_index",
                                "type": 59,
                                "typeName": "LeasePeriodOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Create a new auction.",
                            "",
                            "This can only happen when there isn't already an auction in progress and may only be",
                            "called by the root origin. Accepts the `duration` of this auction and the",
                            "`lease_period_index` of the initial lease period of the four that are to be auctioned."
                        ]
                    },
                    {
                        "name": "bid",
                        "fields": [
                            {
                                "name": "para",
                                "type": 336,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "auction_index",
                                "type": 59,
                                "typeName": "AuctionIndex",
                                "docs": []
                            },
                            {
                                "name": "first_slot",
                                "type": 59,
                                "typeName": "LeasePeriodOf<T>",
                                "docs": []
                            },
                            {
                                "name": "last_slot",
                                "type": 59,
                                "typeName": "LeasePeriodOf<T>",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 63,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Make a new bid from an account (including a parachain account) for deploying a new",
                            "parachain.",
                            "",
                            "Multiple simultaneous bids from the same bidder are allowed only as long as all active",
                            "bids overlap each other (i.e. are mutually exclusive). Bids cannot be redacted.",
                            "",
                            "- `sub` is the sub-bidder ID, allowing for multiple competing bids to be made by (and",
                            "funded by) the same account.",
                            "- `auction_index` is the index of the auction to bid on. Should just be the present",
                            "value of `AuctionCounter`.",
                            "- `first_slot` is the first lease period index of the range to bid on. This is the",
                            "absolute lease period index value, not an auction-specific offset.",
                            "- `last_slot` is the last lease period index of the range to bid on. This is the",
                            "absolute lease period index value, not an auction-specific offset.",
                            "- `amount` is the amount to bid to be held as deposit for the parachain should the",
                            "bid win. This amount is held throughout the range."
                        ]
                    },
                    {
                        "name": "cancel_auction",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "Cancel an in-progress auction.",
                            "",
                            "Can only be called by Root origin."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 336,
            "path": [],
            "params": [],
            "def": {
                "tag": "compact",
                "value": 163
            },
            "docs": []
        },
        {
            "id": 337,
            "path": [
                "polkadot_runtime_common",
                "crowdloan",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "create",
                        "fields": [
                            {
                                "name": "index",
                                "type": 336,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "cap",
                                "type": 63,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "first_period",
                                "type": 59,
                                "typeName": "LeasePeriodOf<T>",
                                "docs": []
                            },
                            {
                                "name": "last_period",
                                "type": 59,
                                "typeName": "LeasePeriodOf<T>",
                                "docs": []
                            },
                            {
                                "name": "end",
                                "type": 59,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            },
                            {
                                "name": "verifier",
                                "type": 338,
                                "typeName": "Option<MultiSigner>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Create a new crowdloaning campaign for a parachain slot with the given lease period",
                            "range.",
                            "",
                            "This applies a lock to your parachain configuration, ensuring that it cannot be changed",
                            "by the parachain manager."
                        ]
                    },
                    {
                        "name": "contribute",
                        "fields": [
                            {
                                "name": "index",
                                "type": 336,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "value",
                                "type": 63,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "signature",
                                "type": 340,
                                "typeName": "Option<MultiSignature>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Contribute to a crowd sale. This will transfer some balance over to fund a parachain",
                            "slot. It will be withdrawable when the crowdloan has ended and the funds are unused."
                        ]
                    },
                    {
                        "name": "withdraw",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "index",
                                "type": 336,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Withdraw full balance of a specific contributor.",
                            "",
                            "Origin must be signed, but can come from anyone.",
                            "",
                            "The fund must be either in, or ready for, retirement. For a fund to be *in* retirement,",
                            "then the retirement flag must be set. For a fund to be ready for retirement, then:",
                            "- it must not already be in retirement;",
                            "- the amount of raised funds must be bigger than the _free_ balance of the account;",
                            "- and either:",
                            "  - the block number must be at least `end`; or",
                            "  - the current lease period must be greater than the fund's `last_period`.",
                            "",
                            "In this case, the fund's retirement flag is set and its `end` is reset to the current",
                            "block number.",
                            "",
                            "- `who`: The account whose contribution should be withdrawn.",
                            "- `index`: The parachain to whose crowdloan the contribution was made."
                        ]
                    },
                    {
                        "name": "refund",
                        "fields": [
                            {
                                "name": "index",
                                "type": 336,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Automatically refund contributors of an ended crowdloan.",
                            "Due to weight restrictions, this function may need to be called multiple",
                            "times to fully refund all users. We will refund `RemoveKeysLimit` users at a time.",
                            "",
                            "Origin must be signed, but can come from anyone."
                        ]
                    },
                    {
                        "name": "dissolve",
                        "fields": [
                            {
                                "name": "index",
                                "type": 336,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Remove a fund after the retirement period has ended and all funds have been returned."
                        ]
                    },
                    {
                        "name": "edit",
                        "fields": [
                            {
                                "name": "index",
                                "type": 336,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "cap",
                                "type": 63,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "first_period",
                                "type": 59,
                                "typeName": "LeasePeriodOf<T>",
                                "docs": []
                            },
                            {
                                "name": "last_period",
                                "type": 59,
                                "typeName": "LeasePeriodOf<T>",
                                "docs": []
                            },
                            {
                                "name": "end",
                                "type": 59,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            },
                            {
                                "name": "verifier",
                                "type": 338,
                                "typeName": "Option<MultiSigner>",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "Edit the configuration for an in-progress crowdloan.",
                            "",
                            "Can only be called by Root origin."
                        ]
                    },
                    {
                        "name": "add_memo",
                        "fields": [
                            {
                                "name": "index",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "memo",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "Add an optional memo to an existing crowdloan contribution.",
                            "",
                            "Origin must be Signed, and the user must have contributed to the crowdloan."
                        ]
                    },
                    {
                        "name": "poke",
                        "fields": [
                            {
                                "name": "index",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "Poke the fund into `NewRaise`",
                            "",
                            "Origin must be Signed, and the fund has non-zero raise."
                        ]
                    },
                    {
                        "name": "contribute_all",
                        "fields": [
                            {
                                "name": "index",
                                "type": 336,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "signature",
                                "type": 340,
                                "typeName": "Option<MultiSignature>",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": [
                            "Contribute your entire balance to a crowd sale. This will transfer the entire balance of",
                            "a user over to fund a parachain slot. It will be withdrawable when the crowdloan has",
                            "ended and the funds are unused."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 338,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 339
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 339,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 339,
            "path": [
                "sp_runtime",
                "MultiSigner"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Ed25519",
                        "fields": [
                            {
                                "type": 1,
                                "typeName": "ed25519::Public",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Sr25519",
                        "fields": [
                            {
                                "type": 1,
                                "typeName": "sr25519::Public",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Ecdsa",
                        "fields": [
                            {
                                "type": 139,
                                "typeName": "ecdsa::Public",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 340,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 341
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 341,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 341,
            "path": [
                "sp_runtime",
                "MultiSignature"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Ed25519",
                        "fields": [
                            {
                                "type": 146,
                                "typeName": "ed25519::Signature",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Sr25519",
                        "fields": [
                            {
                                "type": 146,
                                "typeName": "sr25519::Signature",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Ecdsa",
                        "fields": [
                            {
                                "type": 182,
                                "typeName": "ecdsa::Signature",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 342,
            "path": [
                "polkadot_runtime_parachains",
                "coretime",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "request_core_count",
                        "fields": [
                            {
                                "name": "count",
                                "type": 91,
                                "typeName": "u16",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Request the configuration to be updated with the specified number of cores. Warning:",
                            "Since this only schedules a configuration update, it takes two sessions to come into",
                            "effect.",
                            "",
                            "- `origin`: Root or the Coretime Chain",
                            "- `count`: total number of cores"
                        ]
                    },
                    {
                        "name": "request_revenue_at",
                        "fields": [
                            {
                                "name": "when",
                                "type": 4,
                                "typeName": "BlockNumber",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Request to claim the instantaneous coretime sales revenue starting from the block it was",
                            "last claimed until and up to the block specified. The claimed amount value is sent back",
                            "to the Coretime chain in a `notify_revenue` message. At the same time, the amount is",
                            "teleported to the Coretime chain."
                        ]
                    },
                    {
                        "name": "assign_core",
                        "fields": [
                            {
                                "name": "core",
                                "type": 91,
                                "typeName": "BrokerCoreIndex",
                                "docs": []
                            },
                            {
                                "name": "begin",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            },
                            {
                                "name": "assignment",
                                "type": 343,
                                "typeName": "Vec<(CoreAssignment, PartsOf57600)>",
                                "docs": []
                            },
                            {
                                "name": "end_hint",
                                "type": 152,
                                "typeName": "Option<BlockNumberFor<T>>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Receive instructions from the `ExternalBrokerOrigin`, detailing how a specific core is",
                            "to be used.",
                            "",
                            "Parameters:",
                            "-`origin`: The `ExternalBrokerOrigin`, assumed to be the coretime chain.",
                            "-`core`: The core that should be scheduled.",
                            "-`begin`: The starting blockheight of the instruction.",
                            "-`assignment`: How the blockspace should be utilised.",
                            "-`end_hint`: An optional hint as to when this particular set of instructions will end."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 343,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 344
            },
            "docs": []
        },
        {
            "id": 344,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    345,
                    346
                ]
            },
            "docs": []
        },
        {
            "id": 345,
            "path": [
                "pallet_broker",
                "coretime_interface",
                "CoreAssignment"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Idle",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Pool",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Task",
                        "fields": [
                            {
                                "type": 4,
                                "typeName": "TaskId",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 346,
            "path": [
                "polkadot_runtime_parachains",
                "assigner_coretime",
                "PartsOf57600"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 91,
                        "typeName": "u16",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 347,
            "path": [
                "pallet_state_trie_migration",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "control_auto_migration",
                        "fields": [
                            {
                                "name": "maybe_config",
                                "type": 348,
                                "typeName": "Option<MigrationLimits>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Control the automatic migration.",
                            "",
                            "The dispatch origin of this call must be [`Config::ControlOrigin`]."
                        ]
                    },
                    {
                        "name": "continue_migrate",
                        "fields": [
                            {
                                "name": "limits",
                                "type": 349,
                                "typeName": "MigrationLimits",
                                "docs": []
                            },
                            {
                                "name": "real_size_upper",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "witness_task",
                                "type": 350,
                                "typeName": "MigrationTask<T>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Continue the migration for the given `limits`.",
                            "",
                            "The dispatch origin of this call can be any signed account.",
                            "",
                            "This transaction has NO MONETARY INCENTIVES. calling it will not reward anyone. Albeit,",
                            "Upon successful execution, the transaction fee is returned.",
                            "",
                            "The (potentially over-estimated) of the byte length of all the data read must be",
                            "provided for up-front fee-payment and weighing. In essence, the caller is guaranteeing",
                            "that executing the current `MigrationTask` with the given `limits` will not exceed",
                            "`real_size_upper` bytes of read data.",
                            "",
                            "The `witness_task` is merely a helper to prevent the caller from being slashed or",
                            "generally trigger a migration that they do not intend. This parameter is just a message",
                            "from caller, saying that they believed `witness_task` was the last state of the",
                            "migration, and they only wish for their transaction to do anything, if this assumption",
                            "holds. In case `witness_task` does not match, the transaction fails.",
                            "",
                            "Based on the documentation of [`MigrationTask::migrate_until_exhaustion`], the",
                            "recommended way of doing this is to pass a `limit` that only bounds `count`, as the",
                            "`size` limit can always be overwritten."
                        ]
                    },
                    {
                        "name": "migrate_custom_top",
                        "fields": [
                            {
                                "name": "keys",
                                "type": 97,
                                "typeName": "Vec<Vec<u8>>",
                                "docs": []
                            },
                            {
                                "name": "witness_size",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Migrate the list of top keys by iterating each of them one by one.",
                            "",
                            "This does not affect the global migration process tracker ([`MigrationProcess`]), and",
                            "should only be used in case any keys are leftover due to a bug."
                        ]
                    },
                    {
                        "name": "migrate_custom_child",
                        "fields": [
                            {
                                "name": "root",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            },
                            {
                                "name": "child_keys",
                                "type": 97,
                                "typeName": "Vec<Vec<u8>>",
                                "docs": []
                            },
                            {
                                "name": "total_size",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Migrate the list of child keys by iterating each of them one by one.",
                            "",
                            "All of the given child keys must be present under one `child_root`.",
                            "",
                            "This does not affect the global migration process tracker ([`MigrationProcess`]), and",
                            "should only be used in case any keys are leftover due to a bug."
                        ]
                    },
                    {
                        "name": "set_signed_max_limits",
                        "fields": [
                            {
                                "name": "limits",
                                "type": 349,
                                "typeName": "MigrationLimits",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Set the maximum limit of the signed migration."
                        ]
                    },
                    {
                        "name": "force_set_progress",
                        "fields": [
                            {
                                "name": "progress_top",
                                "type": 351,
                                "typeName": "ProgressOf<T>",
                                "docs": []
                            },
                            {
                                "name": "progress_child",
                                "type": 351,
                                "typeName": "ProgressOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "Forcefully set the progress the running migration.",
                            "",
                            "This is only useful in one case: the next key to migrate is too big to be migrated with",
                            "a signed account, in a parachain context, and we simply want to skip it. A reasonable",
                            "example of this would be `:code:`, which is both very expensive to migrate, and commonly",
                            "used, so probably it is already migrated.",
                            "",
                            "In case you mess things up, you can also, in principle, use this to reset the migration",
                            "process."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 348,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 349
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 349,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 349,
            "path": [
                "pallet_state_trie_migration",
                "pallet",
                "MigrationLimits"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "size",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "item",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 350,
            "path": [
                "pallet_state_trie_migration",
                "pallet",
                "MigrationTask"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "progress_top",
                        "type": 351,
                        "typeName": "ProgressOf<T>",
                        "docs": []
                    },
                    {
                        "name": "progress_child",
                        "type": 351,
                        "typeName": "ProgressOf<T>",
                        "docs": []
                    },
                    {
                        "name": "size",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "top_items",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "child_items",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 351,
            "path": [
                "pallet_state_trie_migration",
                "pallet",
                "Progress"
            ],
            "params": [
                {
                    "name": "MaxKeyLen"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "ToStart",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "LastKey",
                        "fields": [
                            {
                                "type": 352,
                                "typeName": "BoundedVec<u8, MaxKeyLen>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Complete",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 352,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 2
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 14,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 353,
            "path": [
                "pallet_xcm",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "send",
                        "fields": [
                            {
                                "name": "dest",
                                "type": 81,
                                "typeName": "Box<VersionedLocation>",
                                "docs": []
                            },
                            {
                                "name": "message",
                                "type": 354,
                                "typeName": "Box<VersionedXcm<()>>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "teleport_assets",
                        "fields": [
                            {
                                "name": "dest",
                                "type": 81,
                                "typeName": "Box<VersionedLocation>",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 81,
                                "typeName": "Box<VersionedLocation>",
                                "docs": []
                            },
                            {
                                "name": "assets",
                                "type": 418,
                                "typeName": "Box<VersionedAssets>",
                                "docs": []
                            },
                            {
                                "name": "fee_asset_item",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Teleport some assets from the local chain to some destination chain.",
                            "",
                            "**This function is deprecated: Use `limited_teleport_assets` instead.**",
                            "",
                            "Fee payment on the destination side is made from the asset in the `assets` vector of",
                            "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                            "with all fees taken as needed from the asset.",
                            "",
                            "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                            "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                            "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                            "  relay to parachain.",
                            "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                            "  generally be an `AccountId32` value.",
                            "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                            "  fee on the `dest` chain.",
                            "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                            "  fees."
                        ]
                    },
                    {
                        "name": "reserve_transfer_assets",
                        "fields": [
                            {
                                "name": "dest",
                                "type": 81,
                                "typeName": "Box<VersionedLocation>",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 81,
                                "typeName": "Box<VersionedLocation>",
                                "docs": []
                            },
                            {
                                "name": "assets",
                                "type": 418,
                                "typeName": "Box<VersionedAssets>",
                                "docs": []
                            },
                            {
                                "name": "fee_asset_item",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Transfer some assets from the local chain to the destination chain through their local,",
                            "destination or remote reserve.",
                            "",
                            "`assets` must have same reserve location and may not be teleportable to `dest`.",
                            " - `assets` have local reserve: transfer assets to sovereign account of destination",
                            "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
                            "   assets to `beneficiary`.",
                            " - `assets` have destination reserve: burn local assets and forward a notification to",
                            "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
                            "   deposit them to `beneficiary`.",
                            " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move",
                            "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`",
                            "   to mint and deposit reserve-based assets to `beneficiary`.",
                            "",
                            "**This function is deprecated: Use `limited_reserve_transfer_assets` instead.**",
                            "",
                            "Fee payment on the destination side is made from the asset in the `assets` vector of",
                            "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                            "with all fees taken as needed from the asset.",
                            "",
                            "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                            "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                            "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                            "  relay to parachain.",
                            "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                            "  generally be an `AccountId32` value.",
                            "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                            "  fee on the `dest` (and possibly reserve) chains.",
                            "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                            "  fees."
                        ]
                    },
                    {
                        "name": "execute",
                        "fields": [
                            {
                                "name": "message",
                                "type": 419,
                                "typeName": "Box<VersionedXcm<<T as Config>::RuntimeCall>>",
                                "docs": []
                            },
                            {
                                "name": "max_weight",
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Execute an XCM message from a local, signed, origin.",
                            "",
                            "An event is deposited indicating whether `msg` could be executed completely or only",
                            "partially.",
                            "",
                            "No more than `max_weight` will be used in its attempted execution. If this is less than",
                            "the maximum amount of weight that the message could take to be executed, then no",
                            "execution attempt will be made."
                        ]
                    },
                    {
                        "name": "force_xcm_version",
                        "fields": [
                            {
                                "name": "location",
                                "type": 67,
                                "typeName": "Box<Location>",
                                "docs": []
                            },
                            {
                                "name": "version",
                                "type": 4,
                                "typeName": "XcmVersion",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Extoll that a particular destination can be communicated with through a particular",
                            "version of XCM.",
                            "",
                            "- `origin`: Must be an origin specified by AdminOrigin.",
                            "- `location`: The destination that is being described.",
                            "- `xcm_version`: The latest version of XCM that `location` supports."
                        ]
                    },
                    {
                        "name": "force_default_xcm_version",
                        "fields": [
                            {
                                "name": "maybe_xcm_version",
                                "type": 152,
                                "typeName": "Option<XcmVersion>",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
                            "version a destination can accept is unknown).",
                            "",
                            "- `origin`: Must be an origin specified by AdminOrigin.",
                            "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
                        ]
                    },
                    {
                        "name": "force_subscribe_version_notify",
                        "fields": [
                            {
                                "name": "location",
                                "type": 81,
                                "typeName": "Box<VersionedLocation>",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "Ask a location to notify us regarding their XCM version and any changes to it.",
                            "",
                            "- `origin`: Must be an origin specified by AdminOrigin.",
                            "- `location`: The location to which we should subscribe for XCM version notifications."
                        ]
                    },
                    {
                        "name": "force_unsubscribe_version_notify",
                        "fields": [
                            {
                                "name": "location",
                                "type": 81,
                                "typeName": "Box<VersionedLocation>",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "Require that a particular destination should no longer notify us regarding any XCM",
                            "version changes.",
                            "",
                            "- `origin`: Must be an origin specified by AdminOrigin.",
                            "- `location`: The location to which we are currently subscribed for XCM version",
                            "  notifications which we no longer desire."
                        ]
                    },
                    {
                        "name": "limited_reserve_transfer_assets",
                        "fields": [
                            {
                                "name": "dest",
                                "type": 81,
                                "typeName": "Box<VersionedLocation>",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 81,
                                "typeName": "Box<VersionedLocation>",
                                "docs": []
                            },
                            {
                                "name": "assets",
                                "type": 418,
                                "typeName": "Box<VersionedAssets>",
                                "docs": []
                            },
                            {
                                "name": "fee_asset_item",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "weight_limit",
                                "type": 399,
                                "typeName": "WeightLimit",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": [
                            "Transfer some assets from the local chain to the destination chain through their local,",
                            "destination or remote reserve.",
                            "",
                            "`assets` must have same reserve location and may not be teleportable to `dest`.",
                            " - `assets` have local reserve: transfer assets to sovereign account of destination",
                            "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
                            "   assets to `beneficiary`.",
                            " - `assets` have destination reserve: burn local assets and forward a notification to",
                            "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
                            "   deposit them to `beneficiary`.",
                            " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move",
                            "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`",
                            "   to mint and deposit reserve-based assets to `beneficiary`.",
                            "",
                            "Fee payment on the destination side is made from the asset in the `assets` vector of",
                            "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                            "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
                            "at risk.",
                            "",
                            "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                            "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                            "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                            "  relay to parachain.",
                            "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                            "  generally be an `AccountId32` value.",
                            "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                            "  fee on the `dest` (and possibly reserve) chains.",
                            "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                            "  fees.",
                            "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                        ]
                    },
                    {
                        "name": "limited_teleport_assets",
                        "fields": [
                            {
                                "name": "dest",
                                "type": 81,
                                "typeName": "Box<VersionedLocation>",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 81,
                                "typeName": "Box<VersionedLocation>",
                                "docs": []
                            },
                            {
                                "name": "assets",
                                "type": 418,
                                "typeName": "Box<VersionedAssets>",
                                "docs": []
                            },
                            {
                                "name": "fee_asset_item",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "weight_limit",
                                "type": 399,
                                "typeName": "WeightLimit",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": [
                            "Teleport some assets from the local chain to some destination chain.",
                            "",
                            "Fee payment on the destination side is made from the asset in the `assets` vector of",
                            "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                            "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
                            "at risk.",
                            "",
                            "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                            "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                            "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                            "  relay to parachain.",
                            "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                            "  generally be an `AccountId32` value.",
                            "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                            "  fee on the `dest` chain.",
                            "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                            "  fees.",
                            "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                        ]
                    },
                    {
                        "name": "force_suspension",
                        "fields": [
                            {
                                "name": "suspended",
                                "type": 8,
                                "typeName": "bool",
                                "docs": []
                            }
                        ],
                        "index": 10,
                        "docs": [
                            "Set or unset the global suspension state of the XCM executor.",
                            "",
                            "- `origin`: Must be an origin specified by AdminOrigin.",
                            "- `suspended`: `true` to suspend, `false` to resume."
                        ]
                    },
                    {
                        "name": "transfer_assets",
                        "fields": [
                            {
                                "name": "dest",
                                "type": 81,
                                "typeName": "Box<VersionedLocation>",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 81,
                                "typeName": "Box<VersionedLocation>",
                                "docs": []
                            },
                            {
                                "name": "assets",
                                "type": 418,
                                "typeName": "Box<VersionedAssets>",
                                "docs": []
                            },
                            {
                                "name": "fee_asset_item",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "weight_limit",
                                "type": 399,
                                "typeName": "WeightLimit",
                                "docs": []
                            }
                        ],
                        "index": 11,
                        "docs": [
                            "Transfer some assets from the local chain to the destination chain through their local,",
                            "destination or remote reserve, or through teleports.",
                            "",
                            "Fee payment on the destination side is made from the asset in the `assets` vector of",
                            "index `fee_asset_item` (hence referred to as `fees`), up to enough to pay for",
                            "`weight_limit` of weight. If more weight is needed than `weight_limit`, then the",
                            "operation will fail and the sent assets may be at risk.",
                            "",
                            "`assets` (excluding `fees`) must have same reserve location or otherwise be teleportable",
                            "to `dest`, no limitations imposed on `fees`.",
                            " - for local reserve: transfer assets to sovereign account of destination chain and",
                            "   forward a notification XCM to `dest` to mint and deposit reserve-based assets to",
                            "   `beneficiary`.",
                            " - for destination reserve: burn local assets and forward a notification to `dest` chain",
                            "   to withdraw the reserve assets from this chain's sovereign account and deposit them",
                            "   to `beneficiary`.",
                            " - for remote reserve: burn local assets, forward XCM to reserve chain to move reserves",
                            "   from this chain's SA to `dest` chain's SA, and forward another XCM to `dest` to mint",
                            "   and deposit reserve-based assets to `beneficiary`.",
                            " - for teleports: burn local assets and forward XCM to `dest` chain to mint/teleport",
                            "   assets and deposit them to `beneficiary`.",
                            "",
                            "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                            "- `dest`: Destination context for the assets. Will typically be `X2(Parent,",
                            "  Parachain(..))` to send from parachain to parachain, or `X1(Parachain(..))` to send",
                            "  from relay to parachain.",
                            "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                            "  generally be an `AccountId32` value.",
                            "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                            "  fee on the `dest` (and possibly reserve) chains.",
                            "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                            "  fees.",
                            "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                        ]
                    },
                    {
                        "name": "claim_assets",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 418,
                                "typeName": "Box<VersionedAssets>",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 81,
                                "typeName": "Box<VersionedLocation>",
                                "docs": []
                            }
                        ],
                        "index": 12,
                        "docs": [
                            "Claims assets trapped on this pallet because of leftover assets during XCM execution.",
                            "",
                            "- `origin`: Anyone can call this extrinsic.",
                            "- `assets`: The exact assets that were trapped. Use the version to specify what version",
                            "was the latest when they were trapped.",
                            "- `beneficiary`: The location/account where the claimed assets will be deposited."
                        ]
                    },
                    {
                        "name": "transfer_assets_using_type_and_then",
                        "fields": [
                            {
                                "name": "dest",
                                "type": 81,
                                "typeName": "Box<VersionedLocation>",
                                "docs": []
                            },
                            {
                                "name": "assets",
                                "type": 418,
                                "typeName": "Box<VersionedAssets>",
                                "docs": []
                            },
                            {
                                "name": "assets_transfer_type",
                                "type": 430,
                                "typeName": "Box<TransferType>",
                                "docs": []
                            },
                            {
                                "name": "remote_fees_id",
                                "type": 431,
                                "typeName": "Box<VersionedAssetId>",
                                "docs": []
                            },
                            {
                                "name": "fees_transfer_type",
                                "type": 430,
                                "typeName": "Box<TransferType>",
                                "docs": []
                            },
                            {
                                "name": "custom_xcm_on_dest",
                                "type": 354,
                                "typeName": "Box<VersionedXcm<()>>",
                                "docs": []
                            },
                            {
                                "name": "weight_limit",
                                "type": 399,
                                "typeName": "WeightLimit",
                                "docs": []
                            }
                        ],
                        "index": 13,
                        "docs": [
                            "Transfer assets from the local chain to the destination chain using explicit transfer",
                            "types for assets and fees.",
                            "",
                            "`assets` must have same reserve location or may be teleportable to `dest`. Caller must",
                            "provide the `assets_transfer_type` to be used for `assets`:",
                            " - `TransferType::LocalReserve`: transfer assets to sovereign account of destination",
                            "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
                            "   assets to `beneficiary`.",
                            " - `TransferType::DestinationReserve`: burn local assets and forward a notification to",
                            "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
                            "   deposit them to `beneficiary`.",
                            " - `TransferType::RemoteReserve(reserve)`: burn local assets, forward XCM to `reserve`",
                            "   chain to move reserves from this chain's SA to `dest` chain's SA, and forward another",
                            "   XCM to `dest` to mint and deposit reserve-based assets to `beneficiary`. Typically",
                            "   the remote `reserve` is Asset Hub.",
                            " - `TransferType::Teleport`: burn local assets and forward XCM to `dest` chain to",
                            "   mint/teleport assets and deposit them to `beneficiary`.",
                            "",
                            "On the destination chain, as well as any intermediary hops, `BuyExecution` is used to",
                            "buy execution using transferred `assets` identified by `remote_fees_id`.",
                            "Make sure enough of the specified `remote_fees_id` asset is included in the given list",
                            "of `assets`. `remote_fees_id` should be enough to pay for `weight_limit`. If more weight",
                            "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
                            "at risk.",
                            "",
                            "`remote_fees_id` may use different transfer type than rest of `assets` and can be",
                            "specified through `fees_transfer_type`.",
                            "",
                            "The caller needs to specify what should happen to the transferred assets once they reach",
                            "the `dest` chain. This is done through the `custom_xcm_on_dest` parameter, which",
                            "contains the instructions to execute on `dest` as a final step.",
                            "  This is usually as simple as:",
                            "  `Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])`,",
                            "  but could be something more exotic like sending the `assets` even further.",
                            "",
                            "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                            "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                            "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                            "  relay to parachain, or `(parents: 2, (GlobalConsensus(..), ..))` to send from",
                            "  parachain across a bridge to another ecosystem destination.",
                            "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                            "  fee on the `dest` (and possibly reserve) chains.",
                            "- `assets_transfer_type`: The XCM `TransferType` used to transfer the `assets`.",
                            "- `remote_fees_id`: One of the included `assets` to be used to pay fees.",
                            "- `fees_transfer_type`: The XCM `TransferType` used to transfer the `fees` assets.",
                            "- `custom_xcm_on_dest`: The XCM to be executed on `dest` chain as the last step of the",
                            "  transfer, which also determines what happens to the assets on the destination chain.",
                            "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 354,
            "path": [
                "xcm",
                "VersionedXcm"
            ],
            "params": [
                {
                    "name": "RuntimeCall"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "V2",
                        "fields": [
                            {
                                "type": 355,
                                "typeName": "v2::Xcm<RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "V3",
                        "fields": [
                            {
                                "type": 375,
                                "typeName": "v3::Xcm<RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "V4",
                        "fields": [
                            {
                                "type": 400,
                                "typeName": "v4::Xcm<RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 355,
            "path": [
                "xcm",
                "v2",
                "Xcm"
            ],
            "params": [
                {
                    "name": "RuntimeCall"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 356,
                        "typeName": "Vec<Instruction<RuntimeCall>>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 356,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 357
            },
            "docs": []
        },
        {
            "id": 357,
            "path": [
                "xcm",
                "v2",
                "Instruction"
            ],
            "params": [
                {
                    "name": "RuntimeCall"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "WithdrawAsset",
                        "fields": [
                            {
                                "type": 358,
                                "typeName": "MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "ReserveAssetDeposited",
                        "fields": [
                            {
                                "type": 358,
                                "typeName": "MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "ReceiveTeleportedAsset",
                        "fields": [
                            {
                                "type": 358,
                                "typeName": "MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "QueryResponse",
                        "fields": [
                            {
                                "name": "query_id",
                                "type": 11,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "response",
                                "type": 365,
                                "typeName": "Response",
                                "docs": []
                            },
                            {
                                "name": "max_weight",
                                "type": 11,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "TransferAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 358,
                                "typeName": "MultiAssets",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 82,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "TransferReserveAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 358,
                                "typeName": "MultiAssets",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 82,
                                "typeName": "MultiLocation",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 355,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "Transact",
                        "fields": [
                            {
                                "name": "origin_type",
                                "type": 369,
                                "typeName": "OriginKind",
                                "docs": []
                            },
                            {
                                "name": "require_weight_at_most",
                                "type": 11,
                                "typeName": "u64",
                                "docs": []
                            },
                            {
                                "name": "call",
                                "type": 370,
                                "typeName": "DoubleEncoded<RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "HrmpNewChannelOpenRequest",
                        "fields": [
                            {
                                "name": "sender",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "max_message_size",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "max_capacity",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "HrmpChannelAccepted",
                        "fields": [
                            {
                                "name": "recipient",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": []
                    },
                    {
                        "name": "HrmpChannelClosing",
                        "fields": [
                            {
                                "name": "initiator",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "sender",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "recipient",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": []
                    },
                    {
                        "name": "ClearOrigin",
                        "fields": [],
                        "index": 10,
                        "docs": []
                    },
                    {
                        "name": "DescendOrigin",
                        "fields": [
                            {
                                "type": 83,
                                "typeName": "InteriorMultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 11,
                        "docs": []
                    },
                    {
                        "name": "ReportError",
                        "fields": [
                            {
                                "name": "query_id",
                                "type": 11,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 82,
                                "typeName": "MultiLocation",
                                "docs": []
                            },
                            {
                                "name": "max_response_weight",
                                "type": 11,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 12,
                        "docs": []
                    },
                    {
                        "name": "DepositAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 371,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            },
                            {
                                "name": "max_assets",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 82,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 13,
                        "docs": []
                    },
                    {
                        "name": "DepositReserveAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 371,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            },
                            {
                                "name": "max_assets",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 82,
                                "typeName": "MultiLocation",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 355,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 14,
                        "docs": []
                    },
                    {
                        "name": "ExchangeAsset",
                        "fields": [
                            {
                                "name": "give",
                                "type": 371,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            },
                            {
                                "name": "receive",
                                "type": 358,
                                "typeName": "MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 15,
                        "docs": []
                    },
                    {
                        "name": "InitiateReserveWithdraw",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 371,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            },
                            {
                                "name": "reserve",
                                "type": 82,
                                "typeName": "MultiLocation",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 355,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 16,
                        "docs": []
                    },
                    {
                        "name": "InitiateTeleport",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 371,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 82,
                                "typeName": "MultiLocation",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 355,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 17,
                        "docs": []
                    },
                    {
                        "name": "QueryHolding",
                        "fields": [
                            {
                                "name": "query_id",
                                "type": 11,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 82,
                                "typeName": "MultiLocation",
                                "docs": []
                            },
                            {
                                "name": "assets",
                                "type": 371,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            },
                            {
                                "name": "max_response_weight",
                                "type": 11,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 18,
                        "docs": []
                    },
                    {
                        "name": "BuyExecution",
                        "fields": [
                            {
                                "name": "fees",
                                "type": 360,
                                "typeName": "MultiAsset",
                                "docs": []
                            },
                            {
                                "name": "weight_limit",
                                "type": 374,
                                "typeName": "WeightLimit",
                                "docs": []
                            }
                        ],
                        "index": 19,
                        "docs": []
                    },
                    {
                        "name": "RefundSurplus",
                        "fields": [],
                        "index": 20,
                        "docs": []
                    },
                    {
                        "name": "SetErrorHandler",
                        "fields": [
                            {
                                "type": 355,
                                "typeName": "Xcm<RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 21,
                        "docs": []
                    },
                    {
                        "name": "SetAppendix",
                        "fields": [
                            {
                                "type": 355,
                                "typeName": "Xcm<RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 22,
                        "docs": []
                    },
                    {
                        "name": "ClearError",
                        "fields": [],
                        "index": 23,
                        "docs": []
                    },
                    {
                        "name": "ClaimAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 358,
                                "typeName": "MultiAssets",
                                "docs": []
                            },
                            {
                                "name": "ticket",
                                "type": 82,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 24,
                        "docs": []
                    },
                    {
                        "name": "Trap",
                        "fields": [
                            {
                                "type": 11,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 25,
                        "docs": []
                    },
                    {
                        "name": "SubscribeVersion",
                        "fields": [
                            {
                                "name": "query_id",
                                "type": 11,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "max_response_weight",
                                "type": 11,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 26,
                        "docs": []
                    },
                    {
                        "name": "UnsubscribeVersion",
                        "fields": [],
                        "index": 27,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 358,
            "path": [
                "xcm",
                "v2",
                "multiasset",
                "MultiAssets"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 359,
                        "typeName": "Vec<MultiAsset>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 359,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 360
            },
            "docs": []
        },
        {
            "id": 360,
            "path": [
                "xcm",
                "v2",
                "multiasset",
                "MultiAsset"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "id",
                        "type": 361,
                        "typeName": "AssetId",
                        "docs": []
                    },
                    {
                        "name": "fun",
                        "type": 362,
                        "typeName": "Fungibility",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 361,
            "path": [
                "xcm",
                "v2",
                "multiasset",
                "AssetId"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Concrete",
                        "fields": [
                            {
                                "type": 82,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Abstract",
                        "fields": [
                            {
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 362,
            "path": [
                "xcm",
                "v2",
                "multiasset",
                "Fungibility"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Fungible",
                        "fields": [
                            {
                                "type": 63,
                                "typeName": "u128",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "NonFungible",
                        "fields": [
                            {
                                "type": 363,
                                "typeName": "AssetInstance",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 363,
            "path": [
                "xcm",
                "v2",
                "multiasset",
                "AssetInstance"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Undefined",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Index",
                        "fields": [
                            {
                                "type": 63,
                                "typeName": "u128",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Array4",
                        "fields": [
                            {
                                "type": 18,
                                "typeName": "[u8; 4]",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Array8",
                        "fields": [
                            {
                                "type": 364,
                                "typeName": "[u8; 8]",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "Array16",
                        "fields": [
                            {
                                "type": 48,
                                "typeName": "[u8; 16]",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "Array32",
                        "fields": [
                            {
                                "type": 1,
                                "typeName": "[u8; 32]",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "Blob",
                        "fields": [
                            {
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 364,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 8,
                    "type": 2
                }
            },
            "docs": []
        },
        {
            "id": 365,
            "path": [
                "xcm",
                "v2",
                "Response"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Null",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Assets",
                        "fields": [
                            {
                                "type": 358,
                                "typeName": "MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "ExecutionResult",
                        "fields": [
                            {
                                "type": 366,
                                "typeName": "Option<(u32, Error)>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Version",
                        "fields": [
                            {
                                "type": 4,
                                "typeName": "super::Version",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 366,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 367
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 367,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 367,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    4,
                    368
                ]
            },
            "docs": []
        },
        {
            "id": 368,
            "path": [
                "xcm",
                "v2",
                "traits",
                "Error"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Overflow",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Unimplemented",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "UntrustedReserveLocation",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "UntrustedTeleportLocation",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "MultiLocationFull",
                        "fields": [],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "MultiLocationNotInvertible",
                        "fields": [],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "BadOrigin",
                        "fields": [],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "InvalidLocation",
                        "fields": [],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "AssetNotFound",
                        "fields": [],
                        "index": 8,
                        "docs": []
                    },
                    {
                        "name": "FailedToTransactAsset",
                        "fields": [],
                        "index": 9,
                        "docs": []
                    },
                    {
                        "name": "NotWithdrawable",
                        "fields": [],
                        "index": 10,
                        "docs": []
                    },
                    {
                        "name": "LocationCannotHold",
                        "fields": [],
                        "index": 11,
                        "docs": []
                    },
                    {
                        "name": "ExceedsMaxMessageSize",
                        "fields": [],
                        "index": 12,
                        "docs": []
                    },
                    {
                        "name": "DestinationUnsupported",
                        "fields": [],
                        "index": 13,
                        "docs": []
                    },
                    {
                        "name": "Transport",
                        "fields": [],
                        "index": 14,
                        "docs": []
                    },
                    {
                        "name": "Unroutable",
                        "fields": [],
                        "index": 15,
                        "docs": []
                    },
                    {
                        "name": "UnknownClaim",
                        "fields": [],
                        "index": 16,
                        "docs": []
                    },
                    {
                        "name": "FailedToDecode",
                        "fields": [],
                        "index": 17,
                        "docs": []
                    },
                    {
                        "name": "MaxWeightInvalid",
                        "fields": [],
                        "index": 18,
                        "docs": []
                    },
                    {
                        "name": "NotHoldingFees",
                        "fields": [],
                        "index": 19,
                        "docs": []
                    },
                    {
                        "name": "TooExpensive",
                        "fields": [],
                        "index": 20,
                        "docs": []
                    },
                    {
                        "name": "Trap",
                        "fields": [
                            {
                                "type": 12,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 21,
                        "docs": []
                    },
                    {
                        "name": "UnhandledXcmVersion",
                        "fields": [],
                        "index": 22,
                        "docs": []
                    },
                    {
                        "name": "WeightLimitReached",
                        "fields": [
                            {
                                "type": 12,
                                "typeName": "Weight",
                                "docs": []
                            }
                        ],
                        "index": 23,
                        "docs": []
                    },
                    {
                        "name": "Barrier",
                        "fields": [],
                        "index": 24,
                        "docs": []
                    },
                    {
                        "name": "WeightNotComputable",
                        "fields": [],
                        "index": 25,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 369,
            "path": [
                "xcm",
                "v2",
                "OriginKind"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Native",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "SovereignAccount",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Superuser",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Xcm",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 370,
            "path": [
                "xcm",
                "double_encoded",
                "DoubleEncoded"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "encoded",
                        "type": 14,
                        "typeName": "Vec<u8>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 371,
            "path": [
                "xcm",
                "v2",
                "multiasset",
                "MultiAssetFilter"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Definite",
                        "fields": [
                            {
                                "type": 358,
                                "typeName": "MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Wild",
                        "fields": [
                            {
                                "type": 372,
                                "typeName": "WildMultiAsset",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 372,
            "path": [
                "xcm",
                "v2",
                "multiasset",
                "WildMultiAsset"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "All",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "AllOf",
                        "fields": [
                            {
                                "name": "id",
                                "type": 361,
                                "typeName": "AssetId",
                                "docs": []
                            },
                            {
                                "name": "fun",
                                "type": 373,
                                "typeName": "WildFungibility",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 373,
            "path": [
                "xcm",
                "v2",
                "multiasset",
                "WildFungibility"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Fungible",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "NonFungible",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 374,
            "path": [
                "xcm",
                "v2",
                "WeightLimit"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Unlimited",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Limited",
                        "fields": [
                            {
                                "type": 11,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 375,
            "path": [
                "xcm",
                "v3",
                "Xcm"
            ],
            "params": [
                {
                    "name": "Call"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 376,
                        "typeName": "Vec<Instruction<Call>>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 376,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 377
            },
            "docs": []
        },
        {
            "id": 377,
            "path": [
                "xcm",
                "v3",
                "Instruction"
            ],
            "params": [
                {
                    "name": "Call"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "WithdrawAsset",
                        "fields": [
                            {
                                "type": 378,
                                "typeName": "MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "ReserveAssetDeposited",
                        "fields": [
                            {
                                "type": 378,
                                "typeName": "MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "ReceiveTeleportedAsset",
                        "fields": [
                            {
                                "type": 378,
                                "typeName": "MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "QueryResponse",
                        "fields": [
                            {
                                "name": "query_id",
                                "type": 11,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "response",
                                "type": 383,
                                "typeName": "Response",
                                "docs": []
                            },
                            {
                                "name": "max_weight",
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            },
                            {
                                "name": "querier",
                                "type": 393,
                                "typeName": "Option<MultiLocation>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "TransferAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 378,
                                "typeName": "MultiAssets",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "TransferReserveAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 378,
                                "typeName": "MultiAssets",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 375,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "Transact",
                        "fields": [
                            {
                                "name": "origin_kind",
                                "type": 394,
                                "typeName": "OriginKind",
                                "docs": []
                            },
                            {
                                "name": "require_weight_at_most",
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            },
                            {
                                "name": "call",
                                "type": 370,
                                "typeName": "DoubleEncoded<Call>",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "HrmpNewChannelOpenRequest",
                        "fields": [
                            {
                                "name": "sender",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "max_message_size",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "max_capacity",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "HrmpChannelAccepted",
                        "fields": [
                            {
                                "name": "recipient",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": []
                    },
                    {
                        "name": "HrmpChannelClosing",
                        "fields": [
                            {
                                "name": "initiator",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "sender",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "recipient",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": []
                    },
                    {
                        "name": "ClearOrigin",
                        "fields": [],
                        "index": 10,
                        "docs": []
                    },
                    {
                        "name": "DescendOrigin",
                        "fields": [
                            {
                                "type": 57,
                                "typeName": "InteriorMultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 11,
                        "docs": []
                    },
                    {
                        "name": "ReportError",
                        "fields": [
                            {
                                "type": 395,
                                "typeName": "QueryResponseInfo",
                                "docs": []
                            }
                        ],
                        "index": 12,
                        "docs": []
                    },
                    {
                        "name": "DepositAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 396,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 13,
                        "docs": []
                    },
                    {
                        "name": "DepositReserveAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 396,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 375,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 14,
                        "docs": []
                    },
                    {
                        "name": "ExchangeAsset",
                        "fields": [
                            {
                                "name": "give",
                                "type": 396,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            },
                            {
                                "name": "want",
                                "type": 378,
                                "typeName": "MultiAssets",
                                "docs": []
                            },
                            {
                                "name": "maximal",
                                "type": 8,
                                "typeName": "bool",
                                "docs": []
                            }
                        ],
                        "index": 15,
                        "docs": []
                    },
                    {
                        "name": "InitiateReserveWithdraw",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 396,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            },
                            {
                                "name": "reserve",
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 375,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 16,
                        "docs": []
                    },
                    {
                        "name": "InitiateTeleport",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 396,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 375,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 17,
                        "docs": []
                    },
                    {
                        "name": "ReportHolding",
                        "fields": [
                            {
                                "name": "response_info",
                                "type": 395,
                                "typeName": "QueryResponseInfo",
                                "docs": []
                            },
                            {
                                "name": "assets",
                                "type": 396,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            }
                        ],
                        "index": 18,
                        "docs": []
                    },
                    {
                        "name": "BuyExecution",
                        "fields": [
                            {
                                "name": "fees",
                                "type": 380,
                                "typeName": "MultiAsset",
                                "docs": []
                            },
                            {
                                "name": "weight_limit",
                                "type": 399,
                                "typeName": "WeightLimit",
                                "docs": []
                            }
                        ],
                        "index": 19,
                        "docs": []
                    },
                    {
                        "name": "RefundSurplus",
                        "fields": [],
                        "index": 20,
                        "docs": []
                    },
                    {
                        "name": "SetErrorHandler",
                        "fields": [
                            {
                                "type": 375,
                                "typeName": "Xcm<Call>",
                                "docs": []
                            }
                        ],
                        "index": 21,
                        "docs": []
                    },
                    {
                        "name": "SetAppendix",
                        "fields": [
                            {
                                "type": 375,
                                "typeName": "Xcm<Call>",
                                "docs": []
                            }
                        ],
                        "index": 22,
                        "docs": []
                    },
                    {
                        "name": "ClearError",
                        "fields": [],
                        "index": 23,
                        "docs": []
                    },
                    {
                        "name": "ClaimAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 378,
                                "typeName": "MultiAssets",
                                "docs": []
                            },
                            {
                                "name": "ticket",
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 24,
                        "docs": []
                    },
                    {
                        "name": "Trap",
                        "fields": [
                            {
                                "type": 11,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 25,
                        "docs": []
                    },
                    {
                        "name": "SubscribeVersion",
                        "fields": [
                            {
                                "name": "query_id",
                                "type": 11,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "max_response_weight",
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            }
                        ],
                        "index": 26,
                        "docs": []
                    },
                    {
                        "name": "UnsubscribeVersion",
                        "fields": [],
                        "index": 27,
                        "docs": []
                    },
                    {
                        "name": "BurnAsset",
                        "fields": [
                            {
                                "type": 378,
                                "typeName": "MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 28,
                        "docs": []
                    },
                    {
                        "name": "ExpectAsset",
                        "fields": [
                            {
                                "type": 378,
                                "typeName": "MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 29,
                        "docs": []
                    },
                    {
                        "name": "ExpectOrigin",
                        "fields": [
                            {
                                "type": 393,
                                "typeName": "Option<MultiLocation>",
                                "docs": []
                            }
                        ],
                        "index": 30,
                        "docs": []
                    },
                    {
                        "name": "ExpectError",
                        "fields": [
                            {
                                "type": 384,
                                "typeName": "Option<(u32, Error)>",
                                "docs": []
                            }
                        ],
                        "index": 31,
                        "docs": []
                    },
                    {
                        "name": "ExpectTransactStatus",
                        "fields": [
                            {
                                "type": 391,
                                "typeName": "MaybeErrorCode",
                                "docs": []
                            }
                        ],
                        "index": 32,
                        "docs": []
                    },
                    {
                        "name": "QueryPallet",
                        "fields": [
                            {
                                "name": "module_name",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            },
                            {
                                "name": "response_info",
                                "type": 395,
                                "typeName": "QueryResponseInfo",
                                "docs": []
                            }
                        ],
                        "index": 33,
                        "docs": []
                    },
                    {
                        "name": "ExpectPallet",
                        "fields": [
                            {
                                "name": "index",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "name",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            },
                            {
                                "name": "module_name",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            },
                            {
                                "name": "crate_major",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "min_crate_minor",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 34,
                        "docs": []
                    },
                    {
                        "name": "ReportTransactStatus",
                        "fields": [
                            {
                                "type": 395,
                                "typeName": "QueryResponseInfo",
                                "docs": []
                            }
                        ],
                        "index": 35,
                        "docs": []
                    },
                    {
                        "name": "ClearTransactStatus",
                        "fields": [],
                        "index": 36,
                        "docs": []
                    },
                    {
                        "name": "UniversalOrigin",
                        "fields": [
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            }
                        ],
                        "index": 37,
                        "docs": []
                    },
                    {
                        "name": "ExportMessage",
                        "fields": [
                            {
                                "name": "network",
                                "type": 61,
                                "typeName": "NetworkId",
                                "docs": []
                            },
                            {
                                "name": "destination",
                                "type": 57,
                                "typeName": "InteriorMultiLocation",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 375,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 38,
                        "docs": []
                    },
                    {
                        "name": "LockAsset",
                        "fields": [
                            {
                                "name": "asset",
                                "type": 380,
                                "typeName": "MultiAsset",
                                "docs": []
                            },
                            {
                                "name": "unlocker",
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 39,
                        "docs": []
                    },
                    {
                        "name": "UnlockAsset",
                        "fields": [
                            {
                                "name": "asset",
                                "type": 380,
                                "typeName": "MultiAsset",
                                "docs": []
                            },
                            {
                                "name": "target",
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 40,
                        "docs": []
                    },
                    {
                        "name": "NoteUnlockable",
                        "fields": [
                            {
                                "name": "asset",
                                "type": 380,
                                "typeName": "MultiAsset",
                                "docs": []
                            },
                            {
                                "name": "owner",
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 41,
                        "docs": []
                    },
                    {
                        "name": "RequestUnlock",
                        "fields": [
                            {
                                "name": "asset",
                                "type": 380,
                                "typeName": "MultiAsset",
                                "docs": []
                            },
                            {
                                "name": "locker",
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 42,
                        "docs": []
                    },
                    {
                        "name": "SetFeesMode",
                        "fields": [
                            {
                                "name": "jit_withdraw",
                                "type": 8,
                                "typeName": "bool",
                                "docs": []
                            }
                        ],
                        "index": 43,
                        "docs": []
                    },
                    {
                        "name": "SetTopic",
                        "fields": [
                            {
                                "type": 1,
                                "typeName": "[u8; 32]",
                                "docs": []
                            }
                        ],
                        "index": 44,
                        "docs": []
                    },
                    {
                        "name": "ClearTopic",
                        "fields": [],
                        "index": 45,
                        "docs": []
                    },
                    {
                        "name": "AliasOrigin",
                        "fields": [
                            {
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 46,
                        "docs": []
                    },
                    {
                        "name": "UnpaidExecution",
                        "fields": [
                            {
                                "name": "weight_limit",
                                "type": 399,
                                "typeName": "WeightLimit",
                                "docs": []
                            },
                            {
                                "name": "check_origin",
                                "type": 393,
                                "typeName": "Option<MultiLocation>",
                                "docs": []
                            }
                        ],
                        "index": 47,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 378,
            "path": [
                "xcm",
                "v3",
                "multiasset",
                "MultiAssets"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 379,
                        "typeName": "Vec<MultiAsset>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 379,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 380
            },
            "docs": []
        },
        {
            "id": 380,
            "path": [
                "xcm",
                "v3",
                "multiasset",
                "MultiAsset"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "id",
                        "type": 66,
                        "typeName": "AssetId",
                        "docs": []
                    },
                    {
                        "name": "fun",
                        "type": 381,
                        "typeName": "Fungibility",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 381,
            "path": [
                "xcm",
                "v3",
                "multiasset",
                "Fungibility"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Fungible",
                        "fields": [
                            {
                                "type": 63,
                                "typeName": "u128",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "NonFungible",
                        "fields": [
                            {
                                "type": 382,
                                "typeName": "AssetInstance",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 382,
            "path": [
                "xcm",
                "v3",
                "multiasset",
                "AssetInstance"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Undefined",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Index",
                        "fields": [
                            {
                                "type": 63,
                                "typeName": "u128",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Array4",
                        "fields": [
                            {
                                "type": 18,
                                "typeName": "[u8; 4]",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Array8",
                        "fields": [
                            {
                                "type": 364,
                                "typeName": "[u8; 8]",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "Array16",
                        "fields": [
                            {
                                "type": 48,
                                "typeName": "[u8; 16]",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "Array32",
                        "fields": [
                            {
                                "type": 1,
                                "typeName": "[u8; 32]",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 383,
            "path": [
                "xcm",
                "v3",
                "Response"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Null",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Assets",
                        "fields": [
                            {
                                "type": 378,
                                "typeName": "MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "ExecutionResult",
                        "fields": [
                            {
                                "type": 384,
                                "typeName": "Option<(u32, Error)>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Version",
                        "fields": [
                            {
                                "type": 4,
                                "typeName": "super::Version",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "PalletsInfo",
                        "fields": [
                            {
                                "type": 387,
                                "typeName": "BoundedVec<PalletInfo, MaxPalletsInfo>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "DispatchResult",
                        "fields": [
                            {
                                "type": 391,
                                "typeName": "MaybeErrorCode",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 384,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 385
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 385,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 385,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    4,
                    386
                ]
            },
            "docs": []
        },
        {
            "id": 386,
            "path": [
                "xcm",
                "v3",
                "traits",
                "Error"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Overflow",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Unimplemented",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "UntrustedReserveLocation",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "UntrustedTeleportLocation",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "LocationFull",
                        "fields": [],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "LocationNotInvertible",
                        "fields": [],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "BadOrigin",
                        "fields": [],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "InvalidLocation",
                        "fields": [],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "AssetNotFound",
                        "fields": [],
                        "index": 8,
                        "docs": []
                    },
                    {
                        "name": "FailedToTransactAsset",
                        "fields": [],
                        "index": 9,
                        "docs": []
                    },
                    {
                        "name": "NotWithdrawable",
                        "fields": [],
                        "index": 10,
                        "docs": []
                    },
                    {
                        "name": "LocationCannotHold",
                        "fields": [],
                        "index": 11,
                        "docs": []
                    },
                    {
                        "name": "ExceedsMaxMessageSize",
                        "fields": [],
                        "index": 12,
                        "docs": []
                    },
                    {
                        "name": "DestinationUnsupported",
                        "fields": [],
                        "index": 13,
                        "docs": []
                    },
                    {
                        "name": "Transport",
                        "fields": [],
                        "index": 14,
                        "docs": []
                    },
                    {
                        "name": "Unroutable",
                        "fields": [],
                        "index": 15,
                        "docs": []
                    },
                    {
                        "name": "UnknownClaim",
                        "fields": [],
                        "index": 16,
                        "docs": []
                    },
                    {
                        "name": "FailedToDecode",
                        "fields": [],
                        "index": 17,
                        "docs": []
                    },
                    {
                        "name": "MaxWeightInvalid",
                        "fields": [],
                        "index": 18,
                        "docs": []
                    },
                    {
                        "name": "NotHoldingFees",
                        "fields": [],
                        "index": 19,
                        "docs": []
                    },
                    {
                        "name": "TooExpensive",
                        "fields": [],
                        "index": 20,
                        "docs": []
                    },
                    {
                        "name": "Trap",
                        "fields": [
                            {
                                "type": 12,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 21,
                        "docs": []
                    },
                    {
                        "name": "ExpectationFalse",
                        "fields": [],
                        "index": 22,
                        "docs": []
                    },
                    {
                        "name": "PalletNotFound",
                        "fields": [],
                        "index": 23,
                        "docs": []
                    },
                    {
                        "name": "NameMismatch",
                        "fields": [],
                        "index": 24,
                        "docs": []
                    },
                    {
                        "name": "VersionIncompatible",
                        "fields": [],
                        "index": 25,
                        "docs": []
                    },
                    {
                        "name": "HoldingWouldOverflow",
                        "fields": [],
                        "index": 26,
                        "docs": []
                    },
                    {
                        "name": "ExportError",
                        "fields": [],
                        "index": 27,
                        "docs": []
                    },
                    {
                        "name": "ReanchorFailed",
                        "fields": [],
                        "index": 28,
                        "docs": []
                    },
                    {
                        "name": "NoDeal",
                        "fields": [],
                        "index": 29,
                        "docs": []
                    },
                    {
                        "name": "FeesNotMet",
                        "fields": [],
                        "index": 30,
                        "docs": []
                    },
                    {
                        "name": "LockError",
                        "fields": [],
                        "index": 31,
                        "docs": []
                    },
                    {
                        "name": "NoPermission",
                        "fields": [],
                        "index": 32,
                        "docs": []
                    },
                    {
                        "name": "Unanchored",
                        "fields": [],
                        "index": 33,
                        "docs": []
                    },
                    {
                        "name": "NotDepositable",
                        "fields": [],
                        "index": 34,
                        "docs": []
                    },
                    {
                        "name": "UnhandledXcmVersion",
                        "fields": [],
                        "index": 35,
                        "docs": []
                    },
                    {
                        "name": "WeightLimitReached",
                        "fields": [
                            {
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            }
                        ],
                        "index": 36,
                        "docs": []
                    },
                    {
                        "name": "Barrier",
                        "fields": [],
                        "index": 37,
                        "docs": []
                    },
                    {
                        "name": "WeightNotComputable",
                        "fields": [],
                        "index": 38,
                        "docs": []
                    },
                    {
                        "name": "ExceedsStackLimit",
                        "fields": [],
                        "index": 39,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 387,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 388
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 390,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 388,
            "path": [
                "xcm",
                "v3",
                "PalletInfo"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "index",
                        "type": 59,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "name",
                        "type": 389,
                        "typeName": "BoundedVec<u8, MaxPalletNameLen>",
                        "docs": []
                    },
                    {
                        "name": "module_name",
                        "type": 389,
                        "typeName": "BoundedVec<u8, MaxPalletNameLen>",
                        "docs": []
                    },
                    {
                        "name": "major",
                        "type": 59,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "minor",
                        "type": 59,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "patch",
                        "type": 59,
                        "typeName": "u32",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 389,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 2
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 14,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 390,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 388
            },
            "docs": []
        },
        {
            "id": 391,
            "path": [
                "xcm",
                "v3",
                "MaybeErrorCode"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Success",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Error",
                        "fields": [
                            {
                                "type": 392,
                                "typeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "TruncatedError",
                        "fields": [
                            {
                                "type": 392,
                                "typeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 392,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 2
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 14,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 393,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 56
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 56,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 394,
            "path": [
                "xcm",
                "v3",
                "OriginKind"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Native",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "SovereignAccount",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Superuser",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Xcm",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 395,
            "path": [
                "xcm",
                "v3",
                "QueryResponseInfo"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "destination",
                        "type": 56,
                        "typeName": "MultiLocation",
                        "docs": []
                    },
                    {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId",
                        "docs": []
                    },
                    {
                        "name": "max_weight",
                        "type": 10,
                        "typeName": "Weight",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 396,
            "path": [
                "xcm",
                "v3",
                "multiasset",
                "MultiAssetFilter"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Definite",
                        "fields": [
                            {
                                "type": 378,
                                "typeName": "MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Wild",
                        "fields": [
                            {
                                "type": 397,
                                "typeName": "WildMultiAsset",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 397,
            "path": [
                "xcm",
                "v3",
                "multiasset",
                "WildMultiAsset"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "All",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "AllOf",
                        "fields": [
                            {
                                "name": "id",
                                "type": 66,
                                "typeName": "AssetId",
                                "docs": []
                            },
                            {
                                "name": "fun",
                                "type": 398,
                                "typeName": "WildFungibility",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "AllCounted",
                        "fields": [
                            {
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "AllOfCounted",
                        "fields": [
                            {
                                "name": "id",
                                "type": 66,
                                "typeName": "AssetId",
                                "docs": []
                            },
                            {
                                "name": "fun",
                                "type": 398,
                                "typeName": "WildFungibility",
                                "docs": []
                            },
                            {
                                "name": "count",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 398,
            "path": [
                "xcm",
                "v3",
                "multiasset",
                "WildFungibility"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Fungible",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "NonFungible",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 399,
            "path": [
                "xcm",
                "v3",
                "WeightLimit"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Unlimited",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Limited",
                        "fields": [
                            {
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 400,
            "path": [
                "staging_xcm",
                "v4",
                "Xcm"
            ],
            "params": [
                {
                    "name": "Call"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 401,
                        "typeName": "Vec<Instruction<Call>>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 401,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 402
            },
            "docs": []
        },
        {
            "id": 402,
            "path": [
                "staging_xcm",
                "v4",
                "Instruction"
            ],
            "params": [
                {
                    "name": "Call"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "WithdrawAsset",
                        "fields": [
                            {
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "ReserveAssetDeposited",
                        "fields": [
                            {
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "ReceiveTeleportedAsset",
                        "fields": [
                            {
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "QueryResponse",
                        "fields": [
                            {
                                "name": "query_id",
                                "type": 11,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "response",
                                "type": 408,
                                "typeName": "Response",
                                "docs": []
                            },
                            {
                                "name": "max_weight",
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            },
                            {
                                "name": "querier",
                                "type": 413,
                                "typeName": "Option<Location>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "TransferAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "TransferReserveAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 400,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "Transact",
                        "fields": [
                            {
                                "name": "origin_kind",
                                "type": 394,
                                "typeName": "OriginKind",
                                "docs": []
                            },
                            {
                                "name": "require_weight_at_most",
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            },
                            {
                                "name": "call",
                                "type": 370,
                                "typeName": "DoubleEncoded<Call>",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "HrmpNewChannelOpenRequest",
                        "fields": [
                            {
                                "name": "sender",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "max_message_size",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "max_capacity",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "HrmpChannelAccepted",
                        "fields": [
                            {
                                "name": "recipient",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": []
                    },
                    {
                        "name": "HrmpChannelClosing",
                        "fields": [
                            {
                                "name": "initiator",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "sender",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "recipient",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": []
                    },
                    {
                        "name": "ClearOrigin",
                        "fields": [],
                        "index": 10,
                        "docs": []
                    },
                    {
                        "name": "DescendOrigin",
                        "fields": [
                            {
                                "type": 68,
                                "typeName": "InteriorLocation",
                                "docs": []
                            }
                        ],
                        "index": 11,
                        "docs": []
                    },
                    {
                        "name": "ReportError",
                        "fields": [
                            {
                                "type": 414,
                                "typeName": "QueryResponseInfo",
                                "docs": []
                            }
                        ],
                        "index": 12,
                        "docs": []
                    },
                    {
                        "name": "DepositAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 415,
                                "typeName": "AssetFilter",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            }
                        ],
                        "index": 13,
                        "docs": []
                    },
                    {
                        "name": "DepositReserveAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 415,
                                "typeName": "AssetFilter",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 400,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 14,
                        "docs": []
                    },
                    {
                        "name": "ExchangeAsset",
                        "fields": [
                            {
                                "name": "give",
                                "type": 415,
                                "typeName": "AssetFilter",
                                "docs": []
                            },
                            {
                                "name": "want",
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            },
                            {
                                "name": "maximal",
                                "type": 8,
                                "typeName": "bool",
                                "docs": []
                            }
                        ],
                        "index": 15,
                        "docs": []
                    },
                    {
                        "name": "InitiateReserveWithdraw",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 415,
                                "typeName": "AssetFilter",
                                "docs": []
                            },
                            {
                                "name": "reserve",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 400,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 16,
                        "docs": []
                    },
                    {
                        "name": "InitiateTeleport",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 415,
                                "typeName": "AssetFilter",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 400,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 17,
                        "docs": []
                    },
                    {
                        "name": "ReportHolding",
                        "fields": [
                            {
                                "name": "response_info",
                                "type": 414,
                                "typeName": "QueryResponseInfo",
                                "docs": []
                            },
                            {
                                "name": "assets",
                                "type": 415,
                                "typeName": "AssetFilter",
                                "docs": []
                            }
                        ],
                        "index": 18,
                        "docs": []
                    },
                    {
                        "name": "BuyExecution",
                        "fields": [
                            {
                                "name": "fees",
                                "type": 405,
                                "typeName": "Asset",
                                "docs": []
                            },
                            {
                                "name": "weight_limit",
                                "type": 399,
                                "typeName": "WeightLimit",
                                "docs": []
                            }
                        ],
                        "index": 19,
                        "docs": []
                    },
                    {
                        "name": "RefundSurplus",
                        "fields": [],
                        "index": 20,
                        "docs": []
                    },
                    {
                        "name": "SetErrorHandler",
                        "fields": [
                            {
                                "type": 400,
                                "typeName": "Xcm<Call>",
                                "docs": []
                            }
                        ],
                        "index": 21,
                        "docs": []
                    },
                    {
                        "name": "SetAppendix",
                        "fields": [
                            {
                                "type": 400,
                                "typeName": "Xcm<Call>",
                                "docs": []
                            }
                        ],
                        "index": 22,
                        "docs": []
                    },
                    {
                        "name": "ClearError",
                        "fields": [],
                        "index": 23,
                        "docs": []
                    },
                    {
                        "name": "ClaimAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            },
                            {
                                "name": "ticket",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            }
                        ],
                        "index": 24,
                        "docs": []
                    },
                    {
                        "name": "Trap",
                        "fields": [
                            {
                                "type": 11,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 25,
                        "docs": []
                    },
                    {
                        "name": "SubscribeVersion",
                        "fields": [
                            {
                                "name": "query_id",
                                "type": 11,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "max_response_weight",
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            }
                        ],
                        "index": 26,
                        "docs": []
                    },
                    {
                        "name": "UnsubscribeVersion",
                        "fields": [],
                        "index": 27,
                        "docs": []
                    },
                    {
                        "name": "BurnAsset",
                        "fields": [
                            {
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            }
                        ],
                        "index": 28,
                        "docs": []
                    },
                    {
                        "name": "ExpectAsset",
                        "fields": [
                            {
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            }
                        ],
                        "index": 29,
                        "docs": []
                    },
                    {
                        "name": "ExpectOrigin",
                        "fields": [
                            {
                                "type": 413,
                                "typeName": "Option<Location>",
                                "docs": []
                            }
                        ],
                        "index": 30,
                        "docs": []
                    },
                    {
                        "name": "ExpectError",
                        "fields": [
                            {
                                "type": 384,
                                "typeName": "Option<(u32, Error)>",
                                "docs": []
                            }
                        ],
                        "index": 31,
                        "docs": []
                    },
                    {
                        "name": "ExpectTransactStatus",
                        "fields": [
                            {
                                "type": 391,
                                "typeName": "MaybeErrorCode",
                                "docs": []
                            }
                        ],
                        "index": 32,
                        "docs": []
                    },
                    {
                        "name": "QueryPallet",
                        "fields": [
                            {
                                "name": "module_name",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            },
                            {
                                "name": "response_info",
                                "type": 414,
                                "typeName": "QueryResponseInfo",
                                "docs": []
                            }
                        ],
                        "index": 33,
                        "docs": []
                    },
                    {
                        "name": "ExpectPallet",
                        "fields": [
                            {
                                "name": "index",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "name",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            },
                            {
                                "name": "module_name",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            },
                            {
                                "name": "crate_major",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "min_crate_minor",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 34,
                        "docs": []
                    },
                    {
                        "name": "ReportTransactStatus",
                        "fields": [
                            {
                                "type": 414,
                                "typeName": "QueryResponseInfo",
                                "docs": []
                            }
                        ],
                        "index": 35,
                        "docs": []
                    },
                    {
                        "name": "ClearTransactStatus",
                        "fields": [],
                        "index": 36,
                        "docs": []
                    },
                    {
                        "name": "UniversalOrigin",
                        "fields": [
                            {
                                "type": 70,
                                "typeName": "Junction",
                                "docs": []
                            }
                        ],
                        "index": 37,
                        "docs": []
                    },
                    {
                        "name": "ExportMessage",
                        "fields": [
                            {
                                "name": "network",
                                "type": 72,
                                "typeName": "NetworkId",
                                "docs": []
                            },
                            {
                                "name": "destination",
                                "type": 68,
                                "typeName": "InteriorLocation",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 400,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 38,
                        "docs": []
                    },
                    {
                        "name": "LockAsset",
                        "fields": [
                            {
                                "name": "asset",
                                "type": 405,
                                "typeName": "Asset",
                                "docs": []
                            },
                            {
                                "name": "unlocker",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            }
                        ],
                        "index": 39,
                        "docs": []
                    },
                    {
                        "name": "UnlockAsset",
                        "fields": [
                            {
                                "name": "asset",
                                "type": 405,
                                "typeName": "Asset",
                                "docs": []
                            },
                            {
                                "name": "target",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            }
                        ],
                        "index": 40,
                        "docs": []
                    },
                    {
                        "name": "NoteUnlockable",
                        "fields": [
                            {
                                "name": "asset",
                                "type": 405,
                                "typeName": "Asset",
                                "docs": []
                            },
                            {
                                "name": "owner",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            }
                        ],
                        "index": 41,
                        "docs": []
                    },
                    {
                        "name": "RequestUnlock",
                        "fields": [
                            {
                                "name": "asset",
                                "type": 405,
                                "typeName": "Asset",
                                "docs": []
                            },
                            {
                                "name": "locker",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            }
                        ],
                        "index": 42,
                        "docs": []
                    },
                    {
                        "name": "SetFeesMode",
                        "fields": [
                            {
                                "name": "jit_withdraw",
                                "type": 8,
                                "typeName": "bool",
                                "docs": []
                            }
                        ],
                        "index": 43,
                        "docs": []
                    },
                    {
                        "name": "SetTopic",
                        "fields": [
                            {
                                "type": 1,
                                "typeName": "[u8; 32]",
                                "docs": []
                            }
                        ],
                        "index": 44,
                        "docs": []
                    },
                    {
                        "name": "ClearTopic",
                        "fields": [],
                        "index": 45,
                        "docs": []
                    },
                    {
                        "name": "AliasOrigin",
                        "fields": [
                            {
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            }
                        ],
                        "index": 46,
                        "docs": []
                    },
                    {
                        "name": "UnpaidExecution",
                        "fields": [
                            {
                                "name": "weight_limit",
                                "type": 399,
                                "typeName": "WeightLimit",
                                "docs": []
                            },
                            {
                                "name": "check_origin",
                                "type": 413,
                                "typeName": "Option<Location>",
                                "docs": []
                            }
                        ],
                        "index": 47,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 403,
            "path": [
                "staging_xcm",
                "v4",
                "asset",
                "Assets"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 404,
                        "typeName": "Vec<Asset>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 404,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 405
            },
            "docs": []
        },
        {
            "id": 405,
            "path": [
                "staging_xcm",
                "v4",
                "asset",
                "Asset"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "id",
                        "type": 80,
                        "typeName": "AssetId",
                        "docs": []
                    },
                    {
                        "name": "fun",
                        "type": 406,
                        "typeName": "Fungibility",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 406,
            "path": [
                "staging_xcm",
                "v4",
                "asset",
                "Fungibility"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Fungible",
                        "fields": [
                            {
                                "type": 63,
                                "typeName": "u128",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "NonFungible",
                        "fields": [
                            {
                                "type": 407,
                                "typeName": "AssetInstance",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 407,
            "path": [
                "staging_xcm",
                "v4",
                "asset",
                "AssetInstance"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Undefined",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Index",
                        "fields": [
                            {
                                "type": 63,
                                "typeName": "u128",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Array4",
                        "fields": [
                            {
                                "type": 18,
                                "typeName": "[u8; 4]",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Array8",
                        "fields": [
                            {
                                "type": 364,
                                "typeName": "[u8; 8]",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "Array16",
                        "fields": [
                            {
                                "type": 48,
                                "typeName": "[u8; 16]",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "Array32",
                        "fields": [
                            {
                                "type": 1,
                                "typeName": "[u8; 32]",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 408,
            "path": [
                "staging_xcm",
                "v4",
                "Response"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Null",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Assets",
                        "fields": [
                            {
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "ExecutionResult",
                        "fields": [
                            {
                                "type": 384,
                                "typeName": "Option<(u32, Error)>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Version",
                        "fields": [
                            {
                                "type": 4,
                                "typeName": "super::Version",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "PalletsInfo",
                        "fields": [
                            {
                                "type": 409,
                                "typeName": "BoundedVec<PalletInfo, MaxPalletsInfo>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "DispatchResult",
                        "fields": [
                            {
                                "type": 391,
                                "typeName": "MaybeErrorCode",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 409,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 410
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 412,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 410,
            "path": [
                "staging_xcm",
                "v4",
                "PalletInfo"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "index",
                        "type": 59,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "name",
                        "type": 411,
                        "typeName": "BoundedVec<u8, MaxPalletNameLen>",
                        "docs": []
                    },
                    {
                        "name": "module_name",
                        "type": 411,
                        "typeName": "BoundedVec<u8, MaxPalletNameLen>",
                        "docs": []
                    },
                    {
                        "name": "major",
                        "type": 59,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "minor",
                        "type": 59,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "patch",
                        "type": 59,
                        "typeName": "u32",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 411,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 2
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 14,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 412,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 410
            },
            "docs": []
        },
        {
            "id": 413,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 67
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 67,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 414,
            "path": [
                "staging_xcm",
                "v4",
                "QueryResponseInfo"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "destination",
                        "type": 67,
                        "typeName": "Location",
                        "docs": []
                    },
                    {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId",
                        "docs": []
                    },
                    {
                        "name": "max_weight",
                        "type": 10,
                        "typeName": "Weight",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 415,
            "path": [
                "staging_xcm",
                "v4",
                "asset",
                "AssetFilter"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Definite",
                        "fields": [
                            {
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Wild",
                        "fields": [
                            {
                                "type": 416,
                                "typeName": "WildAsset",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 416,
            "path": [
                "staging_xcm",
                "v4",
                "asset",
                "WildAsset"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "All",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "AllOf",
                        "fields": [
                            {
                                "name": "id",
                                "type": 80,
                                "typeName": "AssetId",
                                "docs": []
                            },
                            {
                                "name": "fun",
                                "type": 417,
                                "typeName": "WildFungibility",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "AllCounted",
                        "fields": [
                            {
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "AllOfCounted",
                        "fields": [
                            {
                                "name": "id",
                                "type": 80,
                                "typeName": "AssetId",
                                "docs": []
                            },
                            {
                                "name": "fun",
                                "type": 417,
                                "typeName": "WildFungibility",
                                "docs": []
                            },
                            {
                                "name": "count",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 417,
            "path": [
                "staging_xcm",
                "v4",
                "asset",
                "WildFungibility"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Fungible",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "NonFungible",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 418,
            "path": [
                "xcm",
                "VersionedAssets"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "V2",
                        "fields": [
                            {
                                "type": 358,
                                "typeName": "v2::MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "V3",
                        "fields": [
                            {
                                "type": 378,
                                "typeName": "v3::MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "V4",
                        "fields": [
                            {
                                "type": 403,
                                "typeName": "v4::Assets",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 419,
            "path": [
                "xcm",
                "VersionedXcm"
            ],
            "params": [
                {
                    "name": "RuntimeCall"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "V2",
                        "fields": [
                            {
                                "type": 420,
                                "typeName": "v2::Xcm<RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "V3",
                        "fields": [
                            {
                                "type": 424,
                                "typeName": "v3::Xcm<RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "V4",
                        "fields": [
                            {
                                "type": 427,
                                "typeName": "v4::Xcm<RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 420,
            "path": [
                "xcm",
                "v2",
                "Xcm"
            ],
            "params": [
                {
                    "name": "RuntimeCall"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 421,
                        "typeName": "Vec<Instruction<RuntimeCall>>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 421,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 422
            },
            "docs": []
        },
        {
            "id": 422,
            "path": [
                "xcm",
                "v2",
                "Instruction"
            ],
            "params": [
                {
                    "name": "RuntimeCall"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "WithdrawAsset",
                        "fields": [
                            {
                                "type": 358,
                                "typeName": "MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "ReserveAssetDeposited",
                        "fields": [
                            {
                                "type": 358,
                                "typeName": "MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "ReceiveTeleportedAsset",
                        "fields": [
                            {
                                "type": 358,
                                "typeName": "MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "QueryResponse",
                        "fields": [
                            {
                                "name": "query_id",
                                "type": 11,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "response",
                                "type": 365,
                                "typeName": "Response",
                                "docs": []
                            },
                            {
                                "name": "max_weight",
                                "type": 11,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "TransferAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 358,
                                "typeName": "MultiAssets",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 82,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "TransferReserveAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 358,
                                "typeName": "MultiAssets",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 82,
                                "typeName": "MultiLocation",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 355,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "Transact",
                        "fields": [
                            {
                                "name": "origin_type",
                                "type": 369,
                                "typeName": "OriginKind",
                                "docs": []
                            },
                            {
                                "name": "require_weight_at_most",
                                "type": 11,
                                "typeName": "u64",
                                "docs": []
                            },
                            {
                                "name": "call",
                                "type": 423,
                                "typeName": "DoubleEncoded<RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "HrmpNewChannelOpenRequest",
                        "fields": [
                            {
                                "name": "sender",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "max_message_size",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "max_capacity",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "HrmpChannelAccepted",
                        "fields": [
                            {
                                "name": "recipient",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": []
                    },
                    {
                        "name": "HrmpChannelClosing",
                        "fields": [
                            {
                                "name": "initiator",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "sender",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "recipient",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": []
                    },
                    {
                        "name": "ClearOrigin",
                        "fields": [],
                        "index": 10,
                        "docs": []
                    },
                    {
                        "name": "DescendOrigin",
                        "fields": [
                            {
                                "type": 83,
                                "typeName": "InteriorMultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 11,
                        "docs": []
                    },
                    {
                        "name": "ReportError",
                        "fields": [
                            {
                                "name": "query_id",
                                "type": 11,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 82,
                                "typeName": "MultiLocation",
                                "docs": []
                            },
                            {
                                "name": "max_response_weight",
                                "type": 11,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 12,
                        "docs": []
                    },
                    {
                        "name": "DepositAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 371,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            },
                            {
                                "name": "max_assets",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 82,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 13,
                        "docs": []
                    },
                    {
                        "name": "DepositReserveAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 371,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            },
                            {
                                "name": "max_assets",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 82,
                                "typeName": "MultiLocation",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 355,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 14,
                        "docs": []
                    },
                    {
                        "name": "ExchangeAsset",
                        "fields": [
                            {
                                "name": "give",
                                "type": 371,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            },
                            {
                                "name": "receive",
                                "type": 358,
                                "typeName": "MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 15,
                        "docs": []
                    },
                    {
                        "name": "InitiateReserveWithdraw",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 371,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            },
                            {
                                "name": "reserve",
                                "type": 82,
                                "typeName": "MultiLocation",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 355,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 16,
                        "docs": []
                    },
                    {
                        "name": "InitiateTeleport",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 371,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 82,
                                "typeName": "MultiLocation",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 355,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 17,
                        "docs": []
                    },
                    {
                        "name": "QueryHolding",
                        "fields": [
                            {
                                "name": "query_id",
                                "type": 11,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 82,
                                "typeName": "MultiLocation",
                                "docs": []
                            },
                            {
                                "name": "assets",
                                "type": 371,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            },
                            {
                                "name": "max_response_weight",
                                "type": 11,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 18,
                        "docs": []
                    },
                    {
                        "name": "BuyExecution",
                        "fields": [
                            {
                                "name": "fees",
                                "type": 360,
                                "typeName": "MultiAsset",
                                "docs": []
                            },
                            {
                                "name": "weight_limit",
                                "type": 374,
                                "typeName": "WeightLimit",
                                "docs": []
                            }
                        ],
                        "index": 19,
                        "docs": []
                    },
                    {
                        "name": "RefundSurplus",
                        "fields": [],
                        "index": 20,
                        "docs": []
                    },
                    {
                        "name": "SetErrorHandler",
                        "fields": [
                            {
                                "type": 420,
                                "typeName": "Xcm<RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 21,
                        "docs": []
                    },
                    {
                        "name": "SetAppendix",
                        "fields": [
                            {
                                "type": 420,
                                "typeName": "Xcm<RuntimeCall>",
                                "docs": []
                            }
                        ],
                        "index": 22,
                        "docs": []
                    },
                    {
                        "name": "ClearError",
                        "fields": [],
                        "index": 23,
                        "docs": []
                    },
                    {
                        "name": "ClaimAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 358,
                                "typeName": "MultiAssets",
                                "docs": []
                            },
                            {
                                "name": "ticket",
                                "type": 82,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 24,
                        "docs": []
                    },
                    {
                        "name": "Trap",
                        "fields": [
                            {
                                "type": 11,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 25,
                        "docs": []
                    },
                    {
                        "name": "SubscribeVersion",
                        "fields": [
                            {
                                "name": "query_id",
                                "type": 11,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "max_response_weight",
                                "type": 11,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 26,
                        "docs": []
                    },
                    {
                        "name": "UnsubscribeVersion",
                        "fields": [],
                        "index": 27,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 423,
            "path": [
                "xcm",
                "double_encoded",
                "DoubleEncoded"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "encoded",
                        "type": 14,
                        "typeName": "Vec<u8>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 424,
            "path": [
                "xcm",
                "v3",
                "Xcm"
            ],
            "params": [
                {
                    "name": "Call"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 425,
                        "typeName": "Vec<Instruction<Call>>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 425,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 426
            },
            "docs": []
        },
        {
            "id": 426,
            "path": [
                "xcm",
                "v3",
                "Instruction"
            ],
            "params": [
                {
                    "name": "Call"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "WithdrawAsset",
                        "fields": [
                            {
                                "type": 378,
                                "typeName": "MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "ReserveAssetDeposited",
                        "fields": [
                            {
                                "type": 378,
                                "typeName": "MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "ReceiveTeleportedAsset",
                        "fields": [
                            {
                                "type": 378,
                                "typeName": "MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "QueryResponse",
                        "fields": [
                            {
                                "name": "query_id",
                                "type": 11,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "response",
                                "type": 383,
                                "typeName": "Response",
                                "docs": []
                            },
                            {
                                "name": "max_weight",
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            },
                            {
                                "name": "querier",
                                "type": 393,
                                "typeName": "Option<MultiLocation>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "TransferAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 378,
                                "typeName": "MultiAssets",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "TransferReserveAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 378,
                                "typeName": "MultiAssets",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 375,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "Transact",
                        "fields": [
                            {
                                "name": "origin_kind",
                                "type": 394,
                                "typeName": "OriginKind",
                                "docs": []
                            },
                            {
                                "name": "require_weight_at_most",
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            },
                            {
                                "name": "call",
                                "type": 423,
                                "typeName": "DoubleEncoded<Call>",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "HrmpNewChannelOpenRequest",
                        "fields": [
                            {
                                "name": "sender",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "max_message_size",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "max_capacity",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "HrmpChannelAccepted",
                        "fields": [
                            {
                                "name": "recipient",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": []
                    },
                    {
                        "name": "HrmpChannelClosing",
                        "fields": [
                            {
                                "name": "initiator",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "sender",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "recipient",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": []
                    },
                    {
                        "name": "ClearOrigin",
                        "fields": [],
                        "index": 10,
                        "docs": []
                    },
                    {
                        "name": "DescendOrigin",
                        "fields": [
                            {
                                "type": 57,
                                "typeName": "InteriorMultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 11,
                        "docs": []
                    },
                    {
                        "name": "ReportError",
                        "fields": [
                            {
                                "type": 395,
                                "typeName": "QueryResponseInfo",
                                "docs": []
                            }
                        ],
                        "index": 12,
                        "docs": []
                    },
                    {
                        "name": "DepositAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 396,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 13,
                        "docs": []
                    },
                    {
                        "name": "DepositReserveAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 396,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 375,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 14,
                        "docs": []
                    },
                    {
                        "name": "ExchangeAsset",
                        "fields": [
                            {
                                "name": "give",
                                "type": 396,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            },
                            {
                                "name": "want",
                                "type": 378,
                                "typeName": "MultiAssets",
                                "docs": []
                            },
                            {
                                "name": "maximal",
                                "type": 8,
                                "typeName": "bool",
                                "docs": []
                            }
                        ],
                        "index": 15,
                        "docs": []
                    },
                    {
                        "name": "InitiateReserveWithdraw",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 396,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            },
                            {
                                "name": "reserve",
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 375,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 16,
                        "docs": []
                    },
                    {
                        "name": "InitiateTeleport",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 396,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 375,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 17,
                        "docs": []
                    },
                    {
                        "name": "ReportHolding",
                        "fields": [
                            {
                                "name": "response_info",
                                "type": 395,
                                "typeName": "QueryResponseInfo",
                                "docs": []
                            },
                            {
                                "name": "assets",
                                "type": 396,
                                "typeName": "MultiAssetFilter",
                                "docs": []
                            }
                        ],
                        "index": 18,
                        "docs": []
                    },
                    {
                        "name": "BuyExecution",
                        "fields": [
                            {
                                "name": "fees",
                                "type": 380,
                                "typeName": "MultiAsset",
                                "docs": []
                            },
                            {
                                "name": "weight_limit",
                                "type": 399,
                                "typeName": "WeightLimit",
                                "docs": []
                            }
                        ],
                        "index": 19,
                        "docs": []
                    },
                    {
                        "name": "RefundSurplus",
                        "fields": [],
                        "index": 20,
                        "docs": []
                    },
                    {
                        "name": "SetErrorHandler",
                        "fields": [
                            {
                                "type": 424,
                                "typeName": "Xcm<Call>",
                                "docs": []
                            }
                        ],
                        "index": 21,
                        "docs": []
                    },
                    {
                        "name": "SetAppendix",
                        "fields": [
                            {
                                "type": 424,
                                "typeName": "Xcm<Call>",
                                "docs": []
                            }
                        ],
                        "index": 22,
                        "docs": []
                    },
                    {
                        "name": "ClearError",
                        "fields": [],
                        "index": 23,
                        "docs": []
                    },
                    {
                        "name": "ClaimAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 378,
                                "typeName": "MultiAssets",
                                "docs": []
                            },
                            {
                                "name": "ticket",
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 24,
                        "docs": []
                    },
                    {
                        "name": "Trap",
                        "fields": [
                            {
                                "type": 11,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 25,
                        "docs": []
                    },
                    {
                        "name": "SubscribeVersion",
                        "fields": [
                            {
                                "name": "query_id",
                                "type": 11,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "max_response_weight",
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            }
                        ],
                        "index": 26,
                        "docs": []
                    },
                    {
                        "name": "UnsubscribeVersion",
                        "fields": [],
                        "index": 27,
                        "docs": []
                    },
                    {
                        "name": "BurnAsset",
                        "fields": [
                            {
                                "type": 378,
                                "typeName": "MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 28,
                        "docs": []
                    },
                    {
                        "name": "ExpectAsset",
                        "fields": [
                            {
                                "type": 378,
                                "typeName": "MultiAssets",
                                "docs": []
                            }
                        ],
                        "index": 29,
                        "docs": []
                    },
                    {
                        "name": "ExpectOrigin",
                        "fields": [
                            {
                                "type": 393,
                                "typeName": "Option<MultiLocation>",
                                "docs": []
                            }
                        ],
                        "index": 30,
                        "docs": []
                    },
                    {
                        "name": "ExpectError",
                        "fields": [
                            {
                                "type": 384,
                                "typeName": "Option<(u32, Error)>",
                                "docs": []
                            }
                        ],
                        "index": 31,
                        "docs": []
                    },
                    {
                        "name": "ExpectTransactStatus",
                        "fields": [
                            {
                                "type": 391,
                                "typeName": "MaybeErrorCode",
                                "docs": []
                            }
                        ],
                        "index": 32,
                        "docs": []
                    },
                    {
                        "name": "QueryPallet",
                        "fields": [
                            {
                                "name": "module_name",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            },
                            {
                                "name": "response_info",
                                "type": 395,
                                "typeName": "QueryResponseInfo",
                                "docs": []
                            }
                        ],
                        "index": 33,
                        "docs": []
                    },
                    {
                        "name": "ExpectPallet",
                        "fields": [
                            {
                                "name": "index",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "name",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            },
                            {
                                "name": "module_name",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            },
                            {
                                "name": "crate_major",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "min_crate_minor",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 34,
                        "docs": []
                    },
                    {
                        "name": "ReportTransactStatus",
                        "fields": [
                            {
                                "type": 395,
                                "typeName": "QueryResponseInfo",
                                "docs": []
                            }
                        ],
                        "index": 35,
                        "docs": []
                    },
                    {
                        "name": "ClearTransactStatus",
                        "fields": [],
                        "index": 36,
                        "docs": []
                    },
                    {
                        "name": "UniversalOrigin",
                        "fields": [
                            {
                                "type": 58,
                                "typeName": "Junction",
                                "docs": []
                            }
                        ],
                        "index": 37,
                        "docs": []
                    },
                    {
                        "name": "ExportMessage",
                        "fields": [
                            {
                                "name": "network",
                                "type": 61,
                                "typeName": "NetworkId",
                                "docs": []
                            },
                            {
                                "name": "destination",
                                "type": 57,
                                "typeName": "InteriorMultiLocation",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 375,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 38,
                        "docs": []
                    },
                    {
                        "name": "LockAsset",
                        "fields": [
                            {
                                "name": "asset",
                                "type": 380,
                                "typeName": "MultiAsset",
                                "docs": []
                            },
                            {
                                "name": "unlocker",
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 39,
                        "docs": []
                    },
                    {
                        "name": "UnlockAsset",
                        "fields": [
                            {
                                "name": "asset",
                                "type": 380,
                                "typeName": "MultiAsset",
                                "docs": []
                            },
                            {
                                "name": "target",
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 40,
                        "docs": []
                    },
                    {
                        "name": "NoteUnlockable",
                        "fields": [
                            {
                                "name": "asset",
                                "type": 380,
                                "typeName": "MultiAsset",
                                "docs": []
                            },
                            {
                                "name": "owner",
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 41,
                        "docs": []
                    },
                    {
                        "name": "RequestUnlock",
                        "fields": [
                            {
                                "name": "asset",
                                "type": 380,
                                "typeName": "MultiAsset",
                                "docs": []
                            },
                            {
                                "name": "locker",
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 42,
                        "docs": []
                    },
                    {
                        "name": "SetFeesMode",
                        "fields": [
                            {
                                "name": "jit_withdraw",
                                "type": 8,
                                "typeName": "bool",
                                "docs": []
                            }
                        ],
                        "index": 43,
                        "docs": []
                    },
                    {
                        "name": "SetTopic",
                        "fields": [
                            {
                                "type": 1,
                                "typeName": "[u8; 32]",
                                "docs": []
                            }
                        ],
                        "index": 44,
                        "docs": []
                    },
                    {
                        "name": "ClearTopic",
                        "fields": [],
                        "index": 45,
                        "docs": []
                    },
                    {
                        "name": "AliasOrigin",
                        "fields": [
                            {
                                "type": 56,
                                "typeName": "MultiLocation",
                                "docs": []
                            }
                        ],
                        "index": 46,
                        "docs": []
                    },
                    {
                        "name": "UnpaidExecution",
                        "fields": [
                            {
                                "name": "weight_limit",
                                "type": 399,
                                "typeName": "WeightLimit",
                                "docs": []
                            },
                            {
                                "name": "check_origin",
                                "type": 393,
                                "typeName": "Option<MultiLocation>",
                                "docs": []
                            }
                        ],
                        "index": 47,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 427,
            "path": [
                "staging_xcm",
                "v4",
                "Xcm"
            ],
            "params": [
                {
                    "name": "Call"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 428,
                        "typeName": "Vec<Instruction<Call>>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 428,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 429
            },
            "docs": []
        },
        {
            "id": 429,
            "path": [
                "staging_xcm",
                "v4",
                "Instruction"
            ],
            "params": [
                {
                    "name": "Call"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "WithdrawAsset",
                        "fields": [
                            {
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "ReserveAssetDeposited",
                        "fields": [
                            {
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "ReceiveTeleportedAsset",
                        "fields": [
                            {
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "QueryResponse",
                        "fields": [
                            {
                                "name": "query_id",
                                "type": 11,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "response",
                                "type": 408,
                                "typeName": "Response",
                                "docs": []
                            },
                            {
                                "name": "max_weight",
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            },
                            {
                                "name": "querier",
                                "type": 413,
                                "typeName": "Option<Location>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "TransferAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "TransferReserveAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 400,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "Transact",
                        "fields": [
                            {
                                "name": "origin_kind",
                                "type": 394,
                                "typeName": "OriginKind",
                                "docs": []
                            },
                            {
                                "name": "require_weight_at_most",
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            },
                            {
                                "name": "call",
                                "type": 423,
                                "typeName": "DoubleEncoded<Call>",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "HrmpNewChannelOpenRequest",
                        "fields": [
                            {
                                "name": "sender",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "max_message_size",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "max_capacity",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "HrmpChannelAccepted",
                        "fields": [
                            {
                                "name": "recipient",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": []
                    },
                    {
                        "name": "HrmpChannelClosing",
                        "fields": [
                            {
                                "name": "initiator",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "sender",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "recipient",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": []
                    },
                    {
                        "name": "ClearOrigin",
                        "fields": [],
                        "index": 10,
                        "docs": []
                    },
                    {
                        "name": "DescendOrigin",
                        "fields": [
                            {
                                "type": 68,
                                "typeName": "InteriorLocation",
                                "docs": []
                            }
                        ],
                        "index": 11,
                        "docs": []
                    },
                    {
                        "name": "ReportError",
                        "fields": [
                            {
                                "type": 414,
                                "typeName": "QueryResponseInfo",
                                "docs": []
                            }
                        ],
                        "index": 12,
                        "docs": []
                    },
                    {
                        "name": "DepositAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 415,
                                "typeName": "AssetFilter",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            }
                        ],
                        "index": 13,
                        "docs": []
                    },
                    {
                        "name": "DepositReserveAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 415,
                                "typeName": "AssetFilter",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 400,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 14,
                        "docs": []
                    },
                    {
                        "name": "ExchangeAsset",
                        "fields": [
                            {
                                "name": "give",
                                "type": 415,
                                "typeName": "AssetFilter",
                                "docs": []
                            },
                            {
                                "name": "want",
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            },
                            {
                                "name": "maximal",
                                "type": 8,
                                "typeName": "bool",
                                "docs": []
                            }
                        ],
                        "index": 15,
                        "docs": []
                    },
                    {
                        "name": "InitiateReserveWithdraw",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 415,
                                "typeName": "AssetFilter",
                                "docs": []
                            },
                            {
                                "name": "reserve",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 400,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 16,
                        "docs": []
                    },
                    {
                        "name": "InitiateTeleport",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 415,
                                "typeName": "AssetFilter",
                                "docs": []
                            },
                            {
                                "name": "dest",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 400,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 17,
                        "docs": []
                    },
                    {
                        "name": "ReportHolding",
                        "fields": [
                            {
                                "name": "response_info",
                                "type": 414,
                                "typeName": "QueryResponseInfo",
                                "docs": []
                            },
                            {
                                "name": "assets",
                                "type": 415,
                                "typeName": "AssetFilter",
                                "docs": []
                            }
                        ],
                        "index": 18,
                        "docs": []
                    },
                    {
                        "name": "BuyExecution",
                        "fields": [
                            {
                                "name": "fees",
                                "type": 405,
                                "typeName": "Asset",
                                "docs": []
                            },
                            {
                                "name": "weight_limit",
                                "type": 399,
                                "typeName": "WeightLimit",
                                "docs": []
                            }
                        ],
                        "index": 19,
                        "docs": []
                    },
                    {
                        "name": "RefundSurplus",
                        "fields": [],
                        "index": 20,
                        "docs": []
                    },
                    {
                        "name": "SetErrorHandler",
                        "fields": [
                            {
                                "type": 427,
                                "typeName": "Xcm<Call>",
                                "docs": []
                            }
                        ],
                        "index": 21,
                        "docs": []
                    },
                    {
                        "name": "SetAppendix",
                        "fields": [
                            {
                                "type": 427,
                                "typeName": "Xcm<Call>",
                                "docs": []
                            }
                        ],
                        "index": 22,
                        "docs": []
                    },
                    {
                        "name": "ClearError",
                        "fields": [],
                        "index": 23,
                        "docs": []
                    },
                    {
                        "name": "ClaimAsset",
                        "fields": [
                            {
                                "name": "assets",
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            },
                            {
                                "name": "ticket",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            }
                        ],
                        "index": 24,
                        "docs": []
                    },
                    {
                        "name": "Trap",
                        "fields": [
                            {
                                "type": 11,
                                "typeName": "u64",
                                "docs": []
                            }
                        ],
                        "index": 25,
                        "docs": []
                    },
                    {
                        "name": "SubscribeVersion",
                        "fields": [
                            {
                                "name": "query_id",
                                "type": 11,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "max_response_weight",
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            }
                        ],
                        "index": 26,
                        "docs": []
                    },
                    {
                        "name": "UnsubscribeVersion",
                        "fields": [],
                        "index": 27,
                        "docs": []
                    },
                    {
                        "name": "BurnAsset",
                        "fields": [
                            {
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            }
                        ],
                        "index": 28,
                        "docs": []
                    },
                    {
                        "name": "ExpectAsset",
                        "fields": [
                            {
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            }
                        ],
                        "index": 29,
                        "docs": []
                    },
                    {
                        "name": "ExpectOrigin",
                        "fields": [
                            {
                                "type": 413,
                                "typeName": "Option<Location>",
                                "docs": []
                            }
                        ],
                        "index": 30,
                        "docs": []
                    },
                    {
                        "name": "ExpectError",
                        "fields": [
                            {
                                "type": 384,
                                "typeName": "Option<(u32, Error)>",
                                "docs": []
                            }
                        ],
                        "index": 31,
                        "docs": []
                    },
                    {
                        "name": "ExpectTransactStatus",
                        "fields": [
                            {
                                "type": 391,
                                "typeName": "MaybeErrorCode",
                                "docs": []
                            }
                        ],
                        "index": 32,
                        "docs": []
                    },
                    {
                        "name": "QueryPallet",
                        "fields": [
                            {
                                "name": "module_name",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            },
                            {
                                "name": "response_info",
                                "type": 414,
                                "typeName": "QueryResponseInfo",
                                "docs": []
                            }
                        ],
                        "index": 33,
                        "docs": []
                    },
                    {
                        "name": "ExpectPallet",
                        "fields": [
                            {
                                "name": "index",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "name",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            },
                            {
                                "name": "module_name",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            },
                            {
                                "name": "crate_major",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "min_crate_minor",
                                "type": 59,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 34,
                        "docs": []
                    },
                    {
                        "name": "ReportTransactStatus",
                        "fields": [
                            {
                                "type": 414,
                                "typeName": "QueryResponseInfo",
                                "docs": []
                            }
                        ],
                        "index": 35,
                        "docs": []
                    },
                    {
                        "name": "ClearTransactStatus",
                        "fields": [],
                        "index": 36,
                        "docs": []
                    },
                    {
                        "name": "UniversalOrigin",
                        "fields": [
                            {
                                "type": 70,
                                "typeName": "Junction",
                                "docs": []
                            }
                        ],
                        "index": 37,
                        "docs": []
                    },
                    {
                        "name": "ExportMessage",
                        "fields": [
                            {
                                "name": "network",
                                "type": 72,
                                "typeName": "NetworkId",
                                "docs": []
                            },
                            {
                                "name": "destination",
                                "type": 68,
                                "typeName": "InteriorLocation",
                                "docs": []
                            },
                            {
                                "name": "xcm",
                                "type": 400,
                                "typeName": "Xcm<()>",
                                "docs": []
                            }
                        ],
                        "index": 38,
                        "docs": []
                    },
                    {
                        "name": "LockAsset",
                        "fields": [
                            {
                                "name": "asset",
                                "type": 405,
                                "typeName": "Asset",
                                "docs": []
                            },
                            {
                                "name": "unlocker",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            }
                        ],
                        "index": 39,
                        "docs": []
                    },
                    {
                        "name": "UnlockAsset",
                        "fields": [
                            {
                                "name": "asset",
                                "type": 405,
                                "typeName": "Asset",
                                "docs": []
                            },
                            {
                                "name": "target",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            }
                        ],
                        "index": 40,
                        "docs": []
                    },
                    {
                        "name": "NoteUnlockable",
                        "fields": [
                            {
                                "name": "asset",
                                "type": 405,
                                "typeName": "Asset",
                                "docs": []
                            },
                            {
                                "name": "owner",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            }
                        ],
                        "index": 41,
                        "docs": []
                    },
                    {
                        "name": "RequestUnlock",
                        "fields": [
                            {
                                "name": "asset",
                                "type": 405,
                                "typeName": "Asset",
                                "docs": []
                            },
                            {
                                "name": "locker",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            }
                        ],
                        "index": 42,
                        "docs": []
                    },
                    {
                        "name": "SetFeesMode",
                        "fields": [
                            {
                                "name": "jit_withdraw",
                                "type": 8,
                                "typeName": "bool",
                                "docs": []
                            }
                        ],
                        "index": 43,
                        "docs": []
                    },
                    {
                        "name": "SetTopic",
                        "fields": [
                            {
                                "type": 1,
                                "typeName": "[u8; 32]",
                                "docs": []
                            }
                        ],
                        "index": 44,
                        "docs": []
                    },
                    {
                        "name": "ClearTopic",
                        "fields": [],
                        "index": 45,
                        "docs": []
                    },
                    {
                        "name": "AliasOrigin",
                        "fields": [
                            {
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            }
                        ],
                        "index": 46,
                        "docs": []
                    },
                    {
                        "name": "UnpaidExecution",
                        "fields": [
                            {
                                "name": "weight_limit",
                                "type": 399,
                                "typeName": "WeightLimit",
                                "docs": []
                            },
                            {
                                "name": "check_origin",
                                "type": 413,
                                "typeName": "Option<Location>",
                                "docs": []
                            }
                        ],
                        "index": 47,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 430,
            "path": [
                "staging_xcm_executor",
                "traits",
                "asset_transfer",
                "TransferType"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Teleport",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "LocalReserve",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "DestinationReserve",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "RemoteReserve",
                        "fields": [
                            {
                                "type": 81,
                                "typeName": "VersionedLocation",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 431,
            "path": [
                "xcm",
                "VersionedAssetId"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "V3",
                        "fields": [
                            {
                                "type": 66,
                                "typeName": "v3::AssetId",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "V4",
                        "fields": [
                            {
                                "type": 80,
                                "typeName": "v4::AssetId",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 432,
            "path": [
                "pallet_message_queue",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "reap_page",
                        "fields": [
                            {
                                "name": "message_origin",
                                "type": 433,
                                "typeName": "MessageOriginOf<T>",
                                "docs": []
                            },
                            {
                                "name": "page_index",
                                "type": 4,
                                "typeName": "PageIndex",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Remove a page which has no more messages remaining to be processed or is stale."
                        ]
                    },
                    {
                        "name": "execute_overweight",
                        "fields": [
                            {
                                "name": "message_origin",
                                "type": 433,
                                "typeName": "MessageOriginOf<T>",
                                "docs": []
                            },
                            {
                                "name": "page",
                                "type": 4,
                                "typeName": "PageIndex",
                                "docs": []
                            },
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "T::Size",
                                "docs": []
                            },
                            {
                                "name": "weight_limit",
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Execute an overweight message.",
                            "",
                            "Temporary processing errors will be propagated whereas permanent errors are treated",
                            "as success condition.",
                            "",
                            "- `origin`: Must be `Signed`.",
                            "- `message_origin`: The origin from which the message to be executed arrived.",
                            "- `page`: The page in the queue in which the message to be executed is sitting.",
                            "- `index`: The index into the queue of the message to be executed.",
                            "- `weight_limit`: The maximum amount of weight allowed to be consumed in the execution",
                            "  of the message.",
                            "",
                            "Benchmark complexity considerations: O(index + weight_limit)."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 433,
            "path": [
                "polkadot_runtime_parachains",
                "inclusion",
                "AggregateMessageOrigin"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Ump",
                        "fields": [
                            {
                                "type": 434,
                                "typeName": "UmpQueueId",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 434,
            "path": [
                "polkadot_runtime_parachains",
                "inclusion",
                "UmpQueueId"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Para",
                        "fields": [
                            {
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 435,
            "path": [
                "pallet_asset_rate",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "create",
                        "fields": [
                            {
                                "name": "asset_kind",
                                "type": 55,
                                "typeName": "Box<T::AssetKind>",
                                "docs": []
                            },
                            {
                                "name": "rate",
                                "type": 436,
                                "typeName": "FixedU128",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Initialize a conversion rate to native balance for the given asset.",
                            "",
                            "## Complexity",
                            "- O(1)"
                        ]
                    },
                    {
                        "name": "update",
                        "fields": [
                            {
                                "name": "asset_kind",
                                "type": 55,
                                "typeName": "Box<T::AssetKind>",
                                "docs": []
                            },
                            {
                                "name": "rate",
                                "type": 436,
                                "typeName": "FixedU128",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Update the conversion rate to native balance for the given asset.",
                            "",
                            "## Complexity",
                            "- O(1)"
                        ]
                    },
                    {
                        "name": "remove",
                        "fields": [
                            {
                                "name": "asset_kind",
                                "type": 55,
                                "typeName": "Box<T::AssetKind>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Remove an existing conversion rate to native balance for the given asset.",
                            "",
                            "## Complexity",
                            "- O(1)"
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 436,
            "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedU128"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 6,
                        "typeName": "u128",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 437,
            "path": [
                "pallet_beefy",
                "pallet",
                "Call"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "report_equivocation",
                        "fields": [
                            {
                                "name": "equivocation_proof",
                                "type": 438,
                                "typeName": "Box<DoubleVotingProof<BlockNumberFor<T>, T::BeefyId,<T::BeefyId\nas RuntimeAppPublic>::Signature,>,>",
                                "docs": []
                            },
                            {
                                "name": "key_owner_proof",
                                "type": 107,
                                "typeName": "T::KeyOwnerProof",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Report voter equivocation/misbehavior. This method will verify the",
                            "equivocation proof and validate the given key ownership proof",
                            "against the extracted offender. If both are valid, the offence",
                            "will be reported."
                        ]
                    },
                    {
                        "name": "report_equivocation_unsigned",
                        "fields": [
                            {
                                "name": "equivocation_proof",
                                "type": 438,
                                "typeName": "Box<DoubleVotingProof<BlockNumberFor<T>, T::BeefyId,<T::BeefyId\nas RuntimeAppPublic>::Signature,>,>",
                                "docs": []
                            },
                            {
                                "name": "key_owner_proof",
                                "type": 107,
                                "typeName": "T::KeyOwnerProof",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Report voter equivocation/misbehavior. This method will verify the",
                            "equivocation proof and validate the given key ownership proof",
                            "against the extracted offender. If both are valid, the offence",
                            "will be reported.",
                            "",
                            "This extrinsic must be called unsigned and it is expected that only",
                            "block authors will call it (validated in `ValidateUnsigned`), as such",
                            "if the block author is defined it will be defined as the equivocation",
                            "reporter."
                        ]
                    },
                    {
                        "name": "set_new_genesis",
                        "fields": [
                            {
                                "name": "delay_in_blocks",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Reset BEEFY consensus by setting a new BEEFY genesis at `delay_in_blocks` blocks in the",
                            "future.",
                            "",
                            "Note: `delay_in_blocks` has to be at least 1."
                        ]
                    }
                ]
            },
            "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
        },
        {
            "id": 438,
            "path": [
                "sp_consensus_beefy",
                "DoubleVotingProof"
            ],
            "params": [
                {
                    "name": "Number",
                    "type": 4
                },
                {
                    "name": "Id",
                    "type": 138
                },
                {
                    "name": "Signature",
                    "type": 439
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "first",
                        "type": 440,
                        "typeName": "VoteMessage<Number, Id, Signature>",
                        "docs": []
                    },
                    {
                        "name": "second",
                        "type": 440,
                        "typeName": "VoteMessage<Number, Id, Signature>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 439,
            "path": [
                "sp_consensus_beefy",
                "ecdsa_crypto",
                "Signature"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 182,
                        "typeName": "ecdsa::Signature",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 440,
            "path": [
                "sp_consensus_beefy",
                "VoteMessage"
            ],
            "params": [
                {
                    "name": "Number",
                    "type": 4
                },
                {
                    "name": "Id",
                    "type": 138
                },
                {
                    "name": "Signature",
                    "type": 439
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "commitment",
                        "type": 441,
                        "typeName": "Commitment<Number>",
                        "docs": []
                    },
                    {
                        "name": "id",
                        "type": 138,
                        "typeName": "Id",
                        "docs": []
                    },
                    {
                        "name": "signature",
                        "type": 439,
                        "typeName": "Signature",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 441,
            "path": [
                "sp_consensus_beefy",
                "commitment",
                "Commitment"
            ],
            "params": [
                {
                    "name": "TBlockNumber",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "payload",
                        "type": 442,
                        "typeName": "Payload",
                        "docs": []
                    },
                    {
                        "name": "block_number",
                        "type": 4,
                        "typeName": "TBlockNumber",
                        "docs": []
                    },
                    {
                        "name": "validator_set_id",
                        "type": 12,
                        "typeName": "ValidatorSetId",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 442,
            "path": [
                "sp_consensus_beefy",
                "payload",
                "Payload"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 443,
                        "typeName": "Vec<(BeefyPayloadId, Vec<u8>)>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 443,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 444
            },
            "docs": []
        },
        {
            "id": 444,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    445,
                    14
                ]
            },
            "docs": []
        },
        {
            "id": 445,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 2,
                    "type": 2
                }
            },
            "docs": []
        },
        {
            "id": 446,
            "path": [
                "sp_runtime",
                "traits",
                "BlakeTwo256"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": []
            },
            "docs": []
        },
        {
            "id": 447,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 2
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 14,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 448,
            "path": [
                "pallet_conviction_voting",
                "types",
                "Tally"
            ],
            "params": [
                {
                    "name": "Votes",
                    "type": 6
                },
                {
                    "name": "Total"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "ayes",
                        "type": 6,
                        "typeName": "Votes",
                        "docs": []
                    },
                    {
                        "name": "nays",
                        "type": 6,
                        "typeName": "Votes",
                        "docs": []
                    },
                    {
                        "name": "support",
                        "type": 6,
                        "typeName": "Votes",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 449,
            "path": [
                "pallet_whitelist",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "CallWhitelisted",
                        "fields": [
                            {
                                "name": "call_hash",
                                "type": 13,
                                "typeName": "T::Hash",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "WhitelistedCallRemoved",
                        "fields": [
                            {
                                "name": "call_hash",
                                "type": 13,
                                "typeName": "T::Hash",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "WhitelistedCallDispatched",
                        "fields": [
                            {
                                "name": "call_hash",
                                "type": 13,
                                "typeName": "T::Hash",
                                "docs": []
                            },
                            {
                                "name": "result",
                                "type": 450,
                                "typeName": "DispatchResultWithPostInfo",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 450,
            "path": [
                "Result"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 451
                },
                {
                    "name": "E",
                    "type": 453
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Ok",
                        "fields": [
                            {
                                "type": 451,
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Err",
                        "fields": [
                            {
                                "type": 453,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 451,
            "path": [
                "frame_support",
                "dispatch",
                "PostDispatchInfo"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "actual_weight",
                        "type": 452,
                        "typeName": "Option<Weight>",
                        "docs": []
                    },
                    {
                        "name": "pays_fee",
                        "type": 25,
                        "typeName": "Pays",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 452,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 10
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 10,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 453,
            "path": [
                "sp_runtime",
                "DispatchErrorWithPostInfo"
            ],
            "params": [
                {
                    "name": "Info",
                    "type": 451
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "post_info",
                        "type": 451,
                        "typeName": "Info",
                        "docs": []
                    },
                    {
                        "name": "error",
                        "type": 26,
                        "typeName": "DispatchError",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 454,
            "path": [
                "pallet_parameters",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Updated",
                        "fields": [
                            {
                                "name": "key",
                                "type": 455,
                                "typeName": "<T::RuntimeParameters as AggregatedKeyValue>::Key",
                                "docs": [
                                    "The key that was updated."
                                ]
                            },
                            {
                                "name": "old_value",
                                "type": 457,
                                "typeName": "Option<<T::RuntimeParameters as AggregatedKeyValue>::Value>",
                                "docs": [
                                    "The old value before this call."
                                ]
                            },
                            {
                                "name": "new_value",
                                "type": 457,
                                "typeName": "Option<<T::RuntimeParameters as AggregatedKeyValue>::Value>",
                                "docs": [
                                    "The new value after this call."
                                ]
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "A Parameter was set.",
                            "",
                            "Is also emitted when the value was not changed."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 455,
            "path": [
                "polkadot_runtime",
                "RuntimeParametersKey"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Inflation",
                        "fields": [
                            {
                                "type": 456,
                                "typeName": "<dynamic_params::inflation::Parameters as frame_support::traits::\ndynamic_params::AggregatedKeyValue>::Key",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 456,
            "path": [
                "polkadot_runtime",
                "dynamic_params",
                "inflation",
                "ParametersKey"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "MinInflation",
                        "fields": [
                            {
                                "type": 172,
                                "typeName": "MinInflation",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "MaxInflation",
                        "fields": [
                            {
                                "type": 175,
                                "typeName": "MaxInflation",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "IdealStake",
                        "fields": [
                            {
                                "type": 176,
                                "typeName": "IdealStake",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Falloff",
                        "fields": [
                            {
                                "type": 177,
                                "typeName": "Falloff",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "UseAuctionSlots",
                        "fields": [
                            {
                                "type": 178,
                                "typeName": "UseAuctionSlots",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 457,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 458
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 458,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 458,
            "path": [
                "polkadot_runtime",
                "RuntimeParametersValue"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Inflation",
                        "fields": [
                            {
                                "type": 459,
                                "typeName": "<dynamic_params::inflation::Parameters as frame_support::traits::\ndynamic_params::AggregatedKeyValue>::Value",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 459,
            "path": [
                "polkadot_runtime",
                "dynamic_params",
                "inflation",
                "ParametersValue"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "MinInflation",
                        "fields": [
                            {
                                "type": 174,
                                "typeName": "Perquintill",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "MaxInflation",
                        "fields": [
                            {
                                "type": 174,
                                "typeName": "Perquintill",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "IdealStake",
                        "fields": [
                            {
                                "type": 174,
                                "typeName": "Perquintill",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Falloff",
                        "fields": [
                            {
                                "type": 174,
                                "typeName": "Perquintill",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "UseAuctionSlots",
                        "fields": [
                            {
                                "type": 8,
                                "typeName": "bool",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 460,
            "path": [
                "polkadot_runtime_common",
                "claims",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Claimed",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "ethereum_address",
                                "type": 183,
                                "typeName": "EthereumAddress",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Someone claimed some DOTs."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 461,
            "path": [
                "pallet_vesting",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "VestingUpdated",
                        "fields": [
                            {
                                "name": "account",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "unvested",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "The amount vested has been updated. This could indicate a change in funds available.",
                            "The balance given is the amount which is left unvested (and thus locked)."
                        ]
                    },
                    {
                        "name": "VestingCompleted",
                        "fields": [
                            {
                                "name": "account",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "An \\[account\\] has become fully vested."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 462,
            "path": [
                "pallet_utility",
                "pallet",
                "Event"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "BatchInterrupted",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "error",
                                "type": 26,
                                "typeName": "DispatchError",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                            "well as the error."
                        ]
                    },
                    {
                        "name": "BatchCompleted",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "Batch of dispatches completed fully with no error."
                        ]
                    },
                    {
                        "name": "BatchCompletedWithErrors",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "Batch of dispatches completed but has errors."
                        ]
                    },
                    {
                        "name": "ItemCompleted",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "A single item within a Batch of dispatches has completed with no error."
                        ]
                    },
                    {
                        "name": "ItemFailed",
                        "fields": [
                            {
                                "name": "error",
                                "type": 26,
                                "typeName": "DispatchError",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "A single item within a Batch of dispatches has completed with error."
                        ]
                    },
                    {
                        "name": "DispatchedAs",
                        "fields": [
                            {
                                "name": "result",
                                "type": 34,
                                "typeName": "DispatchResult",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "A call was dispatched."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 463,
            "path": [
                "pallet_proxy",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "ProxyExecuted",
                        "fields": [
                            {
                                "name": "result",
                                "type": 34,
                                "typeName": "DispatchResult",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "A proxy was executed correctly, with the given."
                        ]
                    },
                    {
                        "name": "PureCreated",
                        "fields": [
                            {
                                "name": "pure",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "proxy_type",
                                "type": 194,
                                "typeName": "T::ProxyType",
                                "docs": []
                            },
                            {
                                "name": "disambiguation_index",
                                "type": 91,
                                "typeName": "u16",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "A pure account has been created by new proxy with given",
                            "disambiguation index and proxy type."
                        ]
                    },
                    {
                        "name": "Announced",
                        "fields": [
                            {
                                "name": "real",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "proxy",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "call_hash",
                                "type": 13,
                                "typeName": "CallHashOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "An announcement was placed to make a call in the future."
                        ]
                    },
                    {
                        "name": "ProxyAdded",
                        "fields": [
                            {
                                "name": "delegator",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "delegatee",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "proxy_type",
                                "type": 194,
                                "typeName": "T::ProxyType",
                                "docs": []
                            },
                            {
                                "name": "delay",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "A proxy was added."
                        ]
                    },
                    {
                        "name": "ProxyRemoved",
                        "fields": [
                            {
                                "name": "delegator",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "delegatee",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "proxy_type",
                                "type": 194,
                                "typeName": "T::ProxyType",
                                "docs": []
                            },
                            {
                                "name": "delay",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "A proxy was removed."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 464,
            "path": [
                "pallet_multisig",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "NewMultisig",
                        "fields": [
                            {
                                "name": "approving",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "multisig",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "call_hash",
                                "type": 1,
                                "typeName": "CallHash",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "A new multisig operation has begun."
                        ]
                    },
                    {
                        "name": "MultisigApproval",
                        "fields": [
                            {
                                "name": "approving",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "timepoint",
                                "type": 197,
                                "typeName": "Timepoint<BlockNumberFor<T>>",
                                "docs": []
                            },
                            {
                                "name": "multisig",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "call_hash",
                                "type": 1,
                                "typeName": "CallHash",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "A multisig operation has been approved by someone."
                        ]
                    },
                    {
                        "name": "MultisigExecuted",
                        "fields": [
                            {
                                "name": "approving",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "timepoint",
                                "type": 197,
                                "typeName": "Timepoint<BlockNumberFor<T>>",
                                "docs": []
                            },
                            {
                                "name": "multisig",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "call_hash",
                                "type": 1,
                                "typeName": "CallHash",
                                "docs": []
                            },
                            {
                                "name": "result",
                                "type": 34,
                                "typeName": "DispatchResult",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "A multisig operation has been executed."
                        ]
                    },
                    {
                        "name": "MultisigCancelled",
                        "fields": [
                            {
                                "name": "cancelling",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "timepoint",
                                "type": 197,
                                "typeName": "Timepoint<BlockNumberFor<T>>",
                                "docs": []
                            },
                            {
                                "name": "multisig",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "call_hash",
                                "type": 1,
                                "typeName": "CallHash",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "A multisig operation has been cancelled."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 465,
            "path": [
                "pallet_bounties",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                },
                {
                    "name": "I"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "BountyProposed",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "BountyIndex",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "New bounty proposal."
                        ]
                    },
                    {
                        "name": "BountyRejected",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "BountyIndex",
                                "docs": []
                            },
                            {
                                "name": "bond",
                                "type": 6,
                                "typeName": "BalanceOf<T, I>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "A bounty proposal was rejected; funds were slashed."
                        ]
                    },
                    {
                        "name": "BountyBecameActive",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "BountyIndex",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "A bounty proposal is funded and became active."
                        ]
                    },
                    {
                        "name": "BountyAwarded",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "BountyIndex",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "A bounty is awarded to a beneficiary."
                        ]
                    },
                    {
                        "name": "BountyClaimed",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "BountyIndex",
                                "docs": []
                            },
                            {
                                "name": "payout",
                                "type": 6,
                                "typeName": "BalanceOf<T, I>",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "A bounty is claimed by beneficiary."
                        ]
                    },
                    {
                        "name": "BountyCanceled",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "BountyIndex",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "A bounty is cancelled."
                        ]
                    },
                    {
                        "name": "BountyExtended",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "BountyIndex",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "A bounty expiry is extended."
                        ]
                    },
                    {
                        "name": "BountyApproved",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "BountyIndex",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "A bounty is approved."
                        ]
                    },
                    {
                        "name": "CuratorProposed",
                        "fields": [
                            {
                                "name": "bounty_id",
                                "type": 4,
                                "typeName": "BountyIndex",
                                "docs": []
                            },
                            {
                                "name": "curator",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": [
                            "A bounty curator is proposed."
                        ]
                    },
                    {
                        "name": "CuratorUnassigned",
                        "fields": [
                            {
                                "name": "bounty_id",
                                "type": 4,
                                "typeName": "BountyIndex",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": [
                            "A bounty curator is unassigned."
                        ]
                    },
                    {
                        "name": "CuratorAccepted",
                        "fields": [
                            {
                                "name": "bounty_id",
                                "type": 4,
                                "typeName": "BountyIndex",
                                "docs": []
                            },
                            {
                                "name": "curator",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 10,
                        "docs": [
                            "A bounty curator is accepted."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 466,
            "path": [
                "pallet_child_bounties",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Added",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "BountyIndex",
                                "docs": []
                            },
                            {
                                "name": "child_index",
                                "type": 4,
                                "typeName": "BountyIndex",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "A child-bounty is added."
                        ]
                    },
                    {
                        "name": "Awarded",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "BountyIndex",
                                "docs": []
                            },
                            {
                                "name": "child_index",
                                "type": 4,
                                "typeName": "BountyIndex",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "A child-bounty is awarded to a beneficiary."
                        ]
                    },
                    {
                        "name": "Claimed",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "BountyIndex",
                                "docs": []
                            },
                            {
                                "name": "child_index",
                                "type": 4,
                                "typeName": "BountyIndex",
                                "docs": []
                            },
                            {
                                "name": "payout",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "A child-bounty is claimed by beneficiary."
                        ]
                    },
                    {
                        "name": "Canceled",
                        "fields": [
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "BountyIndex",
                                "docs": []
                            },
                            {
                                "name": "child_index",
                                "type": 4,
                                "typeName": "BountyIndex",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "A child-bounty is cancelled."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 467,
            "path": [
                "pallet_election_provider_multi_phase",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "SolutionStored",
                        "fields": [
                            {
                                "name": "compute",
                                "type": 468,
                                "typeName": "ElectionCompute",
                                "docs": []
                            },
                            {
                                "name": "origin",
                                "type": 127,
                                "typeName": "Option<T::AccountId>",
                                "docs": []
                            },
                            {
                                "name": "prev_ejected",
                                "type": 8,
                                "typeName": "bool",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "A solution was stored with the given compute.",
                            "",
                            "The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,",
                            "the stored solution was submitted in the signed phase by a miner with the `AccountId`.",
                            "Otherwise, the solution was stored either during the unsigned phase or by",
                            "`T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make",
                            "room for this one."
                        ]
                    },
                    {
                        "name": "ElectionFinalized",
                        "fields": [
                            {
                                "name": "compute",
                                "type": 468,
                                "typeName": "ElectionCompute",
                                "docs": []
                            },
                            {
                                "name": "score",
                                "type": 253,
                                "typeName": "ElectionScore",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "The election has been finalized, with the given computation and score."
                        ]
                    },
                    {
                        "name": "ElectionFailed",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "An election failed.",
                            "",
                            "Not much can be said about which computes failed in the process."
                        ]
                    },
                    {
                        "name": "Rewarded",
                        "fields": [
                            {
                                "name": "account",
                                "type": 0,
                                "typeName": "<T as frame_system::Config>::AccountId",
                                "docs": []
                            },
                            {
                                "name": "value",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "An account has been rewarded for their signed submission being finalized."
                        ]
                    },
                    {
                        "name": "Slashed",
                        "fields": [
                            {
                                "name": "account",
                                "type": 0,
                                "typeName": "<T as frame_system::Config>::AccountId",
                                "docs": []
                            },
                            {
                                "name": "value",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "An account has been slashed for submitting an invalid signed submission."
                        ]
                    },
                    {
                        "name": "PhaseTransitioned",
                        "fields": [
                            {
                                "name": "from",
                                "type": 469,
                                "typeName": "Phase<BlockNumberFor<T>>",
                                "docs": []
                            },
                            {
                                "name": "to",
                                "type": 469,
                                "typeName": "Phase<BlockNumberFor<T>>",
                                "docs": []
                            },
                            {
                                "name": "round",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "There was a phase transition in a given round."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 468,
            "path": [
                "pallet_election_provider_multi_phase",
                "ElectionCompute"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "OnChain",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Signed",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Unsigned",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Fallback",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "Emergency",
                        "fields": [],
                        "index": 4,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 469,
            "path": [
                "pallet_election_provider_multi_phase",
                "Phase"
            ],
            "params": [
                {
                    "name": "Bn",
                    "type": 4
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Off",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Signed",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Unsigned",
                        "fields": [
                            {
                                "type": 470,
                                "typeName": "(bool, Bn)",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Emergency",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 470,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    8,
                    4
                ]
            },
            "docs": []
        },
        {
            "id": 471,
            "path": [
                "pallet_bags_list",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                },
                {
                    "name": "I"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Rebagged",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "from",
                                "type": 12,
                                "typeName": "T::Score",
                                "docs": []
                            },
                            {
                                "name": "to",
                                "type": 12,
                                "typeName": "T::Score",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Moved an account from one bag to another."
                        ]
                    },
                    {
                        "name": "ScoreUpdated",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "new_score",
                                "type": 12,
                                "typeName": "T::Score",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Updated the score of some account to the given amount."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 472,
            "path": [
                "pallet_nomination_pools",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Created",
                        "fields": [
                            {
                                "name": "depositor",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "A pool has been created."
                        ]
                    },
                    {
                        "name": "Bonded",
                        "fields": [
                            {
                                "name": "member",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "bonded",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "joined",
                                "type": 8,
                                "typeName": "bool",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "A member has became bonded in a pool."
                        ]
                    },
                    {
                        "name": "PaidOut",
                        "fields": [
                            {
                                "name": "member",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "payout",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "A payout has been made to a member."
                        ]
                    },
                    {
                        "name": "Unbonded",
                        "fields": [
                            {
                                "name": "member",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "balance",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "points",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "era",
                                "type": 4,
                                "typeName": "EraIndex",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "A member has unbonded from their pool.",
                            "",
                            "- `balance` is the corresponding balance of the number of points that has been",
                            "  requested to be unbonded (the argument of the `unbond` transaction) from the bonded",
                            "  pool.",
                            "- `points` is the number of points that are issued as a result of `balance` being",
                            "dissolved into the corresponding unbonding pool.",
                            "- `era` is the era in which the balance will be unbonded.",
                            "In the absence of slashing, these values will match. In the presence of slashing, the",
                            "number of points that are issued in the unbonding pool will be less than the amount",
                            "requested to be unbonded."
                        ]
                    },
                    {
                        "name": "Withdrawn",
                        "fields": [
                            {
                                "name": "member",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "balance",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "points",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "A member has withdrawn from their pool.",
                            "",
                            "The given number of `points` have been dissolved in return of `balance`.",
                            "",
                            "Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance",
                            "will be 1."
                        ]
                    },
                    {
                        "name": "Destroyed",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "A pool has been destroyed."
                        ]
                    },
                    {
                        "name": "StateChanged",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "new_state",
                                "type": 264,
                                "typeName": "PoolState",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "The state of a pool has changed"
                        ]
                    },
                    {
                        "name": "MemberRemoved",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "member",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "A member has been removed from a pool.",
                            "",
                            "The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked)."
                        ]
                    },
                    {
                        "name": "RolesUpdated",
                        "fields": [
                            {
                                "name": "root",
                                "type": 127,
                                "typeName": "Option<T::AccountId>",
                                "docs": []
                            },
                            {
                                "name": "bouncer",
                                "type": 127,
                                "typeName": "Option<T::AccountId>",
                                "docs": []
                            },
                            {
                                "name": "nominator",
                                "type": 127,
                                "typeName": "Option<T::AccountId>",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": [
                            "The roles of a pool have been updated to the given new roles. Note that the depositor",
                            "can never change."
                        ]
                    },
                    {
                        "name": "PoolSlashed",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "balance",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": [
                            "The active balance of pool `pool_id` has been slashed to `balance`."
                        ]
                    },
                    {
                        "name": "UnbondingPoolSlashed",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "era",
                                "type": 4,
                                "typeName": "EraIndex",
                                "docs": []
                            },
                            {
                                "name": "balance",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 10,
                        "docs": [
                            "The unbond pool at `era` of pool `pool_id` has been slashed to `balance`."
                        ]
                    },
                    {
                        "name": "PoolCommissionUpdated",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "current",
                                "type": 270,
                                "typeName": "Option<(Perbill, T::AccountId)>",
                                "docs": []
                            }
                        ],
                        "index": 11,
                        "docs": [
                            "A pool's commission setting has been changed."
                        ]
                    },
                    {
                        "name": "PoolMaxCommissionUpdated",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "max_commission",
                                "type": 43,
                                "typeName": "Perbill",
                                "docs": []
                            }
                        ],
                        "index": 12,
                        "docs": [
                            "A pool's maximum commission setting has been changed."
                        ]
                    },
                    {
                        "name": "PoolCommissionChangeRateUpdated",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "change_rate",
                                "type": 272,
                                "typeName": "CommissionChangeRate<BlockNumberFor<T>>",
                                "docs": []
                            }
                        ],
                        "index": 13,
                        "docs": [
                            "A pool's commission `change_rate` has been changed."
                        ]
                    },
                    {
                        "name": "PoolCommissionClaimPermissionUpdated",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "permission",
                                "type": 273,
                                "typeName": "Option<CommissionClaimPermission<T::AccountId>>",
                                "docs": []
                            }
                        ],
                        "index": 14,
                        "docs": [
                            "Pool commission claim permission has been updated."
                        ]
                    },
                    {
                        "name": "PoolCommissionClaimed",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "commission",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 15,
                        "docs": [
                            "Pool commission has been claimed."
                        ]
                    },
                    {
                        "name": "MinBalanceDeficitAdjusted",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 16,
                        "docs": [
                            "Topped up deficit in frozen ED of the reward pool."
                        ]
                    },
                    {
                        "name": "MinBalanceExcessAdjusted",
                        "fields": [
                            {
                                "name": "pool_id",
                                "type": 4,
                                "typeName": "PoolId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 17,
                        "docs": [
                            "Claimed excess frozen ED of af the reward pool."
                        ]
                    }
                ]
            },
            "docs": [
                "Events of this pallet."
            ]
        },
        {
            "id": 473,
            "path": [
                "pallet_fast_unstake",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Unstaked",
                        "fields": [
                            {
                                "name": "stash",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "result",
                                "type": 34,
                                "typeName": "DispatchResult",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "A staker was unstaked."
                        ]
                    },
                    {
                        "name": "Slashed",
                        "fields": [
                            {
                                "name": "stash",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "A staker was slashed for requesting fast-unstake whilst being exposed."
                        ]
                    },
                    {
                        "name": "BatchChecked",
                        "fields": [
                            {
                                "name": "eras",
                                "type": 121,
                                "typeName": "Vec<EraIndex>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "A batch was partially checked for the given eras, but the process did not finish."
                        ]
                    },
                    {
                        "name": "BatchFinished",
                        "fields": [
                            {
                                "name": "size",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "A batch of a given size was terminated.",
                            "",
                            "This is always follows by a number of `Unstaked` or `Slashed` events, marking the end",
                            "of the batch. A new batch will be created upon next block."
                        ]
                    },
                    {
                        "name": "InternalError",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "An internal error happened. Operations will be paused now."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 474,
            "path": [
                "polkadot_runtime_parachains",
                "inclusion",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "CandidateBacked",
                        "fields": [
                            {
                                "type": 475,
                                "typeName": "CandidateReceipt<T::Hash>",
                                "docs": []
                            },
                            {
                                "type": 310,
                                "typeName": "HeadData",
                                "docs": []
                            },
                            {
                                "type": 476,
                                "typeName": "CoreIndex",
                                "docs": []
                            },
                            {
                                "type": 477,
                                "typeName": "GroupIndex",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "A candidate was backed. `[candidate, head_data]`"
                        ]
                    },
                    {
                        "name": "CandidateIncluded",
                        "fields": [
                            {
                                "type": 475,
                                "typeName": "CandidateReceipt<T::Hash>",
                                "docs": []
                            },
                            {
                                "type": 310,
                                "typeName": "HeadData",
                                "docs": []
                            },
                            {
                                "type": 476,
                                "typeName": "CoreIndex",
                                "docs": []
                            },
                            {
                                "type": 477,
                                "typeName": "GroupIndex",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "A candidate was included. `[candidate, head_data]`"
                        ]
                    },
                    {
                        "name": "CandidateTimedOut",
                        "fields": [
                            {
                                "type": 475,
                                "typeName": "CandidateReceipt<T::Hash>",
                                "docs": []
                            },
                            {
                                "type": 310,
                                "typeName": "HeadData",
                                "docs": []
                            },
                            {
                                "type": 476,
                                "typeName": "CoreIndex",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "A candidate timed out. `[candidate, head_data]`"
                        ]
                    },
                    {
                        "name": "UpwardMessagesReceived",
                        "fields": [
                            {
                                "name": "from",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "count",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Some upward messages have been received and will be processed."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 475,
            "path": [
                "polkadot_primitives",
                "v7",
                "CandidateReceipt"
            ],
            "params": [
                {
                    "name": "H",
                    "type": 13
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "descriptor",
                        "type": 299,
                        "typeName": "CandidateDescriptor<H>",
                        "docs": []
                    },
                    {
                        "name": "commitments_hash",
                        "type": 13,
                        "typeName": "Hash",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 476,
            "path": [
                "polkadot_primitives",
                "v7",
                "CoreIndex"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 477,
            "path": [
                "polkadot_primitives",
                "v7",
                "GroupIndex"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 478,
            "path": [
                "polkadot_runtime_parachains",
                "paras",
                "pallet",
                "Event"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "CurrentCodeUpdated",
                        "fields": [
                            {
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Current code has been updated for a Para. `para_id`"
                        ]
                    },
                    {
                        "name": "CurrentHeadUpdated",
                        "fields": [
                            {
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Current head has been updated for a Para. `para_id`"
                        ]
                    },
                    {
                        "name": "CodeUpgradeScheduled",
                        "fields": [
                            {
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "A code upgrade has been scheduled for a Para. `para_id`"
                        ]
                    },
                    {
                        "name": "NewHeadNoted",
                        "fields": [
                            {
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "A new head has been noted for a Para. `para_id`"
                        ]
                    },
                    {
                        "name": "ActionQueued",
                        "fields": [
                            {
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "type": 4,
                                "typeName": "SessionIndex",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "A para has been queued to execute pending actions. `para_id`"
                        ]
                    },
                    {
                        "name": "PvfCheckStarted",
                        "fields": [
                            {
                                "type": 302,
                                "typeName": "ValidationCodeHash",
                                "docs": []
                            },
                            {
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "The given para either initiated or subscribed to a PVF check for the given validation",
                            "code. `code_hash` `para_id`"
                        ]
                    },
                    {
                        "name": "PvfCheckAccepted",
                        "fields": [
                            {
                                "type": 302,
                                "typeName": "ValidationCodeHash",
                                "docs": []
                            },
                            {
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "The given validation code was accepted by the PVF pre-checking vote.",
                            "`code_hash` `para_id`"
                        ]
                    },
                    {
                        "name": "PvfCheckRejected",
                        "fields": [
                            {
                                "type": 302,
                                "typeName": "ValidationCodeHash",
                                "docs": []
                            },
                            {
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "The given validation code was rejected by the PVF pre-checking vote.",
                            "`code_hash` `para_id`"
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 479,
            "path": [
                "polkadot_runtime_parachains",
                "hrmp",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "OpenChannelRequested",
                        "fields": [
                            {
                                "name": "sender",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "recipient",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "proposed_max_capacity",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "proposed_max_message_size",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Open HRMP channel requested."
                        ]
                    },
                    {
                        "name": "OpenChannelCanceled",
                        "fields": [
                            {
                                "name": "by_parachain",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "channel_id",
                                "type": 326,
                                "typeName": "HrmpChannelId",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "An HRMP channel request sent by the receiver was canceled by either party."
                        ]
                    },
                    {
                        "name": "OpenChannelAccepted",
                        "fields": [
                            {
                                "name": "sender",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "recipient",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Open HRMP channel accepted."
                        ]
                    },
                    {
                        "name": "ChannelClosed",
                        "fields": [
                            {
                                "name": "by_parachain",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "channel_id",
                                "type": 326,
                                "typeName": "HrmpChannelId",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "HRMP channel closed."
                        ]
                    },
                    {
                        "name": "HrmpChannelForceOpened",
                        "fields": [
                            {
                                "name": "sender",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "recipient",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "proposed_max_capacity",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "proposed_max_message_size",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "An HRMP channel was opened via Root origin."
                        ]
                    },
                    {
                        "name": "HrmpSystemChannelOpened",
                        "fields": [
                            {
                                "name": "sender",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "recipient",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "proposed_max_capacity",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "proposed_max_message_size",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "An HRMP channel was opened with a system chain."
                        ]
                    },
                    {
                        "name": "OpenChannelDepositsUpdated",
                        "fields": [
                            {
                                "name": "sender",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "recipient",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "An HRMP channel's deposits were updated."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 480,
            "path": [
                "polkadot_runtime_parachains",
                "disputes",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "DisputeInitiated",
                        "fields": [
                            {
                                "type": 315,
                                "typeName": "CandidateHash",
                                "docs": []
                            },
                            {
                                "type": 481,
                                "typeName": "DisputeLocation",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "A dispute has been initiated. \\[candidate hash, dispute location\\]"
                        ]
                    },
                    {
                        "name": "DisputeConcluded",
                        "fields": [
                            {
                                "type": 315,
                                "typeName": "CandidateHash",
                                "docs": []
                            },
                            {
                                "type": 482,
                                "typeName": "DisputeResult",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "A dispute has concluded for or against a candidate.",
                            "`\\[para id, candidate hash, dispute result\\]`"
                        ]
                    },
                    {
                        "name": "Revert",
                        "fields": [
                            {
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "A dispute has concluded with supermajority against a candidate.",
                            "Block authors should no longer build on top of this head and should",
                            "instead revert the block at the given height. This should be the",
                            "number of the child of the last known valid block in the chain."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 481,
            "path": [
                "polkadot_runtime_parachains",
                "disputes",
                "DisputeLocation"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Local",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Remote",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 482,
            "path": [
                "polkadot_runtime_parachains",
                "disputes",
                "DisputeResult"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Valid",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Invalid",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 483,
            "path": [
                "polkadot_runtime_parachains",
                "assigner_on_demand",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "OnDemandOrderPlaced",
                        "fields": [
                            {
                                "name": "para_id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "spot_price",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "ordered_by",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "An order was placed at some spot price amount by orderer ordered_by"
                        ]
                    },
                    {
                        "name": "SpotPriceSet",
                        "fields": [
                            {
                                "name": "spot_price",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "The value of the spot price has likely changed"
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 484,
            "path": [
                "polkadot_runtime_common",
                "paras_registrar",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Registered",
                        "fields": [
                            {
                                "name": "para_id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "manager",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Deregistered",
                        "fields": [
                            {
                                "name": "para_id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Reserved",
                        "fields": [
                            {
                                "name": "para_id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Swapped",
                        "fields": [
                            {
                                "name": "para_id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "other_id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 485,
            "path": [
                "polkadot_runtime_common",
                "slots",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "NewLeasePeriod",
                        "fields": [
                            {
                                "name": "lease_period",
                                "type": 4,
                                "typeName": "LeasePeriodOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "A new `[lease_period]` is beginning."
                        ]
                    },
                    {
                        "name": "Leased",
                        "fields": [
                            {
                                "name": "para_id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "leaser",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "period_begin",
                                "type": 4,
                                "typeName": "LeasePeriodOf<T>",
                                "docs": []
                            },
                            {
                                "name": "period_count",
                                "type": 4,
                                "typeName": "LeasePeriodOf<T>",
                                "docs": []
                            },
                            {
                                "name": "extra_reserved",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "total_amount",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "A para has won the right to a continuous set of lease periods as a parachain.",
                            "First balance is any extra amount reserved on top of the para's existing deposit.",
                            "Second balance is the total amount reserved."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 486,
            "path": [
                "polkadot_runtime_common",
                "auctions",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "AuctionStarted",
                        "fields": [
                            {
                                "name": "auction_index",
                                "type": 4,
                                "typeName": "AuctionIndex",
                                "docs": []
                            },
                            {
                                "name": "lease_period",
                                "type": 4,
                                "typeName": "LeasePeriodOf<T>",
                                "docs": []
                            },
                            {
                                "name": "ending",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "An auction started. Provides its index and the block number where it will begin to",
                            "close and the first lease period of the quadruplet that is auctioned."
                        ]
                    },
                    {
                        "name": "AuctionClosed",
                        "fields": [
                            {
                                "name": "auction_index",
                                "type": 4,
                                "typeName": "AuctionIndex",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "An auction ended. All funds become unreserved."
                        ]
                    },
                    {
                        "name": "Reserved",
                        "fields": [
                            {
                                "name": "bidder",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "extra_reserved",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "total_amount",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Funds were reserved for a winning bid. First balance is the extra amount reserved.",
                            "Second is the total."
                        ]
                    },
                    {
                        "name": "Unreserved",
                        "fields": [
                            {
                                "name": "bidder",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Funds were unreserved since bidder is no longer active. `[bidder, amount]`"
                        ]
                    },
                    {
                        "name": "ReserveConfiscated",
                        "fields": [
                            {
                                "name": "para_id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "leaser",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Someone attempted to lease the same slot twice for a parachain. The amount is held in",
                            "reserve but no parachain slot has been leased."
                        ]
                    },
                    {
                        "name": "BidAccepted",
                        "fields": [
                            {
                                "name": "bidder",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "para_id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            },
                            {
                                "name": "first_slot",
                                "type": 4,
                                "typeName": "LeasePeriodOf<T>",
                                "docs": []
                            },
                            {
                                "name": "last_slot",
                                "type": 4,
                                "typeName": "LeasePeriodOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "A new bid has been accepted as the current winner."
                        ]
                    },
                    {
                        "name": "WinningOffset",
                        "fields": [
                            {
                                "name": "auction_index",
                                "type": 4,
                                "typeName": "AuctionIndex",
                                "docs": []
                            },
                            {
                                "name": "block_number",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "The winning offset was chosen for an auction. This will map into the `Winning` storage",
                            "map."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 487,
            "path": [
                "polkadot_runtime_common",
                "crowdloan",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Created",
                        "fields": [
                            {
                                "name": "para_id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Create a new crowdloaning campaign."
                        ]
                    },
                    {
                        "name": "Contributed",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "fund_index",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Contributed to a crowd sale."
                        ]
                    },
                    {
                        "name": "Withdrew",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "fund_index",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Withdrew full balance of a contributor."
                        ]
                    },
                    {
                        "name": "PartiallyRefunded",
                        "fields": [
                            {
                                "name": "para_id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "The loans in a fund have been partially dissolved, i.e. there are some left",
                            "over child keys that still need to be killed."
                        ]
                    },
                    {
                        "name": "AllRefunded",
                        "fields": [
                            {
                                "name": "para_id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "All loans in a fund have been refunded."
                        ]
                    },
                    {
                        "name": "Dissolved",
                        "fields": [
                            {
                                "name": "para_id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "Fund is dissolved."
                        ]
                    },
                    {
                        "name": "HandleBidResult",
                        "fields": [
                            {
                                "name": "para_id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "result",
                                "type": 34,
                                "typeName": "DispatchResult",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "The result of trying to submit a new bid to the Slots pallet."
                        ]
                    },
                    {
                        "name": "Edited",
                        "fields": [
                            {
                                "name": "para_id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "The configuration to a crowdloan has been edited."
                        ]
                    },
                    {
                        "name": "MemoUpdated",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "para_id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "memo",
                                "type": 14,
                                "typeName": "Vec<u8>",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": [
                            "A memo has been updated."
                        ]
                    },
                    {
                        "name": "AddedToNewRaise",
                        "fields": [
                            {
                                "name": "para_id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": [
                            "A parachain has been moved to `NewRaise`"
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 488,
            "path": [
                "polkadot_runtime_parachains",
                "coretime",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "RevenueInfoRequested",
                        "fields": [
                            {
                                "name": "when",
                                "type": 4,
                                "typeName": "BlockNumberFor<T>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "The broker chain has asked for revenue information for a specific block."
                        ]
                    },
                    {
                        "name": "CoreAssigned",
                        "fields": [
                            {
                                "name": "core",
                                "type": 476,
                                "typeName": "CoreIndex",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "A core has received a new assignment from the broker chain."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 489,
            "path": [
                "pallet_state_trie_migration",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Migrated",
                        "fields": [
                            {
                                "name": "top",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "child",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "compute",
                                "type": 490,
                                "typeName": "MigrationCompute",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Given number of `(top, child)` keys were migrated respectively, with the given",
                            "`compute`."
                        ]
                    },
                    {
                        "name": "Slashed",
                        "fields": [
                            {
                                "name": "who",
                                "type": 0,
                                "typeName": "T::AccountId",
                                "docs": []
                            },
                            {
                                "name": "amount",
                                "type": 6,
                                "typeName": "BalanceOf<T>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Some account got slashed by the given amount."
                        ]
                    },
                    {
                        "name": "AutoMigrationFinished",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "The auto migration task finished."
                        ]
                    },
                    {
                        "name": "Halted",
                        "fields": [
                            {
                                "name": "error",
                                "type": 491,
                                "typeName": "Error<T>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Migration got halted due to an error or miss-configuration."
                        ]
                    }
                ]
            },
            "docs": [
                "Inner events of this pallet."
            ]
        },
        {
            "id": 490,
            "path": [
                "pallet_state_trie_migration",
                "pallet",
                "MigrationCompute"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Signed",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Auto",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 491,
            "path": [
                "pallet_state_trie_migration",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "MaxSignedLimits",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "Max signed limits not respected."
                        ]
                    },
                    {
                        "name": "KeyTooLong",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "A key was longer than the configured maximum.",
                            "",
                            "This means that the migration halted at the current [`Progress`] and",
                            "can be resumed with a larger [`crate::Config::MaxKeyLen`] value.",
                            "Retrying with the same [`crate::Config::MaxKeyLen`] value will not work.",
                            "The value should only be increased to avoid a storage migration for the currently",
                            "stored [`crate::Progress::LastKey`]."
                        ]
                    },
                    {
                        "name": "NotEnoughFunds",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "submitter does not have enough funds."
                        ]
                    },
                    {
                        "name": "BadWitness",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "Bad witness data provided."
                        ]
                    },
                    {
                        "name": "SignedMigrationNotAllowed",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "Signed migration is not allowed because the maximum limit is not set yet."
                        ]
                    },
                    {
                        "name": "BadChildRoot",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "Bad child root provided."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 492,
            "path": [
                "pallet_xcm",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Attempted",
                        "fields": [
                            {
                                "name": "outcome",
                                "type": 493,
                                "typeName": "xcm::latest::Outcome",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Execution of an XCM message was attempted."
                        ]
                    },
                    {
                        "name": "Sent",
                        "fields": [
                            {
                                "name": "origin",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "destination",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "message",
                                "type": 400,
                                "typeName": "Xcm<()>",
                                "docs": []
                            },
                            {
                                "name": "message_id",
                                "type": 1,
                                "typeName": "XcmHash",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "A XCM message was sent."
                        ]
                    },
                    {
                        "name": "UnexpectedResponse",
                        "fields": [
                            {
                                "name": "origin",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "query_id",
                                "type": 12,
                                "typeName": "QueryId",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Query response received which does not match a registered query. This may be because a",
                            "matching query was never registered, it may be because it is a duplicate response, or",
                            "because the query timed out."
                        ]
                    },
                    {
                        "name": "ResponseReady",
                        "fields": [
                            {
                                "name": "query_id",
                                "type": 12,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "response",
                                "type": 408,
                                "typeName": "Response",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "Query response has been received and is ready for taking with `take_response`. There is",
                            "no registered notification call."
                        ]
                    },
                    {
                        "name": "Notified",
                        "fields": [
                            {
                                "name": "query_id",
                                "type": 12,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "pallet_index",
                                "type": 2,
                                "typeName": "u8",
                                "docs": []
                            },
                            {
                                "name": "call_index",
                                "type": 2,
                                "typeName": "u8",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": [
                            "Query response has been received and query is removed. The registered notification has",
                            "been dispatched and executed successfully."
                        ]
                    },
                    {
                        "name": "NotifyOverweight",
                        "fields": [
                            {
                                "name": "query_id",
                                "type": 12,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "pallet_index",
                                "type": 2,
                                "typeName": "u8",
                                "docs": []
                            },
                            {
                                "name": "call_index",
                                "type": 2,
                                "typeName": "u8",
                                "docs": []
                            },
                            {
                                "name": "actual_weight",
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            },
                            {
                                "name": "max_budgeted_weight",
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": [
                            "Query response has been received and query is removed. The registered notification",
                            "could not be dispatched because the dispatch weight is greater than the maximum weight",
                            "originally budgeted by this runtime for the query result."
                        ]
                    },
                    {
                        "name": "NotifyDispatchError",
                        "fields": [
                            {
                                "name": "query_id",
                                "type": 12,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "pallet_index",
                                "type": 2,
                                "typeName": "u8",
                                "docs": []
                            },
                            {
                                "name": "call_index",
                                "type": 2,
                                "typeName": "u8",
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": [
                            "Query response has been received and query is removed. There was a general error with",
                            "dispatching the notification call."
                        ]
                    },
                    {
                        "name": "NotifyDecodeFailed",
                        "fields": [
                            {
                                "name": "query_id",
                                "type": 12,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "pallet_index",
                                "type": 2,
                                "typeName": "u8",
                                "docs": []
                            },
                            {
                                "name": "call_index",
                                "type": 2,
                                "typeName": "u8",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": [
                            "Query response has been received and query is removed. The dispatch was unable to be",
                            "decoded into a `Call`; this might be due to dispatch function having a signature which",
                            "is not `(origin, QueryId, Response)`."
                        ]
                    },
                    {
                        "name": "InvalidResponder",
                        "fields": [
                            {
                                "name": "origin",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "query_id",
                                "type": 12,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "expected_location",
                                "type": 413,
                                "typeName": "Option<Location>",
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": [
                            "Expected query response has been received but the origin location of the response does",
                            "not match that expected. The query remains registered for a later, valid, response to",
                            "be received and acted upon."
                        ]
                    },
                    {
                        "name": "InvalidResponderVersion",
                        "fields": [
                            {
                                "name": "origin",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "query_id",
                                "type": 12,
                                "typeName": "QueryId",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": [
                            "Expected query response has been received but the expected origin location placed in",
                            "storage by this runtime previously cannot be decoded. The query remains registered.",
                            "",
                            "This is unexpected (since a location placed in storage in a previously executing",
                            "runtime should be readable prior to query timeout) and dangerous since the possibly",
                            "valid response will be dropped. Manual governance intervention is probably going to be",
                            "needed."
                        ]
                    },
                    {
                        "name": "ResponseTaken",
                        "fields": [
                            {
                                "name": "query_id",
                                "type": 12,
                                "typeName": "QueryId",
                                "docs": []
                            }
                        ],
                        "index": 10,
                        "docs": [
                            "Received query response has been read and removed."
                        ]
                    },
                    {
                        "name": "AssetsTrapped",
                        "fields": [
                            {
                                "name": "hash",
                                "type": 13,
                                "typeName": "H256",
                                "docs": []
                            },
                            {
                                "name": "origin",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "assets",
                                "type": 418,
                                "typeName": "VersionedAssets",
                                "docs": []
                            }
                        ],
                        "index": 11,
                        "docs": [
                            "Some assets have been placed in an asset trap."
                        ]
                    },
                    {
                        "name": "VersionChangeNotified",
                        "fields": [
                            {
                                "name": "destination",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "result",
                                "type": 4,
                                "typeName": "XcmVersion",
                                "docs": []
                            },
                            {
                                "name": "cost",
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            },
                            {
                                "name": "message_id",
                                "type": 1,
                                "typeName": "XcmHash",
                                "docs": []
                            }
                        ],
                        "index": 12,
                        "docs": [
                            "An XCM version change notification message has been attempted to be sent.",
                            "",
                            "The cost of sending it (borne by the chain) is included."
                        ]
                    },
                    {
                        "name": "SupportedVersionChanged",
                        "fields": [
                            {
                                "name": "location",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "version",
                                "type": 4,
                                "typeName": "XcmVersion",
                                "docs": []
                            }
                        ],
                        "index": 13,
                        "docs": [
                            "The supported version of a location has been changed. This might be through an",
                            "automatic notification or a manual intervention."
                        ]
                    },
                    {
                        "name": "NotifyTargetSendFail",
                        "fields": [
                            {
                                "name": "location",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "query_id",
                                "type": 12,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "error",
                                "type": 386,
                                "typeName": "XcmError",
                                "docs": []
                            }
                        ],
                        "index": 14,
                        "docs": [
                            "A given location which had a version change subscription was dropped owing to an error",
                            "sending the notification to it."
                        ]
                    },
                    {
                        "name": "NotifyTargetMigrationFail",
                        "fields": [
                            {
                                "name": "location",
                                "type": 81,
                                "typeName": "VersionedLocation",
                                "docs": []
                            },
                            {
                                "name": "query_id",
                                "type": 12,
                                "typeName": "QueryId",
                                "docs": []
                            }
                        ],
                        "index": 15,
                        "docs": [
                            "A given location which had a version change subscription was dropped owing to an error",
                            "migrating the location to our new XCM format."
                        ]
                    },
                    {
                        "name": "InvalidQuerierVersion",
                        "fields": [
                            {
                                "name": "origin",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "query_id",
                                "type": 12,
                                "typeName": "QueryId",
                                "docs": []
                            }
                        ],
                        "index": 16,
                        "docs": [
                            "Expected query response has been received but the expected querier location placed in",
                            "storage by this runtime previously cannot be decoded. The query remains registered.",
                            "",
                            "This is unexpected (since a location placed in storage in a previously executing",
                            "runtime should be readable prior to query timeout) and dangerous since the possibly",
                            "valid response will be dropped. Manual governance intervention is probably going to be",
                            "needed."
                        ]
                    },
                    {
                        "name": "InvalidQuerier",
                        "fields": [
                            {
                                "name": "origin",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "query_id",
                                "type": 12,
                                "typeName": "QueryId",
                                "docs": []
                            },
                            {
                                "name": "expected_querier",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "maybe_actual_querier",
                                "type": 413,
                                "typeName": "Option<Location>",
                                "docs": []
                            }
                        ],
                        "index": 17,
                        "docs": [
                            "Expected query response has been received but the querier location of the response does",
                            "not match the expected. The query remains registered for a later, valid, response to",
                            "be received and acted upon."
                        ]
                    },
                    {
                        "name": "VersionNotifyStarted",
                        "fields": [
                            {
                                "name": "destination",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "cost",
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            },
                            {
                                "name": "message_id",
                                "type": 1,
                                "typeName": "XcmHash",
                                "docs": []
                            }
                        ],
                        "index": 18,
                        "docs": [
                            "A remote has requested XCM version change notification from us and we have honored it.",
                            "A version information message is sent to them and its cost is included."
                        ]
                    },
                    {
                        "name": "VersionNotifyRequested",
                        "fields": [
                            {
                                "name": "destination",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "cost",
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            },
                            {
                                "name": "message_id",
                                "type": 1,
                                "typeName": "XcmHash",
                                "docs": []
                            }
                        ],
                        "index": 19,
                        "docs": [
                            "We have requested that a remote chain send us XCM version change notifications."
                        ]
                    },
                    {
                        "name": "VersionNotifyUnrequested",
                        "fields": [
                            {
                                "name": "destination",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "cost",
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            },
                            {
                                "name": "message_id",
                                "type": 1,
                                "typeName": "XcmHash",
                                "docs": []
                            }
                        ],
                        "index": 20,
                        "docs": [
                            "We have requested that a remote chain stops sending us XCM version change",
                            "notifications."
                        ]
                    },
                    {
                        "name": "FeesPaid",
                        "fields": [
                            {
                                "name": "paying",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "fees",
                                "type": 403,
                                "typeName": "Assets",
                                "docs": []
                            }
                        ],
                        "index": 21,
                        "docs": [
                            "Fees were paid from a location for an operation (often for using `SendXcm`)."
                        ]
                    },
                    {
                        "name": "AssetsClaimed",
                        "fields": [
                            {
                                "name": "hash",
                                "type": 13,
                                "typeName": "H256",
                                "docs": []
                            },
                            {
                                "name": "origin",
                                "type": 67,
                                "typeName": "Location",
                                "docs": []
                            },
                            {
                                "name": "assets",
                                "type": 418,
                                "typeName": "VersionedAssets",
                                "docs": []
                            }
                        ],
                        "index": 22,
                        "docs": [
                            "Some assets have been claimed from an asset trap"
                        ]
                    },
                    {
                        "name": "VersionMigrationFinished",
                        "fields": [
                            {
                                "name": "version",
                                "type": 4,
                                "typeName": "XcmVersion",
                                "docs": []
                            }
                        ],
                        "index": 23,
                        "docs": [
                            "A XCM version migration finished."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 493,
            "path": [
                "staging_xcm",
                "v4",
                "traits",
                "Outcome"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Complete",
                        "fields": [
                            {
                                "name": "used",
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Incomplete",
                        "fields": [
                            {
                                "name": "used",
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            },
                            {
                                "name": "error",
                                "type": 386,
                                "typeName": "Error",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Error",
                        "fields": [
                            {
                                "name": "error",
                                "type": 386,
                                "typeName": "Error",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 494,
            "path": [
                "pallet_message_queue",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "ProcessingFailed",
                        "fields": [
                            {
                                "name": "id",
                                "type": 13,
                                "typeName": "H256",
                                "docs": [
                                    "The `blake2_256` hash of the message."
                                ]
                            },
                            {
                                "name": "origin",
                                "type": 433,
                                "typeName": "MessageOriginOf<T>",
                                "docs": [
                                    "The queue of the message."
                                ]
                            },
                            {
                                "name": "error",
                                "type": 495,
                                "typeName": "ProcessMessageError",
                                "docs": [
                                    "The error that occurred.",
                                    "",
                                    "This error is pretty opaque. More fine-grained errors need to be emitted as events",
                                    "by the `MessageProcessor`."
                                ]
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "Message discarded due to an error in the `MessageProcessor` (usually a format error)."
                        ]
                    },
                    {
                        "name": "Processed",
                        "fields": [
                            {
                                "name": "id",
                                "type": 13,
                                "typeName": "H256",
                                "docs": [
                                    "The `blake2_256` hash of the message."
                                ]
                            },
                            {
                                "name": "origin",
                                "type": 433,
                                "typeName": "MessageOriginOf<T>",
                                "docs": [
                                    "The queue of the message."
                                ]
                            },
                            {
                                "name": "weight_used",
                                "type": 10,
                                "typeName": "Weight",
                                "docs": [
                                    "How much weight was used to process the message."
                                ]
                            },
                            {
                                "name": "success",
                                "type": 8,
                                "typeName": "bool",
                                "docs": [
                                    "Whether the message was processed.",
                                    "",
                                    "Note that this does not mean that the underlying `MessageProcessor` was internally",
                                    "successful. It *solely* means that the MQ pallet will treat this as a success",
                                    "condition and discard the message. Any internal error needs to be emitted as events",
                                    "by the `MessageProcessor`."
                                ]
                            }
                        ],
                        "index": 1,
                        "docs": [
                            "Message is processed."
                        ]
                    },
                    {
                        "name": "OverweightEnqueued",
                        "fields": [
                            {
                                "name": "id",
                                "type": 1,
                                "typeName": "[u8; 32]",
                                "docs": [
                                    "The `blake2_256` hash of the message."
                                ]
                            },
                            {
                                "name": "origin",
                                "type": 433,
                                "typeName": "MessageOriginOf<T>",
                                "docs": [
                                    "The queue of the message."
                                ]
                            },
                            {
                                "name": "page_index",
                                "type": 4,
                                "typeName": "PageIndex",
                                "docs": [
                                    "The page of the message."
                                ]
                            },
                            {
                                "name": "message_index",
                                "type": 4,
                                "typeName": "T::Size",
                                "docs": [
                                    "The index of the message within the page."
                                ]
                            }
                        ],
                        "index": 2,
                        "docs": [
                            "Message placed in overweight queue."
                        ]
                    },
                    {
                        "name": "PageReaped",
                        "fields": [
                            {
                                "name": "origin",
                                "type": 433,
                                "typeName": "MessageOriginOf<T>",
                                "docs": [
                                    "The queue of the page."
                                ]
                            },
                            {
                                "name": "index",
                                "type": 4,
                                "typeName": "PageIndex",
                                "docs": [
                                    "The index of the page."
                                ]
                            }
                        ],
                        "index": 3,
                        "docs": [
                            "This page was reaped."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 495,
            "path": [
                "frame_support",
                "traits",
                "messages",
                "ProcessMessageError"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "BadFormat",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Corrupt",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Unsupported",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Overweight",
                        "fields": [
                            {
                                "type": 10,
                                "typeName": "Weight",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "Yield",
                        "fields": [],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "StackLimitReached",
                        "fields": [],
                        "index": 5,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 496,
            "path": [
                "pallet_asset_rate",
                "pallet",
                "Event"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "AssetRateCreated",
                        "fields": [
                            {
                                "name": "asset_kind",
                                "type": 55,
                                "typeName": "T::AssetKind",
                                "docs": []
                            },
                            {
                                "name": "rate",
                                "type": 436,
                                "typeName": "FixedU128",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "AssetRateRemoved",
                        "fields": [
                            {
                                "name": "asset_kind",
                                "type": 55,
                                "typeName": "T::AssetKind",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "AssetRateUpdated",
                        "fields": [
                            {
                                "name": "asset_kind",
                                "type": 55,
                                "typeName": "T::AssetKind",
                                "docs": []
                            },
                            {
                                "name": "old",
                                "type": 436,
                                "typeName": "FixedU128",
                                "docs": []
                            },
                            {
                                "name": "new",
                                "type": 436,
                                "typeName": "FixedU128",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": [
                "The `Event` enum of this pallet"
            ]
        },
        {
            "id": 497,
            "path": [
                "frame_system",
                "Phase"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "ApplyExtrinsic",
                        "fields": [
                            {
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Finalization",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Initialization",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 498,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 32
            },
            "docs": []
        },
        {
            "id": 499,
            "path": [
                "frame_system",
                "LastRuntimeUpgradeInfo"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "spec_version",
                        "type": 59,
                        "typeName": "codec::Compact<u32>",
                        "docs": []
                    },
                    {
                        "name": "spec_name",
                        "type": 500,
                        "typeName": "sp_runtime::RuntimeString",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 500,
            "path": [],
            "params": [],
            "def": {
                "tag": "primitive",
                "value": {
                    "tag": "str"
                }
            },
            "docs": []
        },
        {
            "id": 501,
            "path": [
                "frame_system",
                "CodeUpgradeAuthorization"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "code_hash",
                        "type": 13,
                        "typeName": "T::Hash",
                        "docs": []
                    },
                    {
                        "name": "check_version",
                        "type": 8,
                        "typeName": "bool",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 502,
            "path": [
                "frame_system",
                "limits",
                "BlockWeights"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "base_block",
                        "type": 10,
                        "typeName": "Weight",
                        "docs": []
                    },
                    {
                        "name": "max_block",
                        "type": 10,
                        "typeName": "Weight",
                        "docs": []
                    },
                    {
                        "name": "per_class",
                        "type": 503,
                        "typeName": "PerDispatchClass<WeightsPerClass>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 503,
            "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 504
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "normal",
                        "type": 504,
                        "typeName": "T",
                        "docs": []
                    },
                    {
                        "name": "operational",
                        "type": 504,
                        "typeName": "T",
                        "docs": []
                    },
                    {
                        "name": "mandatory",
                        "type": 504,
                        "typeName": "T",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 504,
            "path": [
                "frame_system",
                "limits",
                "WeightsPerClass"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "base_extrinsic",
                        "type": 10,
                        "typeName": "Weight",
                        "docs": []
                    },
                    {
                        "name": "max_extrinsic",
                        "type": 452,
                        "typeName": "Option<Weight>",
                        "docs": []
                    },
                    {
                        "name": "max_total",
                        "type": 452,
                        "typeName": "Option<Weight>",
                        "docs": []
                    },
                    {
                        "name": "reserved",
                        "type": 452,
                        "typeName": "Option<Weight>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 505,
            "path": [
                "frame_system",
                "limits",
                "BlockLength"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "max",
                        "type": 506,
                        "typeName": "PerDispatchClass<u32>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 506,
            "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "normal",
                        "type": 4,
                        "typeName": "T",
                        "docs": []
                    },
                    {
                        "name": "operational",
                        "type": 4,
                        "typeName": "T",
                        "docs": []
                    },
                    {
                        "name": "mandatory",
                        "type": 4,
                        "typeName": "T",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 507,
            "path": [
                "sp_weights",
                "RuntimeDbWeight"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "read",
                        "type": 12,
                        "typeName": "u64",
                        "docs": []
                    },
                    {
                        "name": "write",
                        "type": 12,
                        "typeName": "u64",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 508,
            "path": [
                "sp_version",
                "RuntimeVersion"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "spec_name",
                        "type": 500,
                        "typeName": "RuntimeString",
                        "docs": []
                    },
                    {
                        "name": "impl_name",
                        "type": 500,
                        "typeName": "RuntimeString",
                        "docs": []
                    },
                    {
                        "name": "authoring_version",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "spec_version",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "impl_version",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "apis",
                        "type": 509,
                        "typeName": "ApisVec",
                        "docs": []
                    },
                    {
                        "name": "transaction_version",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "state_version",
                        "type": 2,
                        "typeName": "u8",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 509,
            "path": [
                "Cow"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 510
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 510,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 510,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 511
            },
            "docs": []
        },
        {
            "id": 511,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    364,
                    4
                ]
            },
            "docs": []
        },
        {
            "id": 512,
            "path": [
                "frame_system",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "InvalidSpecName",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "The name of specification does not match between the current runtime",
                            "and the new runtime."
                        ]
                    },
                    {
                        "name": "SpecVersionNeedsToIncrease",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "The specification version is not allowed to decrease between the current runtime",
                            "and the new runtime."
                        ]
                    },
                    {
                        "name": "FailedToExtractRuntimeVersion",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "Failed to extract the runtime version from the new runtime.",
                            "",
                            "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                        ]
                    },
                    {
                        "name": "NonDefaultComposite",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "Suicide called when the account has non-default composite data."
                        ]
                    },
                    {
                        "name": "NonZeroRefCount",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "There is a non-zero reference count preventing the account from being purged."
                        ]
                    },
                    {
                        "name": "CallFiltered",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "The origin filter prevent the call to be dispatched."
                        ]
                    },
                    {
                        "name": "MultiBlockMigrationsOngoing",
                        "fields": [],
                        "index": 6,
                        "docs": [
                            "A multi-block migration is ongoing and prevents the current code from being replaced."
                        ]
                    },
                    {
                        "name": "NothingAuthorized",
                        "fields": [],
                        "index": 7,
                        "docs": [
                            "No upgrade authorized."
                        ]
                    },
                    {
                        "name": "Unauthorized",
                        "fields": [],
                        "index": 8,
                        "docs": [
                            "The submitted code is not authorized."
                        ]
                    }
                ]
            },
            "docs": [
                "Error for the System pallet"
            ]
        },
        {
            "id": 513,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 514
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 516,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 514,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 515
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 515,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 515,
            "path": [
                "pallet_scheduler",
                "Scheduled"
            ],
            "params": [
                {
                    "name": "Name",
                    "type": 1
                },
                {
                    "name": "Call",
                    "type": 92
                },
                {
                    "name": "BlockNumber",
                    "type": 4
                },
                {
                    "name": "PalletsOrigin",
                    "type": 159
                },
                {
                    "name": "AccountId",
                    "type": 0
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "maybe_id",
                        "type": 33,
                        "typeName": "Option<Name>",
                        "docs": []
                    },
                    {
                        "name": "priority",
                        "type": 2,
                        "typeName": "schedule::Priority",
                        "docs": []
                    },
                    {
                        "name": "call",
                        "type": 92,
                        "typeName": "Call",
                        "docs": []
                    },
                    {
                        "name": "maybe_periodic",
                        "type": 99,
                        "typeName": "Option<schedule::Period<BlockNumber>>",
                        "docs": []
                    },
                    {
                        "name": "origin",
                        "type": 159,
                        "typeName": "PalletsOrigin",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 516,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 514
            },
            "docs": []
        },
        {
            "id": 517,
            "path": [
                "pallet_scheduler",
                "RetryConfig"
            ],
            "params": [
                {
                    "name": "Period",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "total_retries",
                        "type": 2,
                        "typeName": "u8",
                        "docs": []
                    },
                    {
                        "name": "remaining",
                        "type": 2,
                        "typeName": "u8",
                        "docs": []
                    },
                    {
                        "name": "period",
                        "type": 4,
                        "typeName": "Period",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 518,
            "path": [
                "pallet_scheduler",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "FailedToSchedule",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "Failed to schedule a call"
                        ]
                    },
                    {
                        "name": "NotFound",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "Cannot find the scheduled call."
                        ]
                    },
                    {
                        "name": "TargetBlockNumberInPast",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "Given target block number is in the past."
                        ]
                    },
                    {
                        "name": "RescheduleNoChange",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "Reschedule failed because it does not change scheduled time."
                        ]
                    },
                    {
                        "name": "Named",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "Attempt to use a non-named function on a named task."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 519,
            "path": [
                "pallet_preimage",
                "OldRequestStatus"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                },
                {
                    "name": "Balance",
                    "type": 6
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Unrequested",
                        "fields": [
                            {
                                "name": "deposit",
                                "type": 260,
                                "typeName": "(AccountId, Balance)",
                                "docs": []
                            },
                            {
                                "name": "len",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Requested",
                        "fields": [
                            {
                                "name": "deposit",
                                "type": 520,
                                "typeName": "Option<(AccountId, Balance)>",
                                "docs": []
                            },
                            {
                                "name": "count",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "len",
                                "type": 152,
                                "typeName": "Option<u32>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 520,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 260
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 260,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 521,
            "path": [
                "pallet_preimage",
                "RequestStatus"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                },
                {
                    "name": "Ticket",
                    "type": 522
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Unrequested",
                        "fields": [
                            {
                                "name": "ticket",
                                "type": 523,
                                "typeName": "(AccountId, Ticket)",
                                "docs": []
                            },
                            {
                                "name": "len",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Requested",
                        "fields": [
                            {
                                "name": "maybe_ticket",
                                "type": 524,
                                "typeName": "Option<(AccountId, Ticket)>",
                                "docs": []
                            },
                            {
                                "name": "count",
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            },
                            {
                                "name": "maybe_len",
                                "type": 152,
                                "typeName": "Option<u32>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 522,
            "path": [
                "frame_support",
                "traits",
                "tokens",
                "fungible",
                "HoldConsideration"
            ],
            "params": [
                {
                    "name": "A"
                },
                {
                    "name": "F"
                },
                {
                    "name": "R"
                },
                {
                    "name": "D"
                },
                {
                    "name": "Fp"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 6,
                        "typeName": "F::Balance",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 523,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    0,
                    522
                ]
            },
            "docs": []
        },
        {
            "id": 524,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 523
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 523,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 525,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    13,
                    4
                ]
            },
            "docs": []
        },
        {
            "id": 526,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 2
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 14,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 527,
            "path": [
                "pallet_preimage",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "TooBig",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "Preimage is too large to store on-chain."
                        ]
                    },
                    {
                        "name": "AlreadyNoted",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "Preimage has already been noted on-chain."
                        ]
                    },
                    {
                        "name": "NotAuthorized",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "The user is not authorized to perform this action."
                        ]
                    },
                    {
                        "name": "NotNoted",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "The preimage cannot be removed since it has not yet been noted."
                        ]
                    },
                    {
                        "name": "Requested",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "A preimage may not be removed when there are outstanding requests."
                        ]
                    },
                    {
                        "name": "NotRequested",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "The preimage request cannot be removed since no outstanding requests exist."
                        ]
                    },
                    {
                        "name": "TooMany",
                        "fields": [],
                        "index": 6,
                        "docs": [
                            "More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once."
                        ]
                    },
                    {
                        "name": "TooFew",
                        "fields": [],
                        "index": 7,
                        "docs": [
                            "Too few hashes were requested to be upgraded (i.e. zero)."
                        ]
                    },
                    {
                        "name": "NoCost",
                        "fields": [],
                        "index": 8,
                        "docs": [
                            "No ticket with a cost was returned by [`Config::Consideration`] to store the preimage."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 528,
            "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 529
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 530,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 529,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    105,
                    12
                ]
            },
            "docs": []
        },
        {
            "id": 530,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 529
            },
            "docs": []
        },
        {
            "id": 531,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 1
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 532,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 532,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 1
            },
            "docs": []
        },
        {
            "id": 533,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 534
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 534,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 534,
            "path": [
                "sp_consensus_babe",
                "digests",
                "PreDigest"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Primary",
                        "fields": [
                            {
                                "type": 535,
                                "typeName": "PrimaryPreDigest",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "SecondaryPlain",
                        "fields": [
                            {
                                "type": 537,
                                "typeName": "SecondaryPlainPreDigest",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "SecondaryVRF",
                        "fields": [
                            {
                                "type": 538,
                                "typeName": "SecondaryVRFPreDigest",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 535,
            "path": [
                "sp_consensus_babe",
                "digests",
                "PrimaryPreDigest"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "authority_index",
                        "type": 4,
                        "typeName": "super::AuthorityIndex",
                        "docs": []
                    },
                    {
                        "name": "slot",
                        "type": 106,
                        "typeName": "Slot",
                        "docs": []
                    },
                    {
                        "name": "vrf_signature",
                        "type": 536,
                        "typeName": "VrfSignature",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 536,
            "path": [
                "sp_core",
                "sr25519",
                "vrf",
                "VrfSignature"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "pre_output",
                        "type": 1,
                        "typeName": "VrfPreOutput",
                        "docs": []
                    },
                    {
                        "name": "proof",
                        "type": 146,
                        "typeName": "VrfProof",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 537,
            "path": [
                "sp_consensus_babe",
                "digests",
                "SecondaryPlainPreDigest"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "authority_index",
                        "type": 4,
                        "typeName": "super::AuthorityIndex",
                        "docs": []
                    },
                    {
                        "name": "slot",
                        "type": 106,
                        "typeName": "Slot",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 538,
            "path": [
                "sp_consensus_babe",
                "digests",
                "SecondaryVRFPreDigest"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "authority_index",
                        "type": 4,
                        "typeName": "super::AuthorityIndex",
                        "docs": []
                    },
                    {
                        "name": "slot",
                        "type": 106,
                        "typeName": "Slot",
                        "docs": []
                    },
                    {
                        "name": "vrf_signature",
                        "type": 536,
                        "typeName": "VrfSignature",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 539,
            "path": [
                "sp_consensus_babe",
                "BabeEpochConfiguration"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "c",
                        "type": 109,
                        "typeName": "(u64, u64)",
                        "docs": []
                    },
                    {
                        "name": "allowed_slots",
                        "type": 110,
                        "typeName": "AllowedSlots",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 540,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 541
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 542,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 541,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    12,
                    4
                ]
            },
            "docs": []
        },
        {
            "id": 542,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 541
            },
            "docs": []
        },
        {
            "id": 543,
            "path": [
                "pallet_babe",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "InvalidEquivocationProof",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "An equivocation proof provided as part of an equivocation report is invalid."
                        ]
                    },
                    {
                        "name": "InvalidKeyOwnershipProof",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "A key ownership proof provided as part of an equivocation report is invalid."
                        ]
                    },
                    {
                        "name": "DuplicateOffenceReport",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "A given equivocation report is valid but already previously reported."
                        ]
                    },
                    {
                        "name": "InvalidConfiguration",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "Submitted configuration is invalid."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 544,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    0,
                    6,
                    8
                ]
            },
            "docs": []
        },
        {
            "id": 545,
            "path": [
                "pallet_indices",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "NotAssigned",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "The index was not already assigned."
                        ]
                    },
                    {
                        "name": "NotOwner",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "The index is assigned to another account."
                        ]
                    },
                    {
                        "name": "InUse",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "The index was not available."
                        ]
                    },
                    {
                        "name": "NotTransfer",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "The source and destination accounts are identical."
                        ]
                    },
                    {
                        "name": "Permanent",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "The index is permanent and may not be freed/changed."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 546,
            "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 547
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 549,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 547,
            "path": [
                "pallet_balances",
                "types",
                "BalanceLock"
            ],
            "params": [
                {
                    "name": "Balance",
                    "type": 6
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "id",
                        "type": 364,
                        "typeName": "LockIdentifier",
                        "docs": []
                    },
                    {
                        "name": "amount",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "reasons",
                        "type": 548,
                        "typeName": "Reasons",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 548,
            "path": [
                "pallet_balances",
                "types",
                "Reasons"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Fee",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Misc",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "All",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 549,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 547
            },
            "docs": []
        },
        {
            "id": 550,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 551
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 552,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 551,
            "path": [
                "pallet_balances",
                "types",
                "ReserveData"
            ],
            "params": [
                {
                    "name": "ReserveIdentifier",
                    "type": 364
                },
                {
                    "name": "Balance",
                    "type": 6
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "id",
                        "type": 364,
                        "typeName": "ReserveIdentifier",
                        "docs": []
                    },
                    {
                        "name": "amount",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 552,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 551
            },
            "docs": []
        },
        {
            "id": 553,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 554
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 558,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 554,
            "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "IdAmount"
            ],
            "params": [
                {
                    "name": "Id",
                    "type": 555
                },
                {
                    "name": "Balance",
                    "type": 6
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "id",
                        "type": 555,
                        "typeName": "Id",
                        "docs": []
                    },
                    {
                        "name": "amount",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 555,
            "path": [
                "polkadot_runtime",
                "RuntimeHoldReason"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Preimage",
                        "fields": [
                            {
                                "type": 556,
                                "typeName": "pallet_preimage::HoldReason",
                                "docs": []
                            }
                        ],
                        "index": 10,
                        "docs": []
                    },
                    {
                        "name": "StateTrieMigration",
                        "fields": [
                            {
                                "type": 557,
                                "typeName": "pallet_state_trie_migration::HoldReason",
                                "docs": []
                            }
                        ],
                        "index": 98,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 556,
            "path": [
                "pallet_preimage",
                "pallet",
                "HoldReason"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Preimage",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 557,
            "path": [
                "pallet_state_trie_migration",
                "pallet",
                "HoldReason"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "SlashForMigrate",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 558,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 554
            },
            "docs": []
        },
        {
            "id": 559,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 560
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 563,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 560,
            "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "IdAmount"
            ],
            "params": [
                {
                    "name": "Id",
                    "type": 561
                },
                {
                    "name": "Balance",
                    "type": 6
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "id",
                        "type": 561,
                        "typeName": "Id",
                        "docs": []
                    },
                    {
                        "name": "amount",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 561,
            "path": [
                "polkadot_runtime",
                "RuntimeFreezeReason"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "NominationPools",
                        "fields": [
                            {
                                "type": 562,
                                "typeName": "pallet_nomination_pools::FreezeReason",
                                "docs": []
                            }
                        ],
                        "index": 39,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 562,
            "path": [
                "pallet_nomination_pools",
                "pallet",
                "FreezeReason"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "PoolMinBalance",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 563,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 560
            },
            "docs": []
        },
        {
            "id": 564,
            "path": [
                "pallet_balances",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                },
                {
                    "name": "I"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "VestingBalance",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "Vesting balance too high to send value."
                        ]
                    },
                    {
                        "name": "LiquidityRestrictions",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "Account liquidity restrictions prevent withdrawal."
                        ]
                    },
                    {
                        "name": "InsufficientBalance",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "Balance too low to send value."
                        ]
                    },
                    {
                        "name": "ExistentialDeposit",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "Value too low to create account due to existential deposit."
                        ]
                    },
                    {
                        "name": "Expendability",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "Transfer/payment would kill account."
                        ]
                    },
                    {
                        "name": "ExistingVestingSchedule",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "A vesting schedule already exists for this account."
                        ]
                    },
                    {
                        "name": "DeadAccount",
                        "fields": [],
                        "index": 6,
                        "docs": [
                            "Beneficiary account must pre-exist."
                        ]
                    },
                    {
                        "name": "TooManyReserves",
                        "fields": [],
                        "index": 7,
                        "docs": [
                            "Number of named reserves exceed `MaxReserves`."
                        ]
                    },
                    {
                        "name": "TooManyHolds",
                        "fields": [],
                        "index": 8,
                        "docs": [
                            "Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`."
                        ]
                    },
                    {
                        "name": "TooManyFreezes",
                        "fields": [],
                        "index": 9,
                        "docs": [
                            "Number of freezes exceed `MaxFreezes`."
                        ]
                    },
                    {
                        "name": "IssuanceDeactivated",
                        "fields": [],
                        "index": 10,
                        "docs": [
                            "The issuance cannot be modified since it is already deactivated."
                        ]
                    },
                    {
                        "name": "DeltaZero",
                        "fields": [],
                        "index": 11,
                        "docs": [
                            "The delta cannot be zero."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 565,
            "path": [
                "pallet_transaction_payment",
                "Releases"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "V1Ancient",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "V2",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 566,
            "path": [
                "pallet_staking",
                "StakingLedger"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "stash",
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                    },
                    {
                        "name": "total",
                        "type": 63,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                    },
                    {
                        "name": "active",
                        "type": 63,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                    },
                    {
                        "name": "unlocking",
                        "type": 130,
                        "typeName": "BoundedVec<UnlockChunk<BalanceOf<T>>, T::MaxUnlockingChunks>",
                        "docs": []
                    },
                    {
                        "name": "legacy_claimed_rewards",
                        "type": 567,
                        "typeName": "BoundedVec<EraIndex, T::HistoryDepth>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 567,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 4
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 121,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 568,
            "path": [
                "pallet_staking",
                "Nominations"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "targets",
                        "type": 569,
                        "typeName": "BoundedVec<T::AccountId, MaxNominationsOf<T>>",
                        "docs": []
                    },
                    {
                        "name": "submitted_in",
                        "type": 4,
                        "typeName": "EraIndex",
                        "docs": []
                    },
                    {
                        "name": "suppressed",
                        "type": 8,
                        "typeName": "bool",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 569,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 0
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 116,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 570,
            "path": [
                "pallet_staking",
                "ActiveEraInfo"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "index",
                        "type": 4,
                        "typeName": "EraIndex",
                        "docs": []
                    },
                    {
                        "name": "start",
                        "type": 571,
                        "typeName": "Option<u64>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 571,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 12
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 12,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 572,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    4,
                    0
                ]
            },
            "docs": []
        },
        {
            "id": 573,
            "path": [
                "sp_staking",
                "Exposure"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                },
                {
                    "name": "Balance",
                    "type": 6
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "total",
                        "type": 63,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "own",
                        "type": 63,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "others",
                        "type": 574,
                        "typeName": "Vec<IndividualExposure<AccountId, Balance>>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 574,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 575
            },
            "docs": []
        },
        {
            "id": 575,
            "path": [
                "sp_staking",
                "IndividualExposure"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                },
                {
                    "name": "Balance",
                    "type": 6
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "who",
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                    },
                    {
                        "name": "value",
                        "type": 63,
                        "typeName": "Balance",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 576,
            "path": [
                "sp_staking",
                "PagedExposureMetadata"
            ],
            "params": [
                {
                    "name": "Balance",
                    "type": 6
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "total",
                        "type": 63,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "own",
                        "type": 63,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "nominator_count",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "page_count",
                        "type": 4,
                        "typeName": "Page",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 577,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    4,
                    0,
                    4
                ]
            },
            "docs": []
        },
        {
            "id": 578,
            "path": [
                "sp_staking",
                "ExposurePage"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                },
                {
                    "name": "Balance",
                    "type": 6
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "page_total",
                        "type": 63,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "others",
                        "type": 574,
                        "typeName": "Vec<IndividualExposure<AccountId, Balance>>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 579,
            "path": [
                "pallet_staking",
                "EraRewardPoints"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "total",
                        "type": 4,
                        "typeName": "RewardPoint",
                        "docs": []
                    },
                    {
                        "name": "individual",
                        "type": 580,
                        "typeName": "BTreeMap<AccountId, RewardPoint>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 580,
            "path": [
                "BTreeMap"
            ],
            "params": [
                {
                    "name": "K",
                    "type": 0
                },
                {
                    "name": "V",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 581,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 581,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 582
            },
            "docs": []
        },
        {
            "id": 582,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    0,
                    4
                ]
            },
            "docs": []
        },
        {
            "id": 583,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 584
            },
            "docs": []
        },
        {
            "id": 584,
            "path": [
                "pallet_staking",
                "UnappliedSlash"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                },
                {
                    "name": "Balance",
                    "type": 6
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "validator",
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                    },
                    {
                        "name": "own",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "others",
                        "type": 259,
                        "typeName": "Vec<(AccountId, Balance)>",
                        "docs": []
                    },
                    {
                        "name": "reporters",
                        "type": 116,
                        "typeName": "Vec<AccountId>",
                        "docs": []
                    },
                    {
                        "name": "payout",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 585,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    43,
                    6
                ]
            },
            "docs": []
        },
        {
            "id": 586,
            "path": [
                "pallet_staking",
                "slashing",
                "SlashingSpans"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "span_index",
                        "type": 4,
                        "typeName": "SpanIndex",
                        "docs": []
                    },
                    {
                        "name": "last_start",
                        "type": 4,
                        "typeName": "EraIndex",
                        "docs": []
                    },
                    {
                        "name": "last_nonzero_slash",
                        "type": 4,
                        "typeName": "EraIndex",
                        "docs": []
                    },
                    {
                        "name": "prior",
                        "type": 121,
                        "typeName": "Vec<EraIndex>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 587,
            "path": [
                "pallet_staking",
                "slashing",
                "SpanRecord"
            ],
            "params": [
                {
                    "name": "Balance",
                    "type": 6
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "slashed",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "paid_out",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 588,
            "path": [
                "pallet_staking",
                "pallet",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "NotController",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "Not a controller account."
                        ]
                    },
                    {
                        "name": "NotStash",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "Not a stash account."
                        ]
                    },
                    {
                        "name": "AlreadyBonded",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "Stash is already bonded."
                        ]
                    },
                    {
                        "name": "AlreadyPaired",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "Controller is already paired."
                        ]
                    },
                    {
                        "name": "EmptyTargets",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "Targets cannot be empty."
                        ]
                    },
                    {
                        "name": "DuplicateIndex",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "Duplicate index."
                        ]
                    },
                    {
                        "name": "InvalidSlashIndex",
                        "fields": [],
                        "index": 6,
                        "docs": [
                            "Slash record index out of bounds."
                        ]
                    },
                    {
                        "name": "InsufficientBond",
                        "fields": [],
                        "index": 7,
                        "docs": [
                            "Cannot have a validator or nominator role, with value less than the minimum defined by",
                            "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the",
                            "intention, `chill` first to remove one's role as validator/nominator."
                        ]
                    },
                    {
                        "name": "NoMoreChunks",
                        "fields": [],
                        "index": 8,
                        "docs": [
                            "Can not schedule more unlock chunks."
                        ]
                    },
                    {
                        "name": "NoUnlockChunk",
                        "fields": [],
                        "index": 9,
                        "docs": [
                            "Can not rebond without unlocking chunks."
                        ]
                    },
                    {
                        "name": "FundedTarget",
                        "fields": [],
                        "index": 10,
                        "docs": [
                            "Attempting to target a stash that still has funds."
                        ]
                    },
                    {
                        "name": "InvalidEraToReward",
                        "fields": [],
                        "index": 11,
                        "docs": [
                            "Invalid era to reward."
                        ]
                    },
                    {
                        "name": "InvalidNumberOfNominations",
                        "fields": [],
                        "index": 12,
                        "docs": [
                            "Invalid number of nominations."
                        ]
                    },
                    {
                        "name": "NotSortedAndUnique",
                        "fields": [],
                        "index": 13,
                        "docs": [
                            "Items are not sorted and unique."
                        ]
                    },
                    {
                        "name": "AlreadyClaimed",
                        "fields": [],
                        "index": 14,
                        "docs": [
                            "Rewards for this era have already been claimed for this validator."
                        ]
                    },
                    {
                        "name": "InvalidPage",
                        "fields": [],
                        "index": 15,
                        "docs": [
                            "No nominators exist on this page."
                        ]
                    },
                    {
                        "name": "IncorrectHistoryDepth",
                        "fields": [],
                        "index": 16,
                        "docs": [
                            "Incorrect previous history depth input provided."
                        ]
                    },
                    {
                        "name": "IncorrectSlashingSpans",
                        "fields": [],
                        "index": 17,
                        "docs": [
                            "Incorrect number of slashing spans provided."
                        ]
                    },
                    {
                        "name": "BadState",
                        "fields": [],
                        "index": 18,
                        "docs": [
                            "Internal state has become somehow corrupted and the operation cannot continue."
                        ]
                    },
                    {
                        "name": "TooManyTargets",
                        "fields": [],
                        "index": 19,
                        "docs": [
                            "Too many nomination targets supplied."
                        ]
                    },
                    {
                        "name": "BadTarget",
                        "fields": [],
                        "index": 20,
                        "docs": [
                            "A nomination target was supplied that was blocked or otherwise not a validator."
                        ]
                    },
                    {
                        "name": "CannotChillOther",
                        "fields": [],
                        "index": 21,
                        "docs": [
                            "The user has enough bond and thus cannot be chilled forcefully by an external person."
                        ]
                    },
                    {
                        "name": "TooManyNominators",
                        "fields": [],
                        "index": 22,
                        "docs": [
                            "There are too many nominators in the system. Governance needs to adjust the staking",
                            "settings to keep things safe for the runtime."
                        ]
                    },
                    {
                        "name": "TooManyValidators",
                        "fields": [],
                        "index": 23,
                        "docs": [
                            "There are too many validator candidates in the system. Governance needs to adjust the",
                            "staking settings to keep things safe for the runtime."
                        ]
                    },
                    {
                        "name": "CommissionTooLow",
                        "fields": [],
                        "index": 24,
                        "docs": [
                            "Commission is too low. Must be at least `MinCommission`."
                        ]
                    },
                    {
                        "name": "BoundNotMet",
                        "fields": [],
                        "index": 25,
                        "docs": [
                            "Some bound is not met."
                        ]
                    },
                    {
                        "name": "ControllerDeprecated",
                        "fields": [],
                        "index": 26,
                        "docs": [
                            "Used when attempting to use deprecated controller account logic."
                        ]
                    },
                    {
                        "name": "CannotRestoreLedger",
                        "fields": [],
                        "index": 27,
                        "docs": [
                            "Cannot reset a ledger."
                        ]
                    },
                    {
                        "name": "RewardDestinationRestricted",
                        "fields": [],
                        "index": 28,
                        "docs": [
                            "Provided reward destination is not allowed."
                        ]
                    },
                    {
                        "name": "NotEnoughFunds",
                        "fields": [],
                        "index": 29,
                        "docs": [
                            "Not enough funds available to withdraw."
                        ]
                    },
                    {
                        "name": "VirtualStakerNotAllowed",
                        "fields": [],
                        "index": 30,
                        "docs": [
                            "Operation not allowed for virtual stakers."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 589,
            "path": [
                "sp_staking",
                "offence",
                "OffenceDetails"
            ],
            "params": [
                {
                    "name": "Reporter",
                    "type": 0
                },
                {
                    "name": "Offender",
                    "type": 590
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "offender",
                        "type": 590,
                        "typeName": "Offender",
                        "docs": []
                    },
                    {
                        "name": "reporters",
                        "type": 116,
                        "typeName": "Vec<Reporter>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 590,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    0,
                    573
                ]
            },
            "docs": []
        },
        {
            "id": 591,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    48,
                    14
                ]
            },
            "docs": []
        },
        {
            "id": 592,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 593
            },
            "docs": []
        },
        {
            "id": 593,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    0,
                    134
                ]
            },
            "docs": []
        },
        {
            "id": 594,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    595,
                    14
                ]
            },
            "docs": []
        },
        {
            "id": 595,
            "path": [
                "sp_core",
                "crypto",
                "KeyTypeId"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 18,
                        "typeName": "[u8; 4]",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 596,
            "path": [
                "pallet_session",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "InvalidProof",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "Invalid ownership proof."
                        ]
                    },
                    {
                        "name": "NoAssociatedValidatorId",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "No associated validator ID for account."
                        ]
                    },
                    {
                        "name": "DuplicatedKey",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "Registered duplicate key."
                        ]
                    },
                    {
                        "name": "NoKeys",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "No keys are associated with this account."
                        ]
                    },
                    {
                        "name": "NoAccount",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "Key setting account is not live, so it's impossible to associate keys."
                        ]
                    }
                ]
            },
            "docs": [
                "Error for the session pallet."
            ]
        },
        {
            "id": 597,
            "path": [
                "pallet_grandpa",
                "StoredState"
            ],
            "params": [
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Live",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "PendingPause",
                        "fields": [
                            {
                                "name": "scheduled_at",
                                "type": 4,
                                "typeName": "N",
                                "docs": []
                            },
                            {
                                "name": "delay",
                                "type": 4,
                                "typeName": "N",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Paused",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "PendingResume",
                        "fields": [
                            {
                                "name": "scheduled_at",
                                "type": 4,
                                "typeName": "N",
                                "docs": []
                            },
                            {
                                "name": "delay",
                                "type": 4,
                                "typeName": "N",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 598,
            "path": [
                "pallet_grandpa",
                "StoredPendingChange"
            ],
            "params": [
                {
                    "name": "N",
                    "type": 4
                },
                {
                    "name": "Limit"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "scheduled_at",
                        "type": 4,
                        "typeName": "N",
                        "docs": []
                    },
                    {
                        "name": "delay",
                        "type": 4,
                        "typeName": "N",
                        "docs": []
                    },
                    {
                        "name": "next_authorities",
                        "type": 599,
                        "typeName": "BoundedAuthorityList<Limit>",
                        "docs": []
                    },
                    {
                        "name": "forced",
                        "type": 152,
                        "typeName": "Option<N>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 599,
            "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 52
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 51,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 600,
            "path": [
                "pallet_grandpa",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "PauseFailed",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "Attempt to signal GRANDPA pause when the authority set isn't live",
                            "(either paused or already pending pause)."
                        ]
                    },
                    {
                        "name": "ResumeFailed",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "Attempt to signal GRANDPA resume when the authority set isn't paused",
                            "(either live or already pending resume)."
                        ]
                    },
                    {
                        "name": "ChangePending",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "Attempt to signal GRANDPA change with one already pending."
                        ]
                    },
                    {
                        "name": "TooSoon",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "Cannot signal forced change so soon after last."
                        ]
                    },
                    {
                        "name": "InvalidKeyOwnershipProof",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "A key ownership proof provided as part of an equivocation report is invalid."
                        ]
                    },
                    {
                        "name": "InvalidEquivocationProof",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "An equivocation proof provided as part of an equivocation report is invalid."
                        ]
                    },
                    {
                        "name": "DuplicateOffenceReport",
                        "fields": [],
                        "index": 6,
                        "docs": [
                            "A given equivocation report is valid but already previously reported."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 601,
            "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 137
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 602,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 602,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 137
            },
            "docs": []
        },
        {
            "id": 603,
            "path": [
                "pallet_treasury",
                "Proposal"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                },
                {
                    "name": "Balance",
                    "type": 6
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "proposer",
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                    },
                    {
                        "name": "value",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "beneficiary",
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                    },
                    {
                        "name": "bond",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 604,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 4
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 121,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 605,
            "path": [
                "pallet_treasury",
                "SpendStatus"
            ],
            "params": [
                {
                    "name": "AssetKind",
                    "type": 55
                },
                {
                    "name": "AssetBalance",
                    "type": 6
                },
                {
                    "name": "Beneficiary",
                    "type": 81
                },
                {
                    "name": "BlockNumber",
                    "type": 4
                },
                {
                    "name": "PaymentId",
                    "type": 12
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "asset_kind",
                        "type": 55,
                        "typeName": "AssetKind",
                        "docs": []
                    },
                    {
                        "name": "amount",
                        "type": 6,
                        "typeName": "AssetBalance",
                        "docs": []
                    },
                    {
                        "name": "beneficiary",
                        "type": 81,
                        "typeName": "Beneficiary",
                        "docs": []
                    },
                    {
                        "name": "valid_from",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                    },
                    {
                        "name": "expire_at",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                    },
                    {
                        "name": "status",
                        "type": 606,
                        "typeName": "PaymentState<PaymentId>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 606,
            "path": [
                "pallet_treasury",
                "PaymentState"
            ],
            "params": [
                {
                    "name": "Id",
                    "type": 12
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Pending",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Attempted",
                        "fields": [
                            {
                                "name": "id",
                                "type": 12,
                                "typeName": "Id",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Failed",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 607,
            "path": [
                "sp_arithmetic",
                "per_things",
                "Permill"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 608,
            "path": [
                "frame_support",
                "PalletId"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 364,
                        "typeName": "[u8; 8]",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 609,
            "path": [
                "pallet_treasury",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                },
                {
                    "name": "I"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "InvalidIndex",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "No proposal, bounty or spend at that index."
                        ]
                    },
                    {
                        "name": "TooManyApprovals",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "Too many approvals in the queue."
                        ]
                    },
                    {
                        "name": "InsufficientPermission",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "The spend origin is valid but the amount it is allowed to spend is lower than the",
                            "amount to be spent."
                        ]
                    },
                    {
                        "name": "ProposalNotApproved",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "Proposal has not been approved."
                        ]
                    },
                    {
                        "name": "FailedToConvertBalance",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "The balance of the asset kind is not convertible to the balance of the native asset."
                        ]
                    },
                    {
                        "name": "SpendExpired",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "The spend has expired and cannot be claimed."
                        ]
                    },
                    {
                        "name": "EarlyPayout",
                        "fields": [],
                        "index": 6,
                        "docs": [
                            "The spend is not yet eligible for payout."
                        ]
                    },
                    {
                        "name": "AlreadyAttempted",
                        "fields": [],
                        "index": 7,
                        "docs": [
                            "The payment has already been attempted."
                        ]
                    },
                    {
                        "name": "PayoutError",
                        "fields": [],
                        "index": 8,
                        "docs": [
                            "There was some issue with the mechanism of payment."
                        ]
                    },
                    {
                        "name": "NotAttempted",
                        "fields": [],
                        "index": 9,
                        "docs": [
                            "The payout was not yet attempted/claimed."
                        ]
                    },
                    {
                        "name": "Inconclusive",
                        "fields": [],
                        "index": 10,
                        "docs": [
                            "The payment has neither failed nor succeeded yet."
                        ]
                    }
                ]
            },
            "docs": [
                "Error for the treasury pallet."
            ]
        },
        {
            "id": 610,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    0,
                    91
                ]
            },
            "docs": []
        },
        {
            "id": 611,
            "path": [
                "pallet_conviction_voting",
                "vote",
                "Voting"
            ],
            "params": [
                {
                    "name": "Balance",
                    "type": 6
                },
                {
                    "name": "AccountId",
                    "type": 0
                },
                {
                    "name": "BlockNumber",
                    "type": 4
                },
                {
                    "name": "PollIndex",
                    "type": 4
                },
                {
                    "name": "MaxVotes"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Casting",
                        "fields": [
                            {
                                "type": 612,
                                "typeName": "Casting<Balance, BlockNumber, PollIndex, MaxVotes>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Delegating",
                        "fields": [
                            {
                                "type": 618,
                                "typeName": "Delegating<Balance, AccountId, BlockNumber>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 612,
            "path": [
                "pallet_conviction_voting",
                "vote",
                "Casting"
            ],
            "params": [
                {
                    "name": "Balance",
                    "type": 6
                },
                {
                    "name": "BlockNumber",
                    "type": 4
                },
                {
                    "name": "PollIndex",
                    "type": 4
                },
                {
                    "name": "MaxVotes"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "votes",
                        "type": 613,
                        "typeName": "BoundedVec<(PollIndex, AccountVote<Balance>), MaxVotes>",
                        "docs": []
                    },
                    {
                        "name": "delegations",
                        "type": 616,
                        "typeName": "Delegations<Balance>",
                        "docs": []
                    },
                    {
                        "name": "prior",
                        "type": 617,
                        "typeName": "PriorLock<BlockNumber, Balance>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 613,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 614
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 615,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 614,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    4,
                    154
                ]
            },
            "docs": []
        },
        {
            "id": 615,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 614
            },
            "docs": []
        },
        {
            "id": 616,
            "path": [
                "pallet_conviction_voting",
                "types",
                "Delegations"
            ],
            "params": [
                {
                    "name": "Balance",
                    "type": 6
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "votes",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "capital",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 617,
            "path": [
                "pallet_conviction_voting",
                "vote",
                "PriorLock"
            ],
            "params": [
                {
                    "name": "BlockNumber",
                    "type": 4
                },
                {
                    "name": "Balance",
                    "type": 6
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                    },
                    {
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 618,
            "path": [
                "pallet_conviction_voting",
                "vote",
                "Delegating"
            ],
            "params": [
                {
                    "name": "Balance",
                    "type": 6
                },
                {
                    "name": "AccountId",
                    "type": 0
                },
                {
                    "name": "BlockNumber",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "balance",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "target",
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                    },
                    {
                        "name": "conviction",
                        "type": 156,
                        "typeName": "Conviction",
                        "docs": []
                    },
                    {
                        "name": "delegations",
                        "type": 616,
                        "typeName": "Delegations<Balance>",
                        "docs": []
                    },
                    {
                        "name": "prior",
                        "type": 617,
                        "typeName": "PriorLock<BlockNumber, Balance>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 619,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 620
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 621,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 620,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    91,
                    6
                ]
            },
            "docs": []
        },
        {
            "id": 621,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 620
            },
            "docs": []
        },
        {
            "id": 622,
            "path": [
                "pallet_conviction_voting",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                },
                {
                    "name": "I"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "NotOngoing",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "Poll is not ongoing."
                        ]
                    },
                    {
                        "name": "NotVoter",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "The given account did not vote on the poll."
                        ]
                    },
                    {
                        "name": "NoPermission",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "The actor has no permission to conduct the action."
                        ]
                    },
                    {
                        "name": "NoPermissionYet",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "The actor has no permission to conduct the action right now but will do in the future."
                        ]
                    },
                    {
                        "name": "AlreadyDelegating",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "The account is already delegating."
                        ]
                    },
                    {
                        "name": "AlreadyVoting",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "The account currently has votes attached to it and the operation cannot succeed until",
                            "these are removed through `remove_vote`."
                        ]
                    },
                    {
                        "name": "InsufficientFunds",
                        "fields": [],
                        "index": 6,
                        "docs": [
                            "Too high a balance was provided that the account cannot afford."
                        ]
                    },
                    {
                        "name": "NotDelegating",
                        "fields": [],
                        "index": 7,
                        "docs": [
                            "The account is not currently delegating."
                        ]
                    },
                    {
                        "name": "Nonsense",
                        "fields": [],
                        "index": 8,
                        "docs": [
                            "Delegation to oneself makes no sense."
                        ]
                    },
                    {
                        "name": "MaxVotesReached",
                        "fields": [],
                        "index": 9,
                        "docs": [
                            "Maximum number of votes reached."
                        ]
                    },
                    {
                        "name": "ClassNeeded",
                        "fields": [],
                        "index": 10,
                        "docs": [
                            "The class must be supplied since it is not easily determinable from the state."
                        ]
                    },
                    {
                        "name": "BadClass",
                        "fields": [],
                        "index": 11,
                        "docs": [
                            "The class ID supplied is invalid."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 623,
            "path": [
                "pallet_referenda",
                "types",
                "ReferendumInfo"
            ],
            "params": [
                {
                    "name": "TrackId",
                    "type": 91
                },
                {
                    "name": "RuntimeOrigin",
                    "type": 159
                },
                {
                    "name": "Moment",
                    "type": 4
                },
                {
                    "name": "Call",
                    "type": 92
                },
                {
                    "name": "Balance",
                    "type": 6
                },
                {
                    "name": "Tally",
                    "type": 448
                },
                {
                    "name": "AccountId",
                    "type": 0
                },
                {
                    "name": "ScheduleAddress",
                    "type": 32
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Ongoing",
                        "fields": [
                            {
                                "type": 624,
                                "typeName": "ReferendumStatus<TrackId, RuntimeOrigin, Moment, Call, Balance, Tally,\nAccountId, ScheduleAddress,>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Approved",
                        "fields": [
                            {
                                "type": 4,
                                "typeName": "Moment",
                                "docs": []
                            },
                            {
                                "type": 626,
                                "typeName": "Option<Deposit<AccountId, Balance>>",
                                "docs": []
                            },
                            {
                                "type": 626,
                                "typeName": "Option<Deposit<AccountId, Balance>>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Rejected",
                        "fields": [
                            {
                                "type": 4,
                                "typeName": "Moment",
                                "docs": []
                            },
                            {
                                "type": 626,
                                "typeName": "Option<Deposit<AccountId, Balance>>",
                                "docs": []
                            },
                            {
                                "type": 626,
                                "typeName": "Option<Deposit<AccountId, Balance>>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Cancelled",
                        "fields": [
                            {
                                "type": 4,
                                "typeName": "Moment",
                                "docs": []
                            },
                            {
                                "type": 626,
                                "typeName": "Option<Deposit<AccountId, Balance>>",
                                "docs": []
                            },
                            {
                                "type": 626,
                                "typeName": "Option<Deposit<AccountId, Balance>>",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "TimedOut",
                        "fields": [
                            {
                                "type": 4,
                                "typeName": "Moment",
                                "docs": []
                            },
                            {
                                "type": 626,
                                "typeName": "Option<Deposit<AccountId, Balance>>",
                                "docs": []
                            },
                            {
                                "type": 626,
                                "typeName": "Option<Deposit<AccountId, Balance>>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "Killed",
                        "fields": [
                            {
                                "type": 4,
                                "typeName": "Moment",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 624,
            "path": [
                "pallet_referenda",
                "types",
                "ReferendumStatus"
            ],
            "params": [
                {
                    "name": "TrackId",
                    "type": 91
                },
                {
                    "name": "RuntimeOrigin",
                    "type": 159
                },
                {
                    "name": "Moment",
                    "type": 4
                },
                {
                    "name": "Call",
                    "type": 92
                },
                {
                    "name": "Balance",
                    "type": 6
                },
                {
                    "name": "Tally",
                    "type": 448
                },
                {
                    "name": "AccountId",
                    "type": 0
                },
                {
                    "name": "ScheduleAddress",
                    "type": 32
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "track",
                        "type": 91,
                        "typeName": "TrackId",
                        "docs": []
                    },
                    {
                        "name": "origin",
                        "type": 159,
                        "typeName": "RuntimeOrigin",
                        "docs": []
                    },
                    {
                        "name": "proposal",
                        "type": 92,
                        "typeName": "Call",
                        "docs": []
                    },
                    {
                        "name": "enactment",
                        "type": 166,
                        "typeName": "DispatchTime<Moment>",
                        "docs": []
                    },
                    {
                        "name": "submitted",
                        "type": 4,
                        "typeName": "Moment",
                        "docs": []
                    },
                    {
                        "name": "submission_deposit",
                        "type": 625,
                        "typeName": "Deposit<AccountId, Balance>",
                        "docs": []
                    },
                    {
                        "name": "decision_deposit",
                        "type": 626,
                        "typeName": "Option<Deposit<AccountId, Balance>>",
                        "docs": []
                    },
                    {
                        "name": "deciding",
                        "type": 627,
                        "typeName": "Option<DecidingStatus<Moment>>",
                        "docs": []
                    },
                    {
                        "name": "tally",
                        "type": 448,
                        "typeName": "Tally",
                        "docs": []
                    },
                    {
                        "name": "in_queue",
                        "type": 8,
                        "typeName": "bool",
                        "docs": []
                    },
                    {
                        "name": "alarm",
                        "type": 629,
                        "typeName": "Option<(Moment, ScheduleAddress)>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 625,
            "path": [
                "pallet_referenda",
                "types",
                "Deposit"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                },
                {
                    "name": "Balance",
                    "type": 6
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "who",
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                    },
                    {
                        "name": "amount",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 626,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 625
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 625,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 627,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 628
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 628,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 628,
            "path": [
                "pallet_referenda",
                "types",
                "DecidingStatus"
            ],
            "params": [
                {
                    "name": "BlockNumber",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "since",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                    },
                    {
                        "name": "confirming",
                        "type": 152,
                        "typeName": "Option<BlockNumber>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 629,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 630
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 630,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 630,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    4,
                    32
                ]
            },
            "docs": []
        },
        {
            "id": 631,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 632
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 633,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 632,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    4,
                    6
                ]
            },
            "docs": []
        },
        {
            "id": 633,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 632
            },
            "docs": []
        },
        {
            "id": 634,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 635
            },
            "docs": []
        },
        {
            "id": 635,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    91,
                    636
                ]
            },
            "docs": []
        },
        {
            "id": 636,
            "path": [
                "pallet_referenda",
                "types",
                "TrackInfo"
            ],
            "params": [
                {
                    "name": "Balance",
                    "type": 6
                },
                {
                    "name": "Moment",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "name",
                        "type": 500,
                        "typeName": "&'static str",
                        "docs": []
                    },
                    {
                        "name": "max_deciding",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "decision_deposit",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "prepare_period",
                        "type": 4,
                        "typeName": "Moment",
                        "docs": []
                    },
                    {
                        "name": "decision_period",
                        "type": 4,
                        "typeName": "Moment",
                        "docs": []
                    },
                    {
                        "name": "confirm_period",
                        "type": 4,
                        "typeName": "Moment",
                        "docs": []
                    },
                    {
                        "name": "min_enactment_period",
                        "type": 4,
                        "typeName": "Moment",
                        "docs": []
                    },
                    {
                        "name": "min_approval",
                        "type": 637,
                        "typeName": "Curve",
                        "docs": []
                    },
                    {
                        "name": "min_support",
                        "type": 637,
                        "typeName": "Curve",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 637,
            "path": [
                "pallet_referenda",
                "types",
                "Curve"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "LinearDecreasing",
                        "fields": [
                            {
                                "name": "length",
                                "type": 43,
                                "typeName": "Perbill",
                                "docs": []
                            },
                            {
                                "name": "floor",
                                "type": 43,
                                "typeName": "Perbill",
                                "docs": []
                            },
                            {
                                "name": "ceil",
                                "type": 43,
                                "typeName": "Perbill",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "SteppedDecreasing",
                        "fields": [
                            {
                                "name": "begin",
                                "type": 43,
                                "typeName": "Perbill",
                                "docs": []
                            },
                            {
                                "name": "end",
                                "type": 43,
                                "typeName": "Perbill",
                                "docs": []
                            },
                            {
                                "name": "step",
                                "type": 43,
                                "typeName": "Perbill",
                                "docs": []
                            },
                            {
                                "name": "period",
                                "type": 43,
                                "typeName": "Perbill",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Reciprocal",
                        "fields": [
                            {
                                "name": "factor",
                                "type": 638,
                                "typeName": "FixedI64",
                                "docs": []
                            },
                            {
                                "name": "x_offset",
                                "type": 638,
                                "typeName": "FixedI64",
                                "docs": []
                            },
                            {
                                "name": "y_offset",
                                "type": 638,
                                "typeName": "FixedI64",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 638,
            "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedI64"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 639,
                        "typeName": "i64",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 639,
            "path": [],
            "params": [],
            "def": {
                "tag": "primitive",
                "value": {
                    "tag": "i64"
                }
            },
            "docs": []
        },
        {
            "id": 640,
            "path": [
                "pallet_referenda",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                },
                {
                    "name": "I"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "NotOngoing",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "Referendum is not ongoing."
                        ]
                    },
                    {
                        "name": "HasDeposit",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "Referendum's decision deposit is already paid."
                        ]
                    },
                    {
                        "name": "BadTrack",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "The track identifier given was invalid."
                        ]
                    },
                    {
                        "name": "Full",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "There are already a full complement of referenda in progress for this track."
                        ]
                    },
                    {
                        "name": "QueueEmpty",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "The queue of the track is empty."
                        ]
                    },
                    {
                        "name": "BadReferendum",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "The referendum index provided is invalid in this context."
                        ]
                    },
                    {
                        "name": "NothingToDo",
                        "fields": [],
                        "index": 6,
                        "docs": [
                            "There was nothing to do in the advancement."
                        ]
                    },
                    {
                        "name": "NoTrack",
                        "fields": [],
                        "index": 7,
                        "docs": [
                            "No track exists for the proposal origin."
                        ]
                    },
                    {
                        "name": "Unfinished",
                        "fields": [],
                        "index": 8,
                        "docs": [
                            "Any deposit cannot be refunded until after the decision is over."
                        ]
                    },
                    {
                        "name": "NoPermission",
                        "fields": [],
                        "index": 9,
                        "docs": [
                            "The deposit refunder is not the depositor."
                        ]
                    },
                    {
                        "name": "NoDeposit",
                        "fields": [],
                        "index": 10,
                        "docs": [
                            "The deposit cannot be refunded since none was made."
                        ]
                    },
                    {
                        "name": "BadStatus",
                        "fields": [],
                        "index": 11,
                        "docs": [
                            "The referendum status is invalid for this operation."
                        ]
                    },
                    {
                        "name": "PreimageNotExist",
                        "fields": [],
                        "index": 12,
                        "docs": [
                            "The preimage does not exist."
                        ]
                    },
                    {
                        "name": "PreimageStoredWithDifferentLength",
                        "fields": [],
                        "index": 13,
                        "docs": [
                            "The preimage is stored with a different length than the one provided."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 641,
            "path": [
                "pallet_whitelist",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "UnavailablePreImage",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "The preimage of the call hash could not be loaded."
                        ]
                    },
                    {
                        "name": "UndecodableCall",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "The call could not be decoded."
                        ]
                    },
                    {
                        "name": "InvalidCallWeightWitness",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "The weight of the decoded call was higher than the witness."
                        ]
                    },
                    {
                        "name": "CallIsNotWhitelisted",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "The call was not whitelisted."
                        ]
                    },
                    {
                        "name": "CallAlreadyWhitelisted",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "The call was already whitelisted; No-Op."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 642,
            "path": [
                "polkadot_runtime_common",
                "claims",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "InvalidEthereumSignature",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "Invalid Ethereum signature."
                        ]
                    },
                    {
                        "name": "SignerHasNoClaim",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "Ethereum address has no claim."
                        ]
                    },
                    {
                        "name": "SenderHasNoClaim",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "Account ID sending transaction has no claim."
                        ]
                    },
                    {
                        "name": "PotUnderflow",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "There's not enough in the pot to pay out some unvested amount. Generally implies a",
                            "logic error."
                        ]
                    },
                    {
                        "name": "InvalidStatement",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "A needed statement was not included."
                        ]
                    },
                    {
                        "name": "VestedBalanceExists",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "The account already has a vested balance."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 643,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 189
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 644,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 644,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 189
            },
            "docs": []
        },
        {
            "id": 645,
            "path": [
                "pallet_vesting",
                "Releases"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "V0",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "V1",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 646,
            "path": [
                "pallet_vesting",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "NotVesting",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "The account given is not vesting."
                        ]
                    },
                    {
                        "name": "AtMaxVestingSchedules",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "The account already has `MaxVestingSchedules` count of schedules and thus",
                            "cannot add another one. Consider merging existing schedules in order to add another."
                        ]
                    },
                    {
                        "name": "AmountLow",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "Amount being transferred is too low to create a vesting schedule."
                        ]
                    },
                    {
                        "name": "ScheduleIndexOutOfBounds",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "An index was out of bounds of the vesting schedules."
                        ]
                    },
                    {
                        "name": "InvalidScheduleParams",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "Failed to create a new schedule because some parameter was invalid."
                        ]
                    }
                ]
            },
            "docs": [
                "Error for the vesting pallet."
            ]
        },
        {
            "id": 647,
            "path": [
                "pallet_utility",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "TooManyCalls",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "Too many calls batched."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 648,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    649,
                    6
                ]
            },
            "docs": []
        },
        {
            "id": 649,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 650
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 651,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 650,
            "path": [
                "pallet_proxy",
                "ProxyDefinition"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                },
                {
                    "name": "ProxyType",
                    "type": 194
                },
                {
                    "name": "BlockNumber",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "delegate",
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                    },
                    {
                        "name": "proxy_type",
                        "type": 194,
                        "typeName": "ProxyType",
                        "docs": []
                    },
                    {
                        "name": "delay",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 651,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 650
            },
            "docs": []
        },
        {
            "id": 652,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    653,
                    6
                ]
            },
            "docs": []
        },
        {
            "id": 653,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 654
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 655,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 654,
            "path": [
                "pallet_proxy",
                "Announcement"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                },
                {
                    "name": "Hash",
                    "type": 13
                },
                {
                    "name": "BlockNumber",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "real",
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                    },
                    {
                        "name": "call_hash",
                        "type": 13,
                        "typeName": "Hash",
                        "docs": []
                    },
                    {
                        "name": "height",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 655,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 654
            },
            "docs": []
        },
        {
            "id": 656,
            "path": [
                "pallet_proxy",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "TooMany",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "There are too many proxies registered or too many announcements pending."
                        ]
                    },
                    {
                        "name": "NotFound",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "Proxy registration not found."
                        ]
                    },
                    {
                        "name": "NotProxy",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "Sender is not a proxy of the account to be proxied."
                        ]
                    },
                    {
                        "name": "Unproxyable",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "A call which is incompatible with the proxy type's filter was attempted."
                        ]
                    },
                    {
                        "name": "Duplicate",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "Account is already a proxy."
                        ]
                    },
                    {
                        "name": "NoPermission",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "Call may not be made by proxy because it may escalate its privileges."
                        ]
                    },
                    {
                        "name": "Unannounced",
                        "fields": [],
                        "index": 6,
                        "docs": [
                            "Announcement, if made at all, was made too recently."
                        ]
                    },
                    {
                        "name": "NoSelfProxy",
                        "fields": [],
                        "index": 7,
                        "docs": [
                            "Cannot add self as proxy."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 657,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    0,
                    1
                ]
            },
            "docs": []
        },
        {
            "id": 658,
            "path": [
                "pallet_multisig",
                "Multisig"
            ],
            "params": [
                {
                    "name": "BlockNumber",
                    "type": 4
                },
                {
                    "name": "Balance",
                    "type": 6
                },
                {
                    "name": "AccountId",
                    "type": 0
                },
                {
                    "name": "MaxApprovals"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "when",
                        "type": 197,
                        "typeName": "Timepoint<BlockNumber>",
                        "docs": []
                    },
                    {
                        "name": "deposit",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "depositor",
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                    },
                    {
                        "name": "approvals",
                        "type": 659,
                        "typeName": "BoundedVec<AccountId, MaxApprovals>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 659,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 0
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 116,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 660,
            "path": [
                "pallet_multisig",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "MinimumThreshold",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "Threshold must be 2 or greater."
                        ]
                    },
                    {
                        "name": "AlreadyApproved",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "Call is already approved by this signatory."
                        ]
                    },
                    {
                        "name": "NoApprovalsNeeded",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "Call doesn't need any (more) approvals."
                        ]
                    },
                    {
                        "name": "TooFewSignatories",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "There are too few signatories in the list."
                        ]
                    },
                    {
                        "name": "TooManySignatories",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "There are too many signatories in the list."
                        ]
                    },
                    {
                        "name": "SignatoriesOutOfOrder",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "The signatories were provided out of order; they should be ordered."
                        ]
                    },
                    {
                        "name": "SenderInSignatories",
                        "fields": [],
                        "index": 6,
                        "docs": [
                            "The sender was contained in the other signatories; it shouldn't be."
                        ]
                    },
                    {
                        "name": "NotFound",
                        "fields": [],
                        "index": 7,
                        "docs": [
                            "Multisig operation not found when attempting to cancel."
                        ]
                    },
                    {
                        "name": "NotOwner",
                        "fields": [],
                        "index": 8,
                        "docs": [
                            "Only the account that originally created the multisig is able to cancel it."
                        ]
                    },
                    {
                        "name": "NoTimepoint",
                        "fields": [],
                        "index": 9,
                        "docs": [
                            "No timepoint was given, yet the multisig operation is already underway."
                        ]
                    },
                    {
                        "name": "WrongTimepoint",
                        "fields": [],
                        "index": 10,
                        "docs": [
                            "A different timepoint was given to the multisig operation that is underway."
                        ]
                    },
                    {
                        "name": "UnexpectedTimepoint",
                        "fields": [],
                        "index": 11,
                        "docs": [
                            "A timepoint was given, yet no multisig operation is underway."
                        ]
                    },
                    {
                        "name": "MaxWeightTooLow",
                        "fields": [],
                        "index": 12,
                        "docs": [
                            "The maximum weight information provided was too low."
                        ]
                    },
                    {
                        "name": "AlreadyStored",
                        "fields": [],
                        "index": 13,
                        "docs": [
                            "The data to be stored is already stored."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 661,
            "path": [
                "pallet_bounties",
                "Bounty"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                },
                {
                    "name": "Balance",
                    "type": 6
                },
                {
                    "name": "BlockNumber",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "proposer",
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                    },
                    {
                        "name": "value",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "fee",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "curator_deposit",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "bond",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "status",
                        "type": 662,
                        "typeName": "BountyStatus<AccountId, BlockNumber>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 662,
            "path": [
                "pallet_bounties",
                "BountyStatus"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                },
                {
                    "name": "BlockNumber",
                    "type": 4
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Proposed",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Approved",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Funded",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "CuratorProposed",
                        "fields": [
                            {
                                "name": "curator",
                                "type": 0,
                                "typeName": "AccountId",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "Active",
                        "fields": [
                            {
                                "name": "curator",
                                "type": 0,
                                "typeName": "AccountId",
                                "docs": []
                            },
                            {
                                "name": "update_due",
                                "type": 4,
                                "typeName": "BlockNumber",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "PendingPayout",
                        "fields": [
                            {
                                "name": "curator",
                                "type": 0,
                                "typeName": "AccountId",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 0,
                                "typeName": "AccountId",
                                "docs": []
                            },
                            {
                                "name": "unlock_at",
                                "type": 4,
                                "typeName": "BlockNumber",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 663,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 2
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 14,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 664,
            "path": [
                "pallet_bounties",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                },
                {
                    "name": "I"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "InsufficientProposersBalance",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "Proposer's balance is too low."
                        ]
                    },
                    {
                        "name": "InvalidIndex",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "No proposal or bounty at that index."
                        ]
                    },
                    {
                        "name": "ReasonTooBig",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "The reason given is just too big."
                        ]
                    },
                    {
                        "name": "UnexpectedStatus",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "The bounty status is unexpected."
                        ]
                    },
                    {
                        "name": "RequireCurator",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "Require bounty curator."
                        ]
                    },
                    {
                        "name": "InvalidValue",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "Invalid bounty value."
                        ]
                    },
                    {
                        "name": "InvalidFee",
                        "fields": [],
                        "index": 6,
                        "docs": [
                            "Invalid bounty fee."
                        ]
                    },
                    {
                        "name": "PendingPayout",
                        "fields": [],
                        "index": 7,
                        "docs": [
                            "A bounty payout is pending.",
                            "To cancel the bounty, you must unassign and slash the curator."
                        ]
                    },
                    {
                        "name": "Premature",
                        "fields": [],
                        "index": 8,
                        "docs": [
                            "The bounties cannot be claimed/closed because it's still in the countdown period."
                        ]
                    },
                    {
                        "name": "HasActiveChildBounty",
                        "fields": [],
                        "index": 9,
                        "docs": [
                            "The bounty cannot be closed because it has active child bounties."
                        ]
                    },
                    {
                        "name": "TooManyQueued",
                        "fields": [],
                        "index": 10,
                        "docs": [
                            "Too many approvals are already queued."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 665,
            "path": [
                "pallet_child_bounties",
                "ChildBounty"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                },
                {
                    "name": "Balance",
                    "type": 6
                },
                {
                    "name": "BlockNumber",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "parent_bounty",
                        "type": 4,
                        "typeName": "BountyIndex",
                        "docs": []
                    },
                    {
                        "name": "value",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "fee",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "curator_deposit",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "status",
                        "type": 666,
                        "typeName": "ChildBountyStatus<AccountId, BlockNumber>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 666,
            "path": [
                "pallet_child_bounties",
                "ChildBountyStatus"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                },
                {
                    "name": "BlockNumber",
                    "type": 4
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Added",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "CuratorProposed",
                        "fields": [
                            {
                                "name": "curator",
                                "type": 0,
                                "typeName": "AccountId",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Active",
                        "fields": [
                            {
                                "name": "curator",
                                "type": 0,
                                "typeName": "AccountId",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "PendingPayout",
                        "fields": [
                            {
                                "name": "curator",
                                "type": 0,
                                "typeName": "AccountId",
                                "docs": []
                            },
                            {
                                "name": "beneficiary",
                                "type": 0,
                                "typeName": "AccountId",
                                "docs": []
                            },
                            {
                                "name": "unlock_at",
                                "type": 4,
                                "typeName": "BlockNumber",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 667,
            "path": [
                "pallet_child_bounties",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "ParentBountyNotActive",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "The parent bounty is not in active state."
                        ]
                    },
                    {
                        "name": "InsufficientBountyBalance",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "The bounty balance is not enough to add new child-bounty."
                        ]
                    },
                    {
                        "name": "TooManyChildBounties",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "Number of child bounties exceeds limit `MaxActiveChildBountyCount`."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 668,
            "path": [
                "pallet_election_provider_multi_phase",
                "ReadySolution"
            ],
            "params": [
                {
                    "name": "AccountId"
                },
                {
                    "name": "MaxWinners"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "supports",
                        "type": 669,
                        "typeName": "BoundedSupports<AccountId, MaxWinners>",
                        "docs": []
                    },
                    {
                        "name": "score",
                        "type": 253,
                        "typeName": "ElectionScore",
                        "docs": []
                    },
                    {
                        "name": "compute",
                        "type": 468,
                        "typeName": "ElectionCompute",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 669,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 257
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 256,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 670,
            "path": [
                "pallet_election_provider_multi_phase",
                "RoundSnapshot"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                },
                {
                    "name": "DataProvider",
                    "type": 671
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "voters",
                        "type": 672,
                        "typeName": "Vec<DataProvider>",
                        "docs": []
                    },
                    {
                        "name": "targets",
                        "type": 116,
                        "typeName": "Vec<AccountId>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 671,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    0,
                    12,
                    569
                ]
            },
            "docs": []
        },
        {
            "id": 672,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 671
            },
            "docs": []
        },
        {
            "id": 673,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 674
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 675,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 674,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    253,
                    4,
                    4
                ]
            },
            "docs": []
        },
        {
            "id": 675,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 674
            },
            "docs": []
        },
        {
            "id": 676,
            "path": [
                "pallet_election_provider_multi_phase",
                "signed",
                "SignedSubmission"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                },
                {
                    "name": "Balance",
                    "type": 6
                },
                {
                    "name": "Solution",
                    "type": 202
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "who",
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                    },
                    {
                        "name": "deposit",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "raw_solution",
                        "type": 201,
                        "typeName": "RawSolution<Solution>",
                        "docs": []
                    },
                    {
                        "name": "call_fee",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 677,
            "path": [
                "pallet_election_provider_multi_phase",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "PreDispatchEarlySubmission",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "Submission was too early."
                        ]
                    },
                    {
                        "name": "PreDispatchWrongWinnerCount",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "Wrong number of winners presented."
                        ]
                    },
                    {
                        "name": "PreDispatchWeakSubmission",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "Submission was too weak, score-wise."
                        ]
                    },
                    {
                        "name": "SignedQueueFull",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "The queue was full, and the solution was not better than any of the existing ones."
                        ]
                    },
                    {
                        "name": "SignedCannotPayDeposit",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "The origin failed to pay the deposit."
                        ]
                    },
                    {
                        "name": "SignedInvalidWitness",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "Witness data to dispatchable is invalid."
                        ]
                    },
                    {
                        "name": "SignedTooMuchWeight",
                        "fields": [],
                        "index": 6,
                        "docs": [
                            "The signed submission consumes too much weight"
                        ]
                    },
                    {
                        "name": "OcwCallWrongEra",
                        "fields": [],
                        "index": 7,
                        "docs": [
                            "OCW submitted solution for wrong round"
                        ]
                    },
                    {
                        "name": "MissingSnapshotMetadata",
                        "fields": [],
                        "index": 8,
                        "docs": [
                            "Snapshot metadata should exist but didn't."
                        ]
                    },
                    {
                        "name": "InvalidSubmissionIndex",
                        "fields": [],
                        "index": 9,
                        "docs": [
                            "`Self::insert_submission` returned an invalid index."
                        ]
                    },
                    {
                        "name": "CallNotAllowed",
                        "fields": [],
                        "index": 10,
                        "docs": [
                            "The call is not allowed at this point."
                        ]
                    },
                    {
                        "name": "FallbackFailed",
                        "fields": [],
                        "index": 11,
                        "docs": [
                            "The fallback failed"
                        ]
                    },
                    {
                        "name": "BoundNotMet",
                        "fields": [],
                        "index": 12,
                        "docs": [
                            "Some bound not met"
                        ]
                    },
                    {
                        "name": "TooManyWinners",
                        "fields": [],
                        "index": 13,
                        "docs": [
                            "Submitted solution has too many winners"
                        ]
                    },
                    {
                        "name": "PreDispatchDifferentRound",
                        "fields": [],
                        "index": 14,
                        "docs": [
                            "Submission was prepared for a different round."
                        ]
                    }
                ]
            },
            "docs": [
                "Error of the pallet that can be returned in response to dispatches."
            ]
        },
        {
            "id": 678,
            "path": [
                "pallet_bags_list",
                "list",
                "Node"
            ],
            "params": [
                {
                    "name": "T"
                },
                {
                    "name": "I"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "id",
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                    },
                    {
                        "name": "prev",
                        "type": 127,
                        "typeName": "Option<T::AccountId>",
                        "docs": []
                    },
                    {
                        "name": "next",
                        "type": 127,
                        "typeName": "Option<T::AccountId>",
                        "docs": []
                    },
                    {
                        "name": "bag_upper",
                        "type": 12,
                        "typeName": "T::Score",
                        "docs": []
                    },
                    {
                        "name": "score",
                        "type": 12,
                        "typeName": "T::Score",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 679,
            "path": [
                "pallet_bags_list",
                "list",
                "Bag"
            ],
            "params": [
                {
                    "name": "T"
                },
                {
                    "name": "I"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "head",
                        "type": 127,
                        "typeName": "Option<T::AccountId>",
                        "docs": []
                    },
                    {
                        "name": "tail",
                        "type": 127,
                        "typeName": "Option<T::AccountId>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 680,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 12
            },
            "docs": []
        },
        {
            "id": 681,
            "path": [
                "pallet_bags_list",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                },
                {
                    "name": "I"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "List",
                        "fields": [
                            {
                                "type": 682,
                                "typeName": "ListError",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": [
                            "A error in the list interface implementation."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 682,
            "path": [
                "pallet_bags_list",
                "list",
                "ListError"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Duplicate",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "NotHeavier",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "NotInSameBag",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "NodeNotFound",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 683,
            "path": [
                "pallet_nomination_pools",
                "PoolMember"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId",
                        "docs": []
                    },
                    {
                        "name": "points",
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                    },
                    {
                        "name": "last_recorded_reward_counter",
                        "type": 436,
                        "typeName": "T::RewardCounter",
                        "docs": []
                    },
                    {
                        "name": "unbonding_eras",
                        "type": 684,
                        "typeName": "BoundedBTreeMap<EraIndex, BalanceOf<T>, T::MaxUnbonding>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 684,
            "path": [
                "bounded_collections",
                "bounded_btree_map",
                "BoundedBTreeMap"
            ],
            "params": [
                {
                    "name": "K",
                    "type": 4
                },
                {
                    "name": "V",
                    "type": 6
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 685,
                        "typeName": "BTreeMap<K, V>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 685,
            "path": [
                "BTreeMap"
            ],
            "params": [
                {
                    "name": "K",
                    "type": 4
                },
                {
                    "name": "V",
                    "type": 6
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 633,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 686,
            "path": [
                "pallet_nomination_pools",
                "BondedPoolInner"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "commission",
                        "type": 687,
                        "typeName": "Commission<T>",
                        "docs": []
                    },
                    {
                        "name": "member_counter",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "points",
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                    },
                    {
                        "name": "roles",
                        "type": 690,
                        "typeName": "PoolRoles<T::AccountId>",
                        "docs": []
                    },
                    {
                        "name": "state",
                        "type": 264,
                        "typeName": "PoolState",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 687,
            "path": [
                "pallet_nomination_pools",
                "Commission"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "current",
                        "type": 270,
                        "typeName": "Option<(Perbill, T::AccountId)>",
                        "docs": []
                    },
                    {
                        "name": "max",
                        "type": 688,
                        "typeName": "Option<Perbill>",
                        "docs": []
                    },
                    {
                        "name": "change_rate",
                        "type": 689,
                        "typeName": "Option<CommissionChangeRate<BlockNumberFor<T>>>",
                        "docs": []
                    },
                    {
                        "name": "throttle_from",
                        "type": 152,
                        "typeName": "Option<BlockNumberFor<T>>",
                        "docs": []
                    },
                    {
                        "name": "claim_permission",
                        "type": 273,
                        "typeName": "Option<CommissionClaimPermission<T::AccountId>>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 688,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 43
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 43,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 689,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 272
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 272,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 690,
            "path": [
                "pallet_nomination_pools",
                "PoolRoles"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "depositor",
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                    },
                    {
                        "name": "root",
                        "type": 127,
                        "typeName": "Option<AccountId>",
                        "docs": []
                    },
                    {
                        "name": "nominator",
                        "type": 127,
                        "typeName": "Option<AccountId>",
                        "docs": []
                    },
                    {
                        "name": "bouncer",
                        "type": 127,
                        "typeName": "Option<AccountId>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 691,
            "path": [
                "pallet_nomination_pools",
                "RewardPool"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "last_recorded_reward_counter",
                        "type": 436,
                        "typeName": "T::RewardCounter",
                        "docs": []
                    },
                    {
                        "name": "last_recorded_total_payouts",
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                    },
                    {
                        "name": "total_rewards_claimed",
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                    },
                    {
                        "name": "total_commission_pending",
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                    },
                    {
                        "name": "total_commission_claimed",
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 692,
            "path": [
                "pallet_nomination_pools",
                "SubPools"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "no_era",
                        "type": 693,
                        "typeName": "UnbondPool<T>",
                        "docs": []
                    },
                    {
                        "name": "with_era",
                        "type": 694,
                        "typeName": "BoundedBTreeMap<EraIndex, UnbondPool<T>, TotalUnbondingPools<T>>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 693,
            "path": [
                "pallet_nomination_pools",
                "UnbondPool"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "points",
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                    },
                    {
                        "name": "balance",
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 694,
            "path": [
                "bounded_collections",
                "bounded_btree_map",
                "BoundedBTreeMap"
            ],
            "params": [
                {
                    "name": "K",
                    "type": 4
                },
                {
                    "name": "V",
                    "type": 693
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 695,
                        "typeName": "BTreeMap<K, V>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 695,
            "path": [
                "BTreeMap"
            ],
            "params": [
                {
                    "name": "K",
                    "type": 4
                },
                {
                    "name": "V",
                    "type": 693
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 696,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 696,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 697
            },
            "docs": []
        },
        {
            "id": 697,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    4,
                    693
                ]
            },
            "docs": []
        },
        {
            "id": 698,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 2
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 14,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 699,
            "path": [
                "pallet_nomination_pools",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "PoolNotFound",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "A (bonded) pool id does not exist."
                        ]
                    },
                    {
                        "name": "PoolMemberNotFound",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "An account is not a member."
                        ]
                    },
                    {
                        "name": "RewardPoolNotFound",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "A reward pool does not exist. In all cases this is a system logic error."
                        ]
                    },
                    {
                        "name": "SubPoolsNotFound",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "A sub pool does not exist."
                        ]
                    },
                    {
                        "name": "AccountBelongsToOtherPool",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "An account is already delegating in another pool. An account may only belong to one",
                            "pool at a time."
                        ]
                    },
                    {
                        "name": "FullyUnbonding",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "The member is fully unbonded (and thus cannot access the bonded and reward pool",
                            "anymore to, for example, collect rewards)."
                        ]
                    },
                    {
                        "name": "MaxUnbondingLimit",
                        "fields": [],
                        "index": 6,
                        "docs": [
                            "The member cannot unbond further chunks due to reaching the limit."
                        ]
                    },
                    {
                        "name": "CannotWithdrawAny",
                        "fields": [],
                        "index": 7,
                        "docs": [
                            "None of the funds can be withdrawn yet because the bonding duration has not passed."
                        ]
                    },
                    {
                        "name": "MinimumBondNotMet",
                        "fields": [],
                        "index": 8,
                        "docs": [
                            "The amount does not meet the minimum bond to either join or create a pool.",
                            "",
                            "The depositor can never unbond to a value less than `Pallet::depositor_min_bond`. The",
                            "caller does not have nominating permissions for the pool. Members can never unbond to a",
                            "value below `MinJoinBond`."
                        ]
                    },
                    {
                        "name": "OverflowRisk",
                        "fields": [],
                        "index": 9,
                        "docs": [
                            "The transaction could not be executed due to overflow risk for the pool."
                        ]
                    },
                    {
                        "name": "NotDestroying",
                        "fields": [],
                        "index": 10,
                        "docs": [
                            "A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for",
                            "other members to be permissionlessly unbonded."
                        ]
                    },
                    {
                        "name": "NotNominator",
                        "fields": [],
                        "index": 11,
                        "docs": [
                            "The caller does not have nominating permissions for the pool."
                        ]
                    },
                    {
                        "name": "NotKickerOrDestroying",
                        "fields": [],
                        "index": 12,
                        "docs": [
                            "Either a) the caller cannot make a valid kick or b) the pool is not destroying."
                        ]
                    },
                    {
                        "name": "NotOpen",
                        "fields": [],
                        "index": 13,
                        "docs": [
                            "The pool is not open to join"
                        ]
                    },
                    {
                        "name": "MaxPools",
                        "fields": [],
                        "index": 14,
                        "docs": [
                            "The system is maxed out on pools."
                        ]
                    },
                    {
                        "name": "MaxPoolMembers",
                        "fields": [],
                        "index": 15,
                        "docs": [
                            "Too many members in the pool or system."
                        ]
                    },
                    {
                        "name": "CanNotChangeState",
                        "fields": [],
                        "index": 16,
                        "docs": [
                            "The pools state cannot be changed."
                        ]
                    },
                    {
                        "name": "DoesNotHavePermission",
                        "fields": [],
                        "index": 17,
                        "docs": [
                            "The caller does not have adequate permissions."
                        ]
                    },
                    {
                        "name": "MetadataExceedsMaxLen",
                        "fields": [],
                        "index": 18,
                        "docs": [
                            "Metadata exceeds [`Config::MaxMetadataLen`]"
                        ]
                    },
                    {
                        "name": "Defensive",
                        "fields": [
                            {
                                "type": 700,
                                "typeName": "DefensiveError",
                                "docs": []
                            }
                        ],
                        "index": 19,
                        "docs": [
                            "Some error occurred that should never happen. This should be reported to the",
                            "maintainers."
                        ]
                    },
                    {
                        "name": "PartialUnbondNotAllowedPermissionlessly",
                        "fields": [],
                        "index": 20,
                        "docs": [
                            "Partial unbonding now allowed permissionlessly."
                        ]
                    },
                    {
                        "name": "MaxCommissionRestricted",
                        "fields": [],
                        "index": 21,
                        "docs": [
                            "The pool's max commission cannot be set higher than the existing value."
                        ]
                    },
                    {
                        "name": "CommissionExceedsMaximum",
                        "fields": [],
                        "index": 22,
                        "docs": [
                            "The supplied commission exceeds the max allowed commission."
                        ]
                    },
                    {
                        "name": "CommissionExceedsGlobalMaximum",
                        "fields": [],
                        "index": 23,
                        "docs": [
                            "The supplied commission exceeds global maximum commission."
                        ]
                    },
                    {
                        "name": "CommissionChangeThrottled",
                        "fields": [],
                        "index": 24,
                        "docs": [
                            "Not enough blocks have surpassed since the last commission update."
                        ]
                    },
                    {
                        "name": "CommissionChangeRateNotAllowed",
                        "fields": [],
                        "index": 25,
                        "docs": [
                            "The submitted changes to commission change rate are not allowed."
                        ]
                    },
                    {
                        "name": "NoPendingCommission",
                        "fields": [],
                        "index": 26,
                        "docs": [
                            "There is no pending commission to claim."
                        ]
                    },
                    {
                        "name": "NoCommissionCurrentSet",
                        "fields": [],
                        "index": 27,
                        "docs": [
                            "No commission current has been set."
                        ]
                    },
                    {
                        "name": "PoolIdInUse",
                        "fields": [],
                        "index": 28,
                        "docs": [
                            "Pool id currently in use."
                        ]
                    },
                    {
                        "name": "InvalidPoolId",
                        "fields": [],
                        "index": 29,
                        "docs": [
                            "Pool id provided is not correct/usable."
                        ]
                    },
                    {
                        "name": "BondExtraRestricted",
                        "fields": [],
                        "index": 30,
                        "docs": [
                            "Bonding extra is restricted to the exact pending reward amount."
                        ]
                    },
                    {
                        "name": "NothingToAdjust",
                        "fields": [],
                        "index": 31,
                        "docs": [
                            "No imbalance in the ED deposit for the pool."
                        ]
                    },
                    {
                        "name": "NothingToSlash",
                        "fields": [],
                        "index": 32,
                        "docs": [
                            "No slash pending that can be applied to the member."
                        ]
                    },
                    {
                        "name": "AlreadyMigrated",
                        "fields": [],
                        "index": 33,
                        "docs": [
                            "The pool or member delegation has already migrated to delegate stake."
                        ]
                    },
                    {
                        "name": "NotMigrated",
                        "fields": [],
                        "index": 34,
                        "docs": [
                            "The pool or member delegation has not migrated yet to delegate stake."
                        ]
                    },
                    {
                        "name": "NotSupported",
                        "fields": [],
                        "index": 35,
                        "docs": [
                            "This call is not allowed in the current state of the pallet."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 700,
            "path": [
                "pallet_nomination_pools",
                "pallet",
                "DefensiveError"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "NotEnoughSpaceInUnbondPool",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "PoolNotFound",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "RewardPoolNotFound",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "SubPoolsNotFound",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "BondedStashKilledPrematurely",
                        "fields": [],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "DelegationUnsupported",
                        "fields": [],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "SlashNotApplied",
                        "fields": [],
                        "index": 6,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 701,
            "path": [
                "pallet_fast_unstake",
                "types",
                "UnstakeRequest"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "stashes",
                        "type": 702,
                        "typeName": "BoundedVec<(T::AccountId, BalanceOf<T>), T::BatchSize>",
                        "docs": []
                    },
                    {
                        "name": "checked",
                        "type": 703,
                        "typeName": "BoundedVec<EraIndex, MaxChecking<T>>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 702,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 260
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 259,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 703,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 4
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 121,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 704,
            "path": [
                "pallet_fast_unstake",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "NotController",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "The provided Controller account was not found.",
                            "",
                            "This means that the given account is not bonded."
                        ]
                    },
                    {
                        "name": "AlreadyQueued",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "The bonded account has already been queued."
                        ]
                    },
                    {
                        "name": "NotFullyBonded",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "The bonded account has active unlocking chunks."
                        ]
                    },
                    {
                        "name": "NotQueued",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "The provided un-staker is not in the `Queue`."
                        ]
                    },
                    {
                        "name": "AlreadyHead",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "The provided un-staker is already in Head, and cannot deregister."
                        ]
                    },
                    {
                        "name": "CallNotAllowed",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "The call is not allowed at this point because the pallet is not active."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 705,
            "path": [
                "polkadot_runtime_parachains",
                "configuration",
                "HostConfiguration"
            ],
            "params": [
                {
                    "name": "BlockNumber",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "max_code_size",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "max_head_data_size",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "max_upward_queue_count",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "max_upward_queue_size",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "max_upward_message_size",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "max_upward_message_num_per_candidate",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "hrmp_max_message_num_per_candidate",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "validation_upgrade_cooldown",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                    },
                    {
                        "name": "validation_upgrade_delay",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                    },
                    {
                        "name": "async_backing_params",
                        "type": 277,
                        "typeName": "AsyncBackingParams",
                        "docs": []
                    },
                    {
                        "name": "max_pov_size",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "max_downward_message_size",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "hrmp_max_parachain_outbound_channels",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "hrmp_sender_deposit",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "hrmp_recipient_deposit",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "hrmp_channel_max_capacity",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "hrmp_channel_max_total_size",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "hrmp_max_parachain_inbound_channels",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "hrmp_channel_max_message_size",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "executor_params",
                        "type": 278,
                        "typeName": "ExecutorParams",
                        "docs": []
                    },
                    {
                        "name": "code_retention_period",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                    },
                    {
                        "name": "max_validators",
                        "type": 152,
                        "typeName": "Option<u32>",
                        "docs": []
                    },
                    {
                        "name": "dispute_period",
                        "type": 4,
                        "typeName": "SessionIndex",
                        "docs": []
                    },
                    {
                        "name": "dispute_post_conclusion_acceptance_period",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                    },
                    {
                        "name": "no_show_slots",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "n_delay_tranches",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "zeroth_delay_tranche_width",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "needed_approvals",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "relay_vrf_modulo_samples",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "pvf_voting_ttl",
                        "type": 4,
                        "typeName": "SessionIndex",
                        "docs": []
                    },
                    {
                        "name": "minimum_validation_upgrade_delay",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                    },
                    {
                        "name": "minimum_backing_votes",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "node_features",
                        "type": 292,
                        "typeName": "NodeFeatures",
                        "docs": []
                    },
                    {
                        "name": "approval_voting_params",
                        "type": 283,
                        "typeName": "ApprovalVotingParams",
                        "docs": []
                    },
                    {
                        "name": "scheduler_params",
                        "type": 284,
                        "typeName": "SchedulerParams<BlockNumber>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 706,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 707
            },
            "docs": []
        },
        {
            "id": 707,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    4,
                    705
                ]
            },
            "docs": []
        },
        {
            "id": 708,
            "path": [
                "polkadot_runtime_parachains",
                "configuration",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "InvalidNewValue",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "The new value for a configuration parameter is invalid."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 709,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 294
            },
            "docs": []
        },
        {
            "id": 710,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 135
            },
            "docs": []
        },
        {
            "id": 711,
            "path": [
                "polkadot_runtime_parachains",
                "shared",
                "AllowedRelayParentsTracker"
            ],
            "params": [
                {
                    "name": "Hash",
                    "type": 13
                },
                {
                    "name": "BlockNumber",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "buffer",
                        "type": 712,
                        "typeName": "VecDeque<(Hash, Hash)>",
                        "docs": []
                    },
                    {
                        "name": "latest_number",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 712,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 713
            },
            "docs": []
        },
        {
            "id": 713,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    13,
                    13
                ]
            },
            "docs": []
        },
        {
            "id": 714,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 715
            },
            "docs": []
        },
        {
            "id": 715,
            "path": [
                "polkadot_runtime_parachains",
                "inclusion",
                "CandidatePendingAvailability"
            ],
            "params": [
                {
                    "name": "H",
                    "type": 13
                },
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "core",
                        "type": 476,
                        "typeName": "CoreIndex",
                        "docs": []
                    },
                    {
                        "name": "hash",
                        "type": 315,
                        "typeName": "CandidateHash",
                        "docs": []
                    },
                    {
                        "name": "descriptor",
                        "type": 299,
                        "typeName": "CandidateDescriptor<H>",
                        "docs": []
                    },
                    {
                        "name": "commitments",
                        "type": 303,
                        "typeName": "CandidateCommitments",
                        "docs": []
                    },
                    {
                        "name": "availability_votes",
                        "type": 292,
                        "typeName": "BitVec<u8, BitOrderLsb0>",
                        "docs": []
                    },
                    {
                        "name": "backers",
                        "type": 292,
                        "typeName": "BitVec<u8, BitOrderLsb0>",
                        "docs": []
                    },
                    {
                        "name": "relay_parent_number",
                        "type": 4,
                        "typeName": "N",
                        "docs": []
                    },
                    {
                        "name": "backed_in_number",
                        "type": 4,
                        "typeName": "N",
                        "docs": []
                    },
                    {
                        "name": "backing_group",
                        "type": 477,
                        "typeName": "GroupIndex",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 716,
            "path": [
                "polkadot_runtime_parachains",
                "inclusion",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "ValidatorIndexOutOfBounds",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "Validator index out of bounds."
                        ]
                    },
                    {
                        "name": "UnscheduledCandidate",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "Candidate submitted but para not scheduled."
                        ]
                    },
                    {
                        "name": "HeadDataTooLarge",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "Head data exceeds the configured maximum."
                        ]
                    },
                    {
                        "name": "PrematureCodeUpgrade",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "Code upgrade prematurely."
                        ]
                    },
                    {
                        "name": "NewCodeTooLarge",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "Output code is too large"
                        ]
                    },
                    {
                        "name": "DisallowedRelayParent",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "The candidate's relay-parent was not allowed. Either it was",
                            "not recent enough or it didn't advance based on the last parachain block."
                        ]
                    },
                    {
                        "name": "InvalidAssignment",
                        "fields": [],
                        "index": 6,
                        "docs": [
                            "Failed to compute group index for the core: either it's out of bounds",
                            "or the relay parent doesn't belong to the current session."
                        ]
                    },
                    {
                        "name": "InvalidGroupIndex",
                        "fields": [],
                        "index": 7,
                        "docs": [
                            "Invalid group index in core assignment."
                        ]
                    },
                    {
                        "name": "InsufficientBacking",
                        "fields": [],
                        "index": 8,
                        "docs": [
                            "Insufficient (non-majority) backing."
                        ]
                    },
                    {
                        "name": "InvalidBacking",
                        "fields": [],
                        "index": 9,
                        "docs": [
                            "Invalid (bad signature, unknown validator, etc.) backing."
                        ]
                    },
                    {
                        "name": "NotCollatorSigned",
                        "fields": [],
                        "index": 10,
                        "docs": [
                            "Collator did not sign PoV."
                        ]
                    },
                    {
                        "name": "ValidationDataHashMismatch",
                        "fields": [],
                        "index": 11,
                        "docs": [
                            "The validation data hash does not match expected."
                        ]
                    },
                    {
                        "name": "IncorrectDownwardMessageHandling",
                        "fields": [],
                        "index": 12,
                        "docs": [
                            "The downward message queue is not processed correctly."
                        ]
                    },
                    {
                        "name": "InvalidUpwardMessages",
                        "fields": [],
                        "index": 13,
                        "docs": [
                            "At least one upward message sent does not pass the acceptance criteria."
                        ]
                    },
                    {
                        "name": "HrmpWatermarkMishandling",
                        "fields": [],
                        "index": 14,
                        "docs": [
                            "The candidate didn't follow the rules of HRMP watermark advancement."
                        ]
                    },
                    {
                        "name": "InvalidOutboundHrmp",
                        "fields": [],
                        "index": 15,
                        "docs": [
                            "The HRMP messages sent by the candidate is not valid."
                        ]
                    },
                    {
                        "name": "InvalidValidationCodeHash",
                        "fields": [],
                        "index": 16,
                        "docs": [
                            "The validation code hash of the candidate is not valid."
                        ]
                    },
                    {
                        "name": "ParaHeadMismatch",
                        "fields": [],
                        "index": 17,
                        "docs": [
                            "The `para_head` hash in the candidate descriptor doesn't match the hash of the actual",
                            "para head in the commitments."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 717,
            "path": [
                "polkadot_primitives",
                "v7",
                "ScrapedOnChainVotes"
            ],
            "params": [
                {
                    "name": "H",
                    "type": 13
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "session",
                        "type": 4,
                        "typeName": "SessionIndex",
                        "docs": []
                    },
                    {
                        "name": "backing_validators_per_candidate",
                        "type": 718,
                        "typeName": "Vec<(CandidateReceipt<H>, Vec<(ValidatorIndex, ValidityAttestation)>)\n>",
                        "docs": []
                    },
                    {
                        "name": "disputes",
                        "type": 313,
                        "typeName": "MultiDisputeStatementSet",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 718,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 719
            },
            "docs": []
        },
        {
            "id": 719,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    475,
                    720
                ]
            },
            "docs": []
        },
        {
            "id": 720,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 721
            },
            "docs": []
        },
        {
            "id": 721,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    294,
                    312
                ]
            },
            "docs": []
        },
        {
            "id": 722,
            "path": [
                "polkadot_runtime_parachains",
                "paras_inherent",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "TooManyInclusionInherents",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "Inclusion inherent called more than once per block."
                        ]
                    },
                    {
                        "name": "InvalidParentHeader",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "The hash of the submitted parent header doesn't correspond to the saved block hash of",
                            "the parent."
                        ]
                    },
                    {
                        "name": "InherentOverweight",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "The data given to the inherent will result in an overweight block."
                        ]
                    },
                    {
                        "name": "CandidatesFilteredDuringExecution",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "A candidate was filtered during inherent execution. This should have only been done",
                            "during creation."
                        ]
                    },
                    {
                        "name": "UnscheduledCandidate",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "Too many candidates supplied."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 723,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 709
            },
            "docs": []
        },
        {
            "id": 724,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 725
            },
            "docs": []
        },
        {
            "id": 725,
            "path": [
                "polkadot_runtime_parachains",
                "scheduler",
                "pallet",
                "CoreOccupied"
            ],
            "params": [
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Free",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Paras",
                        "fields": [
                            {
                                "type": 726,
                                "typeName": "ParasEntry<N>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 726,
            "path": [
                "polkadot_runtime_parachains",
                "scheduler",
                "pallet",
                "ParasEntry"
            ],
            "params": [
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "assignment",
                        "type": 727,
                        "typeName": "Assignment",
                        "docs": []
                    },
                    {
                        "name": "availability_timeouts",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "ttl",
                        "type": 4,
                        "typeName": "N",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 727,
            "path": [
                "polkadot_runtime_parachains",
                "scheduler",
                "common",
                "Assignment"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Pool",
                        "fields": [
                            {
                                "name": "para_id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "core_index",
                                "type": 476,
                                "typeName": "CoreIndex",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Bulk",
                        "fields": [
                            {
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 728,
            "path": [
                "BTreeMap"
            ],
            "params": [
                {
                    "name": "K",
                    "type": 476
                },
                {
                    "name": "V",
                    "type": 729
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 730,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 729,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 726
            },
            "docs": []
        },
        {
            "id": 730,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 731
            },
            "docs": []
        },
        {
            "id": 731,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    476,
                    729
                ]
            },
            "docs": []
        },
        {
            "id": 732,
            "path": [
                "polkadot_runtime_parachains",
                "paras",
                "PvfCheckActiveVoteState"
            ],
            "params": [
                {
                    "name": "BlockNumber",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "votes_accept",
                        "type": 292,
                        "typeName": "BitVec<u8, BitOrderLsb0>",
                        "docs": []
                    },
                    {
                        "name": "votes_reject",
                        "type": 292,
                        "typeName": "BitVec<u8, BitOrderLsb0>",
                        "docs": []
                    },
                    {
                        "name": "age",
                        "type": 4,
                        "typeName": "SessionIndex",
                        "docs": []
                    },
                    {
                        "name": "created_at",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                    },
                    {
                        "name": "causes",
                        "type": 733,
                        "typeName": "Vec<PvfCheckCause<BlockNumber>>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 733,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 734
            },
            "docs": []
        },
        {
            "id": 734,
            "path": [
                "polkadot_runtime_parachains",
                "paras",
                "PvfCheckCause"
            ],
            "params": [
                {
                    "name": "BlockNumber",
                    "type": 4
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Onboarding",
                        "fields": [
                            {
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Upgrade",
                        "fields": [
                            {
                                "name": "id",
                                "type": 163,
                                "typeName": "ParaId",
                                "docs": []
                            },
                            {
                                "name": "included_at",
                                "type": 4,
                                "typeName": "BlockNumber",
                                "docs": []
                            },
                            {
                                "name": "upgrade_strategy",
                                "type": 735,
                                "typeName": "UpgradeStrategy",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 735,
            "path": [
                "polkadot_runtime_parachains",
                "paras",
                "UpgradeStrategy"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "SetGoAheadSignal",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "ApplyAtExpectedBlock",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 736,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 302
            },
            "docs": []
        },
        {
            "id": 737,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 163
            },
            "docs": []
        },
        {
            "id": 738,
            "path": [
                "polkadot_runtime_parachains",
                "paras",
                "ParaLifecycle"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Onboarding",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Parathread",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Parachain",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "UpgradingParathread",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "DowngradingParachain",
                        "fields": [],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "OffboardingParathread",
                        "fields": [],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "OffboardingParachain",
                        "fields": [],
                        "index": 6,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 739,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    163,
                    4
                ]
            },
            "docs": []
        },
        {
            "id": 740,
            "path": [
                "polkadot_runtime_parachains",
                "paras",
                "ParaPastCodeMeta"
            ],
            "params": [
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "upgrade_times",
                        "type": 741,
                        "typeName": "Vec<ReplacementTimes<N>>",
                        "docs": []
                    },
                    {
                        "name": "last_pruned",
                        "type": 152,
                        "typeName": "Option<N>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 741,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 742
            },
            "docs": []
        },
        {
            "id": 742,
            "path": [
                "polkadot_runtime_parachains",
                "paras",
                "ReplacementTimes"
            ],
            "params": [
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "expected_at",
                        "type": 4,
                        "typeName": "N",
                        "docs": []
                    },
                    {
                        "name": "activated_at",
                        "type": 4,
                        "typeName": "N",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 743,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 739
            },
            "docs": []
        },
        {
            "id": 744,
            "path": [
                "polkadot_primitives",
                "v7",
                "UpgradeGoAhead"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Abort",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "GoAhead",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 745,
            "path": [
                "polkadot_primitives",
                "v7",
                "UpgradeRestriction"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Present",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 746,
            "path": [
                "polkadot_runtime_parachains",
                "paras",
                "ParaGenesisArgs"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "genesis_head",
                        "type": 310,
                        "typeName": "HeadData",
                        "docs": []
                    },
                    {
                        "name": "validation_code",
                        "type": 309,
                        "typeName": "ValidationCode",
                        "docs": []
                    },
                    {
                        "name": "para_kind",
                        "type": 8,
                        "typeName": "ParaKind",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 747,
            "path": [
                "polkadot_runtime_parachains",
                "paras",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "NotRegistered",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "Para is not registered in our system."
                        ]
                    },
                    {
                        "name": "CannotOnboard",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "Para cannot be onboarded because it is already tracked by our system."
                        ]
                    },
                    {
                        "name": "CannotOffboard",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "Para cannot be offboarded at this time."
                        ]
                    },
                    {
                        "name": "CannotUpgrade",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "Para cannot be upgraded to a lease holding parachain."
                        ]
                    },
                    {
                        "name": "CannotDowngrade",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "Para cannot be downgraded to an on-demand parachain."
                        ]
                    },
                    {
                        "name": "PvfCheckStatementStale",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "The statement for PVF pre-checking is stale."
                        ]
                    },
                    {
                        "name": "PvfCheckStatementFuture",
                        "fields": [],
                        "index": 6,
                        "docs": [
                            "The statement for PVF pre-checking is for a future session."
                        ]
                    },
                    {
                        "name": "PvfCheckValidatorIndexOutOfBounds",
                        "fields": [],
                        "index": 7,
                        "docs": [
                            "Claimed validator index is out of bounds."
                        ]
                    },
                    {
                        "name": "PvfCheckInvalidSignature",
                        "fields": [],
                        "index": 8,
                        "docs": [
                            "The signature for the PVF pre-checking is invalid."
                        ]
                    },
                    {
                        "name": "PvfCheckDoubleVote",
                        "fields": [],
                        "index": 9,
                        "docs": [
                            "The given validator already has cast a vote."
                        ]
                    },
                    {
                        "name": "PvfCheckSubjectInvalid",
                        "fields": [],
                        "index": 10,
                        "docs": [
                            "The given PVF does not exist at the moment of process a vote."
                        ]
                    },
                    {
                        "name": "CannotUpgradeCode",
                        "fields": [],
                        "index": 11,
                        "docs": [
                            "Parachain cannot currently schedule a code upgrade."
                        ]
                    },
                    {
                        "name": "InvalidCode",
                        "fields": [],
                        "index": 12,
                        "docs": [
                            "Invalid validation code size."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 748,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 749
            },
            "docs": []
        },
        {
            "id": 749,
            "path": [
                "polkadot_runtime_parachains",
                "initializer",
                "BufferedSessionChange"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "validators",
                        "type": 710,
                        "typeName": "Vec<ValidatorId>",
                        "docs": []
                    },
                    {
                        "name": "queued",
                        "type": 710,
                        "typeName": "Vec<ValidatorId>",
                        "docs": []
                    },
                    {
                        "name": "session_index",
                        "type": 4,
                        "typeName": "SessionIndex",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 750,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 751
            },
            "docs": []
        },
        {
            "id": 751,
            "path": [
                "polkadot_core_primitives",
                "InboundDownwardMessage"
            ],
            "params": [
                {
                    "name": "BlockNumber",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "sent_at",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                    },
                    {
                        "name": "msg",
                        "type": 14,
                        "typeName": "DownwardMessage",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 752,
            "path": [
                "polkadot_runtime_parachains",
                "hrmp",
                "HrmpOpenChannelRequest"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "confirmed",
                        "type": 8,
                        "typeName": "bool",
                        "docs": []
                    },
                    {
                        "name": "_age",
                        "type": 4,
                        "typeName": "SessionIndex",
                        "docs": []
                    },
                    {
                        "name": "sender_deposit",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "max_message_size",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "max_capacity",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "max_total_size",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 753,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 326
            },
            "docs": []
        },
        {
            "id": 754,
            "path": [
                "polkadot_runtime_parachains",
                "hrmp",
                "HrmpChannel"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "max_capacity",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "max_total_size",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "max_message_size",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "msg_count",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "total_size",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "mqc_head",
                        "type": 167,
                        "typeName": "Option<Hash>",
                        "docs": []
                    },
                    {
                        "name": "sender_deposit",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "recipient_deposit",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 755,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 756
            },
            "docs": []
        },
        {
            "id": 756,
            "path": [
                "polkadot_core_primitives",
                "InboundHrmpMessage"
            ],
            "params": [
                {
                    "name": "BlockNumber",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "sent_at",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                    },
                    {
                        "name": "data",
                        "type": 14,
                        "typeName": "sp_std::vec::Vec<u8>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 757,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 758
            },
            "docs": []
        },
        {
            "id": 758,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    4,
                    737
                ]
            },
            "docs": []
        },
        {
            "id": 759,
            "path": [
                "polkadot_runtime_parachains",
                "hrmp",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "OpenHrmpChannelToSelf",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "The sender tried to open a channel to themselves."
                        ]
                    },
                    {
                        "name": "OpenHrmpChannelInvalidRecipient",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "The recipient is not a valid para."
                        ]
                    },
                    {
                        "name": "OpenHrmpChannelZeroCapacity",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "The requested capacity is zero."
                        ]
                    },
                    {
                        "name": "OpenHrmpChannelCapacityExceedsLimit",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "The requested capacity exceeds the global limit."
                        ]
                    },
                    {
                        "name": "OpenHrmpChannelZeroMessageSize",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "The requested maximum message size is 0."
                        ]
                    },
                    {
                        "name": "OpenHrmpChannelMessageSizeExceedsLimit",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "The open request requested the message size that exceeds the global limit."
                        ]
                    },
                    {
                        "name": "OpenHrmpChannelAlreadyExists",
                        "fields": [],
                        "index": 6,
                        "docs": [
                            "The channel already exists"
                        ]
                    },
                    {
                        "name": "OpenHrmpChannelAlreadyRequested",
                        "fields": [],
                        "index": 7,
                        "docs": [
                            "There is already a request to open the same channel."
                        ]
                    },
                    {
                        "name": "OpenHrmpChannelLimitExceeded",
                        "fields": [],
                        "index": 8,
                        "docs": [
                            "The sender already has the maximum number of allowed outbound channels."
                        ]
                    },
                    {
                        "name": "AcceptHrmpChannelDoesntExist",
                        "fields": [],
                        "index": 9,
                        "docs": [
                            "The channel from the sender to the origin doesn't exist."
                        ]
                    },
                    {
                        "name": "AcceptHrmpChannelAlreadyConfirmed",
                        "fields": [],
                        "index": 10,
                        "docs": [
                            "The channel is already confirmed."
                        ]
                    },
                    {
                        "name": "AcceptHrmpChannelLimitExceeded",
                        "fields": [],
                        "index": 11,
                        "docs": [
                            "The recipient already has the maximum number of allowed inbound channels."
                        ]
                    },
                    {
                        "name": "CloseHrmpChannelUnauthorized",
                        "fields": [],
                        "index": 12,
                        "docs": [
                            "The origin tries to close a channel where it is neither the sender nor the recipient."
                        ]
                    },
                    {
                        "name": "CloseHrmpChannelDoesntExist",
                        "fields": [],
                        "index": 13,
                        "docs": [
                            "The channel to be closed doesn't exist."
                        ]
                    },
                    {
                        "name": "CloseHrmpChannelAlreadyUnderway",
                        "fields": [],
                        "index": 14,
                        "docs": [
                            "The channel close request is already requested."
                        ]
                    },
                    {
                        "name": "CancelHrmpOpenChannelUnauthorized",
                        "fields": [],
                        "index": 15,
                        "docs": [
                            "Canceling is requested by neither the sender nor recipient of the open channel request."
                        ]
                    },
                    {
                        "name": "OpenHrmpChannelDoesntExist",
                        "fields": [],
                        "index": 16,
                        "docs": [
                            "The open request doesn't exist."
                        ]
                    },
                    {
                        "name": "OpenHrmpChannelAlreadyConfirmed",
                        "fields": [],
                        "index": 17,
                        "docs": [
                            "Cannot cancel an HRMP open channel request because it is already confirmed."
                        ]
                    },
                    {
                        "name": "WrongWitness",
                        "fields": [],
                        "index": 18,
                        "docs": [
                            "The provided witness data is wrong."
                        ]
                    },
                    {
                        "name": "ChannelCreationNotAuthorized",
                        "fields": [],
                        "index": 19,
                        "docs": [
                            "The channel between these two chains cannot be authorized."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 760,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 136
            },
            "docs": []
        },
        {
            "id": 761,
            "path": [
                "polkadot_primitives",
                "v7",
                "SessionInfo"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "active_validator_indices",
                        "type": 709,
                        "typeName": "Vec<ValidatorIndex>",
                        "docs": []
                    },
                    {
                        "name": "random_seed",
                        "type": 1,
                        "typeName": "[u8; 32]",
                        "docs": []
                    },
                    {
                        "name": "dispute_period",
                        "type": 4,
                        "typeName": "SessionIndex",
                        "docs": []
                    },
                    {
                        "name": "validators",
                        "type": 762,
                        "typeName": "IndexedVec<ValidatorIndex, ValidatorId>",
                        "docs": []
                    },
                    {
                        "name": "discovery_keys",
                        "type": 602,
                        "typeName": "Vec<AuthorityDiscoveryId>",
                        "docs": []
                    },
                    {
                        "name": "assignment_keys",
                        "type": 760,
                        "typeName": "Vec<AssignmentId>",
                        "docs": []
                    },
                    {
                        "name": "validator_groups",
                        "type": 763,
                        "typeName": "IndexedVec<GroupIndex, Vec<ValidatorIndex>>",
                        "docs": []
                    },
                    {
                        "name": "n_cores",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "zeroth_delay_tranche_width",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "relay_vrf_modulo_samples",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "n_delay_tranches",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "no_show_slots",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "needed_approvals",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 762,
            "path": [
                "polkadot_primitives",
                "v7",
                "IndexedVec"
            ],
            "params": [
                {
                    "name": "K",
                    "type": 294
                },
                {
                    "name": "V",
                    "type": 135
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 710,
                        "typeName": "Vec<V>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 763,
            "path": [
                "polkadot_primitives",
                "v7",
                "IndexedVec"
            ],
            "params": [
                {
                    "name": "K",
                    "type": 477
                },
                {
                    "name": "V",
                    "type": 709
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 723,
                        "typeName": "Vec<V>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 764,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    4,
                    315
                ]
            },
            "docs": []
        },
        {
            "id": 765,
            "path": [
                "polkadot_primitives",
                "v7",
                "DisputeState"
            ],
            "params": [
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "validators_for",
                        "type": 292,
                        "typeName": "BitVec<u8, bitvec::order::Lsb0>",
                        "docs": []
                    },
                    {
                        "name": "validators_against",
                        "type": 292,
                        "typeName": "BitVec<u8, bitvec::order::Lsb0>",
                        "docs": []
                    },
                    {
                        "name": "start",
                        "type": 4,
                        "typeName": "N",
                        "docs": []
                    },
                    {
                        "name": "concluded_at",
                        "type": 152,
                        "typeName": "Option<N>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 766,
            "path": [
                "BTreeSet"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 294
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 709,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 767,
            "path": [
                "polkadot_runtime_parachains",
                "disputes",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "DuplicateDisputeStatementSets",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "Duplicate dispute statement sets provided."
                        ]
                    },
                    {
                        "name": "AncientDisputeStatement",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "Ancient dispute statement provided."
                        ]
                    },
                    {
                        "name": "ValidatorIndexOutOfBounds",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "Validator index on statement is out of bounds for session."
                        ]
                    },
                    {
                        "name": "InvalidSignature",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "Invalid signature on statement."
                        ]
                    },
                    {
                        "name": "DuplicateStatement",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "Validator vote submitted more than once to dispute."
                        ]
                    },
                    {
                        "name": "SingleSidedDispute",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "A dispute where there are only votes on one side."
                        ]
                    },
                    {
                        "name": "MaliciousBacker",
                        "fields": [],
                        "index": 6,
                        "docs": [
                            "A dispute vote from a malicious backer."
                        ]
                    },
                    {
                        "name": "MissingBackingVotes",
                        "fields": [],
                        "index": 7,
                        "docs": [
                            "No backing votes were provides along dispute statements."
                        ]
                    },
                    {
                        "name": "UnconfirmedDispute",
                        "fields": [],
                        "index": 8,
                        "docs": [
                            "Unconfirmed dispute statement sets provided."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 768,
            "path": [
                "polkadot_primitives",
                "v7",
                "slashing",
                "PendingSlashes"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "keys",
                        "type": 769,
                        "typeName": "BTreeMap<ValidatorIndex, ValidatorId>",
                        "docs": []
                    },
                    {
                        "name": "kind",
                        "type": 331,
                        "typeName": "SlashingOffenceKind",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 769,
            "path": [
                "BTreeMap"
            ],
            "params": [
                {
                    "name": "K",
                    "type": 294
                },
                {
                    "name": "V",
                    "type": 135
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 770,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 770,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 771
            },
            "docs": []
        },
        {
            "id": 771,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    294,
                    135
                ]
            },
            "docs": []
        },
        {
            "id": 772,
            "path": [
                "polkadot_runtime_parachains",
                "disputes",
                "slashing",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "InvalidKeyOwnershipProof",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "The key ownership proof is invalid."
                        ]
                    },
                    {
                        "name": "InvalidSessionIndex",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "The session index is too old or invalid."
                        ]
                    },
                    {
                        "name": "InvalidCandidateHash",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "The candidate hash is invalid."
                        ]
                    },
                    {
                        "name": "InvalidValidatorIndex",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "There is no pending slash for the given validator index and time",
                            "slot."
                        ]
                    },
                    {
                        "name": "ValidatorIndexIdMismatch",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "The validator index does not match the validator id."
                        ]
                    },
                    {
                        "name": "DuplicateSlashingReport",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "The given slashing report is valid but already previously reported."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 773,
            "path": [
                "polkadot_runtime_parachains",
                "assigner_on_demand",
                "types",
                "CoreAffinityCount"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "core_index",
                        "type": 476,
                        "typeName": "CoreIndex",
                        "docs": []
                    },
                    {
                        "name": "count",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 774,
            "path": [
                "polkadot_runtime_parachains",
                "assigner_on_demand",
                "types",
                "QueueStatusType"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "traffic",
                        "type": 436,
                        "typeName": "FixedU128",
                        "docs": []
                    },
                    {
                        "name": "next_index",
                        "type": 775,
                        "typeName": "QueueIndex",
                        "docs": []
                    },
                    {
                        "name": "smallest_index",
                        "type": 775,
                        "typeName": "QueueIndex",
                        "docs": []
                    },
                    {
                        "name": "freed_indices",
                        "type": 776,
                        "typeName": "BinaryHeap<ReverseQueueIndex>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 775,
            "path": [
                "polkadot_runtime_parachains",
                "assigner_on_demand",
                "types",
                "QueueIndex"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 776,
            "path": [
                "BinaryHeap"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 777
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 778,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 777,
            "path": [
                "polkadot_runtime_parachains",
                "assigner_on_demand",
                "types",
                "ReverseQueueIndex"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 778,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 777
            },
            "docs": []
        },
        {
            "id": 779,
            "path": [
                "BinaryHeap"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 780
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 781,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 780,
            "path": [
                "polkadot_runtime_parachains",
                "assigner_on_demand",
                "types",
                "EnqueuedOrder"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "para_id",
                        "type": 163,
                        "typeName": "ParaId",
                        "docs": []
                    },
                    {
                        "name": "idx",
                        "type": 775,
                        "typeName": "QueueIndex",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 781,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 780
            },
            "docs": []
        },
        {
            "id": 782,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 6
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 783,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 783,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 6
            },
            "docs": []
        },
        {
            "id": 784,
            "path": [
                "polkadot_runtime_parachains",
                "assigner_on_demand",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "QueueFull",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "The order queue is full, `place_order` will not continue."
                        ]
                    },
                    {
                        "name": "SpotPriceHigherThanMaxAmount",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "The current spot price is higher than the max amount specified in the `place_order`",
                            "call, making it invalid."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 785,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    4,
                    476
                ]
            },
            "docs": []
        },
        {
            "id": 786,
            "path": [
                "polkadot_runtime_parachains",
                "assigner_coretime",
                "Schedule"
            ],
            "params": [
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "assignments",
                        "type": 343,
                        "typeName": "Vec<(CoreAssignment, PartsOf57600)>",
                        "docs": []
                    },
                    {
                        "name": "end_hint",
                        "type": 152,
                        "typeName": "Option<N>",
                        "docs": []
                    },
                    {
                        "name": "next_schedule",
                        "type": 152,
                        "typeName": "Option<N>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 787,
            "path": [
                "polkadot_runtime_parachains",
                "assigner_coretime",
                "CoreDescriptor"
            ],
            "params": [
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "queue",
                        "type": 788,
                        "typeName": "Option<QueueDescriptor<N>>",
                        "docs": []
                    },
                    {
                        "name": "current_work",
                        "type": 790,
                        "typeName": "Option<WorkState<N>>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 788,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 789
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 789,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 789,
            "path": [
                "polkadot_runtime_parachains",
                "assigner_coretime",
                "QueueDescriptor"
            ],
            "params": [
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "first",
                        "type": 4,
                        "typeName": "N",
                        "docs": []
                    },
                    {
                        "name": "last",
                        "type": 4,
                        "typeName": "N",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 790,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 791
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 791,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 791,
            "path": [
                "polkadot_runtime_parachains",
                "assigner_coretime",
                "WorkState"
            ],
            "params": [
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "assignments",
                        "type": 792,
                        "typeName": "Vec<(CoreAssignment, AssignmentState)>",
                        "docs": []
                    },
                    {
                        "name": "end_hint",
                        "type": 152,
                        "typeName": "Option<N>",
                        "docs": []
                    },
                    {
                        "name": "pos",
                        "type": 91,
                        "typeName": "u16",
                        "docs": []
                    },
                    {
                        "name": "step",
                        "type": 346,
                        "typeName": "PartsOf57600",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 792,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 793
            },
            "docs": []
        },
        {
            "id": 793,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    345,
                    794
                ]
            },
            "docs": []
        },
        {
            "id": 794,
            "path": [
                "polkadot_runtime_parachains",
                "assigner_coretime",
                "AssignmentState"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "ratio",
                        "type": 346,
                        "typeName": "PartsOf57600",
                        "docs": []
                    },
                    {
                        "name": "remaining",
                        "type": 346,
                        "typeName": "PartsOf57600",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 795,
            "path": [
                "polkadot_runtime_parachains",
                "assigner_coretime",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "AssignmentsEmpty",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "OverScheduled",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "Assignments together exceeded 57600."
                        ]
                    },
                    {
                        "name": "UnderScheduled",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "Assignments together less than 57600"
                        ]
                    },
                    {
                        "name": "DisallowedInsert",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "assign_core is only allowed to append new assignments at the end of already existing",
                            "ones."
                        ]
                    },
                    {
                        "name": "DuplicateInsert",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "Tried to insert a schedule for the same core and block number as an existing schedule"
                        ]
                    },
                    {
                        "name": "AssignmentsNotSorted",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "Tried to add an unsorted set of assignments"
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 796,
            "path": [
                "polkadot_runtime_common",
                "paras_registrar",
                "ParaInfo"
            ],
            "params": [
                {
                    "name": "Account",
                    "type": 0
                },
                {
                    "name": "Balance",
                    "type": 6
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "manager",
                        "type": 0,
                        "typeName": "Account",
                        "docs": []
                    },
                    {
                        "name": "deposit",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "locked",
                        "type": 179,
                        "typeName": "Option<bool>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 797,
            "path": [
                "polkadot_runtime_common",
                "paras_registrar",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "NotRegistered",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "The ID is not registered."
                        ]
                    },
                    {
                        "name": "AlreadyRegistered",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "The ID is already registered."
                        ]
                    },
                    {
                        "name": "NotOwner",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "The caller is not the owner of this Id."
                        ]
                    },
                    {
                        "name": "CodeTooLarge",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "Invalid para code size."
                        ]
                    },
                    {
                        "name": "HeadDataTooLarge",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "Invalid para head data size."
                        ]
                    },
                    {
                        "name": "NotParachain",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "Para is not a Parachain."
                        ]
                    },
                    {
                        "name": "NotParathread",
                        "fields": [],
                        "index": 6,
                        "docs": [
                            "Para is not a Parathread (on-demand parachain)."
                        ]
                    },
                    {
                        "name": "CannotDeregister",
                        "fields": [],
                        "index": 7,
                        "docs": [
                            "Cannot deregister para"
                        ]
                    },
                    {
                        "name": "CannotDowngrade",
                        "fields": [],
                        "index": 8,
                        "docs": [
                            "Cannot schedule downgrade of lease holding parachain to on-demand parachain"
                        ]
                    },
                    {
                        "name": "CannotUpgrade",
                        "fields": [],
                        "index": 9,
                        "docs": [
                            "Cannot schedule upgrade of on-demand parachain to lease holding parachain"
                        ]
                    },
                    {
                        "name": "ParaLocked",
                        "fields": [],
                        "index": 10,
                        "docs": [
                            "Para is locked from manipulation by the manager. Must use parachain or relay chain",
                            "governance."
                        ]
                    },
                    {
                        "name": "NotReserved",
                        "fields": [],
                        "index": 11,
                        "docs": [
                            "The ID given for registration has not been reserved."
                        ]
                    },
                    {
                        "name": "InvalidCode",
                        "fields": [],
                        "index": 12,
                        "docs": [
                            "The validation code is invalid."
                        ]
                    },
                    {
                        "name": "CannotSwap",
                        "fields": [],
                        "index": 13,
                        "docs": [
                            "Cannot perform a parachain slot / lifecycle swap. Check that the state of both paras",
                            "are correct for the swap to work."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 798,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 520
            },
            "docs": []
        },
        {
            "id": 799,
            "path": [
                "polkadot_runtime_common",
                "slots",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "ParaNotOnboarding",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "The parachain ID is not onboarding."
                        ]
                    },
                    {
                        "name": "LeaseError",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "There was an error with the lease."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 800,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    0,
                    163
                ]
            },
            "docs": []
        },
        {
            "id": 801,
            "path": [],
            "params": [],
            "def": {
                "tag": "array",
                "value": {
                    "len": 36,
                    "type": 802
                }
            },
            "docs": []
        },
        {
            "id": 802,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 803
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 803,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 803,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    0,
                    163,
                    6
                ]
            },
            "docs": []
        },
        {
            "id": 804,
            "path": [
                "polkadot_runtime_common",
                "auctions",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "AuctionInProgress",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "This auction is already in progress."
                        ]
                    },
                    {
                        "name": "LeasePeriodInPast",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "The lease period is in the past."
                        ]
                    },
                    {
                        "name": "ParaNotRegistered",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "Para is not registered"
                        ]
                    },
                    {
                        "name": "NotCurrentAuction",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "Not a current auction."
                        ]
                    },
                    {
                        "name": "NotAuction",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "Not an auction."
                        ]
                    },
                    {
                        "name": "AuctionEnded",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "Auction has already ended."
                        ]
                    },
                    {
                        "name": "AlreadyLeasedOut",
                        "fields": [],
                        "index": 6,
                        "docs": [
                            "The para is already leased out for part of this range."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 805,
            "path": [
                "polkadot_runtime_common",
                "crowdloan",
                "FundInfo"
            ],
            "params": [
                {
                    "name": "AccountId",
                    "type": 0
                },
                {
                    "name": "Balance",
                    "type": 6
                },
                {
                    "name": "BlockNumber",
                    "type": 4
                },
                {
                    "name": "LeasePeriod",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "depositor",
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                    },
                    {
                        "name": "verifier",
                        "type": 338,
                        "typeName": "Option<MultiSigner>",
                        "docs": []
                    },
                    {
                        "name": "deposit",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "raised",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "end",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                    },
                    {
                        "name": "cap",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "last_contribution",
                        "type": 806,
                        "typeName": "LastContribution<BlockNumber>",
                        "docs": []
                    },
                    {
                        "name": "first_period",
                        "type": 4,
                        "typeName": "LeasePeriod",
                        "docs": []
                    },
                    {
                        "name": "last_period",
                        "type": 4,
                        "typeName": "LeasePeriod",
                        "docs": []
                    },
                    {
                        "name": "fund_index",
                        "type": 4,
                        "typeName": "FundIndex",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 806,
            "path": [
                "polkadot_runtime_common",
                "crowdloan",
                "LastContribution"
            ],
            "params": [
                {
                    "name": "BlockNumber",
                    "type": 4
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Never",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "PreEnding",
                        "fields": [
                            {
                                "type": 4,
                                "typeName": "u32",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Ending",
                        "fields": [
                            {
                                "type": 4,
                                "typeName": "BlockNumber",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 807,
            "path": [
                "polkadot_runtime_common",
                "crowdloan",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "FirstPeriodInPast",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "The current lease period is more than the first lease period."
                        ]
                    },
                    {
                        "name": "FirstPeriodTooFarInFuture",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "The first lease period needs to at least be less than 3 `max_value`."
                        ]
                    },
                    {
                        "name": "LastPeriodBeforeFirstPeriod",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "Last lease period must be greater than first lease period."
                        ]
                    },
                    {
                        "name": "LastPeriodTooFarInFuture",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "The last lease period cannot be more than 3 periods after the first period."
                        ]
                    },
                    {
                        "name": "CannotEndInPast",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "The campaign ends before the current block number. The end must be in the future."
                        ]
                    },
                    {
                        "name": "EndTooFarInFuture",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "The end date for this crowdloan is not sensible."
                        ]
                    },
                    {
                        "name": "Overflow",
                        "fields": [],
                        "index": 6,
                        "docs": [
                            "There was an overflow."
                        ]
                    },
                    {
                        "name": "ContributionTooSmall",
                        "fields": [],
                        "index": 7,
                        "docs": [
                            "The contribution was below the minimum, `MinContribution`."
                        ]
                    },
                    {
                        "name": "InvalidParaId",
                        "fields": [],
                        "index": 8,
                        "docs": [
                            "Invalid fund index."
                        ]
                    },
                    {
                        "name": "CapExceeded",
                        "fields": [],
                        "index": 9,
                        "docs": [
                            "Contributions exceed maximum amount."
                        ]
                    },
                    {
                        "name": "ContributionPeriodOver",
                        "fields": [],
                        "index": 10,
                        "docs": [
                            "The contribution period has already ended."
                        ]
                    },
                    {
                        "name": "InvalidOrigin",
                        "fields": [],
                        "index": 11,
                        "docs": [
                            "The origin of this call is invalid."
                        ]
                    },
                    {
                        "name": "NotParachain",
                        "fields": [],
                        "index": 12,
                        "docs": [
                            "This crowdloan does not correspond to a parachain."
                        ]
                    },
                    {
                        "name": "LeaseActive",
                        "fields": [],
                        "index": 13,
                        "docs": [
                            "This parachain lease is still active and retirement cannot yet begin."
                        ]
                    },
                    {
                        "name": "BidOrLeaseActive",
                        "fields": [],
                        "index": 14,
                        "docs": [
                            "This parachain's bid or lease is still active and withdraw cannot yet begin."
                        ]
                    },
                    {
                        "name": "FundNotEnded",
                        "fields": [],
                        "index": 15,
                        "docs": [
                            "The crowdloan has not yet ended."
                        ]
                    },
                    {
                        "name": "NoContributions",
                        "fields": [],
                        "index": 16,
                        "docs": [
                            "There are no contributions stored in this crowdloan."
                        ]
                    },
                    {
                        "name": "NotReadyToDissolve",
                        "fields": [],
                        "index": 17,
                        "docs": [
                            "The crowdloan is not ready to dissolve. Potentially still has a slot or in retirement",
                            "period."
                        ]
                    },
                    {
                        "name": "InvalidSignature",
                        "fields": [],
                        "index": 18,
                        "docs": [
                            "Invalid signature."
                        ]
                    },
                    {
                        "name": "MemoTooLarge",
                        "fields": [],
                        "index": 19,
                        "docs": [
                            "The provided memo is too large."
                        ]
                    },
                    {
                        "name": "AlreadyInNewRaise",
                        "fields": [],
                        "index": 20,
                        "docs": [
                            "The fund is already in `NewRaise`"
                        ]
                    },
                    {
                        "name": "VrfDelayInProgress",
                        "fields": [],
                        "index": 21,
                        "docs": [
                            "No contributions allowed during the VRF delay"
                        ]
                    },
                    {
                        "name": "NoLeasePeriod",
                        "fields": [],
                        "index": 22,
                        "docs": [
                            "A lease period has not started yet, due to an offset in the starting block."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 808,
            "path": [
                "polkadot_runtime_parachains",
                "coretime",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "NotBroker",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "The paraid making the call is not the coretime brokerage system parachain."
                        ]
                    },
                    {
                        "name": "RequestedFutureRevenue",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "Requested revenue information `when` parameter was in the future from the current",
                            "block height."
                        ]
                    },
                    {
                        "name": "AssetTransferFailed",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "Failed to transfer assets to the coretime chain"
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 809,
            "path": [
                "pallet_xcm",
                "pallet",
                "QueryStatus"
            ],
            "params": [
                {
                    "name": "BlockNumber",
                    "type": 4
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Pending",
                        "fields": [
                            {
                                "name": "responder",
                                "type": 81,
                                "typeName": "VersionedLocation",
                                "docs": []
                            },
                            {
                                "name": "maybe_match_querier",
                                "type": 810,
                                "typeName": "Option<VersionedLocation>",
                                "docs": []
                            },
                            {
                                "name": "maybe_notify",
                                "type": 811,
                                "typeName": "Option<(u8, u8)>",
                                "docs": []
                            },
                            {
                                "name": "timeout",
                                "type": 4,
                                "typeName": "BlockNumber",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "VersionNotifier",
                        "fields": [
                            {
                                "name": "origin",
                                "type": 81,
                                "typeName": "VersionedLocation",
                                "docs": []
                            },
                            {
                                "name": "is_active",
                                "type": 8,
                                "typeName": "bool",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Ready",
                        "fields": [
                            {
                                "name": "response",
                                "type": 813,
                                "typeName": "VersionedResponse",
                                "docs": []
                            },
                            {
                                "name": "at",
                                "type": 4,
                                "typeName": "BlockNumber",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 810,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 81
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 81,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 811,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 812
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 812,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 812,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    2,
                    2
                ]
            },
            "docs": []
        },
        {
            "id": 813,
            "path": [
                "xcm",
                "VersionedResponse"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "V2",
                        "fields": [
                            {
                                "type": 365,
                                "typeName": "v2::Response",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "V3",
                        "fields": [
                            {
                                "type": 383,
                                "typeName": "v3::Response",
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "V4",
                        "fields": [
                            {
                                "type": 408,
                                "typeName": "v4::Response",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 814,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    4,
                    81
                ]
            },
            "docs": []
        },
        {
            "id": 815,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    12,
                    10,
                    4
                ]
            },
            "docs": []
        },
        {
            "id": 816,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 817
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 818,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 817,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    81,
                    4
                ]
            },
            "docs": []
        },
        {
            "id": 818,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 817
            },
            "docs": []
        },
        {
            "id": 819,
            "path": [
                "pallet_xcm",
                "pallet",
                "VersionMigrationStage"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "MigrateSupportedVersion",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "MigrateVersionNotifiers",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "NotifyCurrentTargets",
                        "fields": [
                            {
                                "type": 820,
                                "typeName": "Option<Vec<u8>>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "MigrateAndNotifyOldTargets",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 820,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 14
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 14,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 821,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    4,
                    0,
                    431
                ]
            },
            "docs": []
        },
        {
            "id": 822,
            "path": [
                "pallet_xcm",
                "pallet",
                "RemoteLockedFungibleRecord"
            ],
            "params": [
                {
                    "name": "ConsumerIdentifier",
                    "type": 35
                },
                {
                    "name": "MaxConsumers"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "amount",
                        "type": 6,
                        "typeName": "u128",
                        "docs": []
                    },
                    {
                        "name": "owner",
                        "type": 81,
                        "typeName": "VersionedLocation",
                        "docs": []
                    },
                    {
                        "name": "locker",
                        "type": 81,
                        "typeName": "VersionedLocation",
                        "docs": []
                    },
                    {
                        "name": "consumers",
                        "type": 823,
                        "typeName": "BoundedVec<(ConsumerIdentifier, u128), MaxConsumers>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 823,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 824
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 825,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 824,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    35,
                    6
                ]
            },
            "docs": []
        },
        {
            "id": 825,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 824
            },
            "docs": []
        },
        {
            "id": 826,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 827
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 828,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 827,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    6,
                    81
                ]
            },
            "docs": []
        },
        {
            "id": 828,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 827
            },
            "docs": []
        },
        {
            "id": 829,
            "path": [
                "pallet_xcm",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Unreachable",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "The desired destination was unreachable, generally because there is a no way of routing",
                            "to it."
                        ]
                    },
                    {
                        "name": "SendFailure",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "There was some other issue (i.e. not to do with routing) in sending the message.",
                            "Perhaps a lack of space for buffering the message."
                        ]
                    },
                    {
                        "name": "Filtered",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "The message execution fails the filter."
                        ]
                    },
                    {
                        "name": "UnweighableMessage",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "The message's weight could not be determined."
                        ]
                    },
                    {
                        "name": "DestinationNotInvertible",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "The destination `Location` provided cannot be inverted."
                        ]
                    },
                    {
                        "name": "Empty",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "The assets to be sent are empty."
                        ]
                    },
                    {
                        "name": "CannotReanchor",
                        "fields": [],
                        "index": 6,
                        "docs": [
                            "Could not re-anchor the assets to declare the fees for the destination chain."
                        ]
                    },
                    {
                        "name": "TooManyAssets",
                        "fields": [],
                        "index": 7,
                        "docs": [
                            "Too many assets have been attempted for transfer."
                        ]
                    },
                    {
                        "name": "InvalidOrigin",
                        "fields": [],
                        "index": 8,
                        "docs": [
                            "Origin is invalid for sending."
                        ]
                    },
                    {
                        "name": "BadVersion",
                        "fields": [],
                        "index": 9,
                        "docs": [
                            "The version of the `Versioned` value used is not able to be interpreted."
                        ]
                    },
                    {
                        "name": "BadLocation",
                        "fields": [],
                        "index": 10,
                        "docs": [
                            "The given location could not be used (e.g. because it cannot be expressed in the",
                            "desired version of XCM)."
                        ]
                    },
                    {
                        "name": "NoSubscription",
                        "fields": [],
                        "index": 11,
                        "docs": [
                            "The referenced subscription could not be found."
                        ]
                    },
                    {
                        "name": "AlreadySubscribed",
                        "fields": [],
                        "index": 12,
                        "docs": [
                            "The location is invalid since it already has a subscription from us."
                        ]
                    },
                    {
                        "name": "CannotCheckOutTeleport",
                        "fields": [],
                        "index": 13,
                        "docs": [
                            "Could not check-out the assets for teleportation to the destination chain."
                        ]
                    },
                    {
                        "name": "LowBalance",
                        "fields": [],
                        "index": 14,
                        "docs": [
                            "The owner does not own (all) of the asset that they wish to do the operation on."
                        ]
                    },
                    {
                        "name": "TooManyLocks",
                        "fields": [],
                        "index": 15,
                        "docs": [
                            "The asset owner has too many locks on the asset."
                        ]
                    },
                    {
                        "name": "AccountNotSovereign",
                        "fields": [],
                        "index": 16,
                        "docs": [
                            "The given account is not an identifiable sovereign account for any location."
                        ]
                    },
                    {
                        "name": "FeesNotMet",
                        "fields": [],
                        "index": 17,
                        "docs": [
                            "The operation required fees to be paid which the initiator could not meet."
                        ]
                    },
                    {
                        "name": "LockNotFound",
                        "fields": [],
                        "index": 18,
                        "docs": [
                            "A remote lock with the corresponding data could not be found."
                        ]
                    },
                    {
                        "name": "InUse",
                        "fields": [],
                        "index": 19,
                        "docs": [
                            "The unlock operation cannot succeed because there are still consumers of the lock."
                        ]
                    },
                    {
                        "name": "InvalidAssetUnknownReserve",
                        "fields": [],
                        "index": 21,
                        "docs": [
                            "Invalid asset, reserve chain could not be determined for it."
                        ]
                    },
                    {
                        "name": "InvalidAssetUnsupportedReserve",
                        "fields": [],
                        "index": 22,
                        "docs": [
                            "Invalid asset, do not support remote asset reserves with different fees reserves."
                        ]
                    },
                    {
                        "name": "TooManyReserves",
                        "fields": [],
                        "index": 23,
                        "docs": [
                            "Too many assets with different reserve locations have been attempted for transfer."
                        ]
                    },
                    {
                        "name": "LocalExecutionIncomplete",
                        "fields": [],
                        "index": 24,
                        "docs": [
                            "Local XCM execution incomplete."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 830,
            "path": [
                "pallet_message_queue",
                "BookState"
            ],
            "params": [
                {
                    "name": "MessageOrigin",
                    "type": 433
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "begin",
                        "type": 4,
                        "typeName": "PageIndex",
                        "docs": []
                    },
                    {
                        "name": "end",
                        "type": 4,
                        "typeName": "PageIndex",
                        "docs": []
                    },
                    {
                        "name": "count",
                        "type": 4,
                        "typeName": "PageIndex",
                        "docs": []
                    },
                    {
                        "name": "ready_neighbours",
                        "type": 831,
                        "typeName": "Option<Neighbours<MessageOrigin>>",
                        "docs": []
                    },
                    {
                        "name": "message_count",
                        "type": 12,
                        "typeName": "u64",
                        "docs": []
                    },
                    {
                        "name": "size",
                        "type": 12,
                        "typeName": "u64",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 831,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 832
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 832,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 832,
            "path": [
                "pallet_message_queue",
                "Neighbours"
            ],
            "params": [
                {
                    "name": "MessageOrigin",
                    "type": 433
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "prev",
                        "type": 433,
                        "typeName": "MessageOrigin",
                        "docs": []
                    },
                    {
                        "name": "next",
                        "type": 433,
                        "typeName": "MessageOrigin",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 833,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    433,
                    4
                ]
            },
            "docs": []
        },
        {
            "id": 834,
            "path": [
                "pallet_message_queue",
                "Page"
            ],
            "params": [
                {
                    "name": "Size",
                    "type": 4
                },
                {
                    "name": "HeapSize"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "remaining",
                        "type": 4,
                        "typeName": "Size",
                        "docs": []
                    },
                    {
                        "name": "remaining_size",
                        "type": 4,
                        "typeName": "Size",
                        "docs": []
                    },
                    {
                        "name": "first_index",
                        "type": 4,
                        "typeName": "Size",
                        "docs": []
                    },
                    {
                        "name": "first",
                        "type": 4,
                        "typeName": "Size",
                        "docs": []
                    },
                    {
                        "name": "last",
                        "type": 4,
                        "typeName": "Size",
                        "docs": []
                    },
                    {
                        "name": "heap",
                        "type": 835,
                        "typeName": "BoundedVec<u8, IntoU32<HeapSize, Size>>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 835,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 2
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 14,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 836,
            "path": [
                "pallet_message_queue",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "NotReapable",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "Page is not reapable because it has items remaining to be processed and is not old",
                            "enough."
                        ]
                    },
                    {
                        "name": "NoPage",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "Page to be reaped does not exist."
                        ]
                    },
                    {
                        "name": "NoMessage",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "The referenced message could not be found."
                        ]
                    },
                    {
                        "name": "AlreadyProcessed",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "The message was already processed and cannot be processed again."
                        ]
                    },
                    {
                        "name": "Queued",
                        "fields": [],
                        "index": 4,
                        "docs": [
                            "The message is queued for future execution."
                        ]
                    },
                    {
                        "name": "InsufficientWeight",
                        "fields": [],
                        "index": 5,
                        "docs": [
                            "There is temporarily not enough weight to continue servicing messages."
                        ]
                    },
                    {
                        "name": "TemporarilyUnprocessable",
                        "fields": [],
                        "index": 6,
                        "docs": [
                            "This message is temporarily unprocessable.",
                            "",
                            "Such errors are expected, but not guaranteed, to resolve themselves eventually through",
                            "retrying."
                        ]
                    },
                    {
                        "name": "QueuePaused",
                        "fields": [],
                        "index": 7,
                        "docs": [
                            "The queue is paused and no message can be executed from it.",
                            "",
                            "This can change at any time and may resolve in the future by re-trying."
                        ]
                    },
                    {
                        "name": "RecursiveDisallowed",
                        "fields": [],
                        "index": 8,
                        "docs": [
                            "Another call is in progress and needs to finish before this call can happen."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 837,
            "path": [
                "pallet_asset_rate",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "UnknownAssetKind",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "The given asset ID is unknown."
                        ]
                    },
                    {
                        "name": "AlreadyExists",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "The given asset ID already has an assigned conversion rate and cannot be re-created."
                        ]
                    },
                    {
                        "name": "Overflow",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "Overflow ocurred when calculating the inverse rate."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 838,
            "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 138
                },
                {
                    "name": "S"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 839,
                        "typeName": "Vec<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 839,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 138
            },
            "docs": []
        },
        {
            "id": 840,
            "path": [
                "pallet_beefy",
                "pallet",
                "Error"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "InvalidKeyOwnershipProof",
                        "fields": [],
                        "index": 0,
                        "docs": [
                            "A key ownership proof provided as part of an equivocation report is invalid."
                        ]
                    },
                    {
                        "name": "InvalidEquivocationProof",
                        "fields": [],
                        "index": 1,
                        "docs": [
                            "An equivocation proof provided as part of an equivocation report is invalid."
                        ]
                    },
                    {
                        "name": "DuplicateOffenceReport",
                        "fields": [],
                        "index": 2,
                        "docs": [
                            "A given equivocation report is valid but already previously reported."
                        ]
                    },
                    {
                        "name": "InvalidConfiguration",
                        "fields": [],
                        "index": 3,
                        "docs": [
                            "Submitted configuration is invalid."
                        ]
                    }
                ]
            },
            "docs": [
                "The `Error` enum of this pallet."
            ]
        },
        {
            "id": 841,
            "path": [
                "sp_consensus_beefy",
                "mmr",
                "BeefyAuthoritySet"
            ],
            "params": [
                {
                    "name": "AuthoritySetCommitment",
                    "type": 13
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "id",
                        "type": 12,
                        "typeName": "crate::ValidatorSetId",
                        "docs": []
                    },
                    {
                        "name": "len",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "keyset_commitment",
                        "type": 13,
                        "typeName": "AuthoritySetCommitment",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 842,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    843,
                    844,
                    845,
                    846,
                    847,
                    849,
                    850,
                    851,
                    852,
                    853
                ]
            },
            "docs": []
        },
        {
            "id": 843,
            "path": [
                "frame_system",
                "extensions",
                "check_non_zero_sender",
                "CheckNonZeroSender"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "composite",
                "value": []
            },
            "docs": []
        },
        {
            "id": 844,
            "path": [
                "frame_system",
                "extensions",
                "check_spec_version",
                "CheckSpecVersion"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "composite",
                "value": []
            },
            "docs": []
        },
        {
            "id": 845,
            "path": [
                "frame_system",
                "extensions",
                "check_tx_version",
                "CheckTxVersion"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "composite",
                "value": []
            },
            "docs": []
        },
        {
            "id": 846,
            "path": [
                "frame_system",
                "extensions",
                "check_genesis",
                "CheckGenesis"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "composite",
                "value": []
            },
            "docs": []
        },
        {
            "id": 847,
            "path": [
                "frame_system",
                "extensions",
                "check_mortality",
                "CheckMortality"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 848,
                        "typeName": "Era",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 848,
            "path": [
                "sp_runtime",
                "generic",
                "era",
                "Era"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Immortal",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Mortal1",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Mortal2",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Mortal3",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "Mortal4",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "Mortal5",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "Mortal6",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "Mortal7",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "Mortal8",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 8,
                        "docs": []
                    },
                    {
                        "name": "Mortal9",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": []
                    },
                    {
                        "name": "Mortal10",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 10,
                        "docs": []
                    },
                    {
                        "name": "Mortal11",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 11,
                        "docs": []
                    },
                    {
                        "name": "Mortal12",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 12,
                        "docs": []
                    },
                    {
                        "name": "Mortal13",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 13,
                        "docs": []
                    },
                    {
                        "name": "Mortal14",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 14,
                        "docs": []
                    },
                    {
                        "name": "Mortal15",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 15,
                        "docs": []
                    },
                    {
                        "name": "Mortal16",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 16,
                        "docs": []
                    },
                    {
                        "name": "Mortal17",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 17,
                        "docs": []
                    },
                    {
                        "name": "Mortal18",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 18,
                        "docs": []
                    },
                    {
                        "name": "Mortal19",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 19,
                        "docs": []
                    },
                    {
                        "name": "Mortal20",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 20,
                        "docs": []
                    },
                    {
                        "name": "Mortal21",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 21,
                        "docs": []
                    },
                    {
                        "name": "Mortal22",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 22,
                        "docs": []
                    },
                    {
                        "name": "Mortal23",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 23,
                        "docs": []
                    },
                    {
                        "name": "Mortal24",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 24,
                        "docs": []
                    },
                    {
                        "name": "Mortal25",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 25,
                        "docs": []
                    },
                    {
                        "name": "Mortal26",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 26,
                        "docs": []
                    },
                    {
                        "name": "Mortal27",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 27,
                        "docs": []
                    },
                    {
                        "name": "Mortal28",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 28,
                        "docs": []
                    },
                    {
                        "name": "Mortal29",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 29,
                        "docs": []
                    },
                    {
                        "name": "Mortal30",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 30,
                        "docs": []
                    },
                    {
                        "name": "Mortal31",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 31,
                        "docs": []
                    },
                    {
                        "name": "Mortal32",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 32,
                        "docs": []
                    },
                    {
                        "name": "Mortal33",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 33,
                        "docs": []
                    },
                    {
                        "name": "Mortal34",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 34,
                        "docs": []
                    },
                    {
                        "name": "Mortal35",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 35,
                        "docs": []
                    },
                    {
                        "name": "Mortal36",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 36,
                        "docs": []
                    },
                    {
                        "name": "Mortal37",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 37,
                        "docs": []
                    },
                    {
                        "name": "Mortal38",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 38,
                        "docs": []
                    },
                    {
                        "name": "Mortal39",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 39,
                        "docs": []
                    },
                    {
                        "name": "Mortal40",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 40,
                        "docs": []
                    },
                    {
                        "name": "Mortal41",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 41,
                        "docs": []
                    },
                    {
                        "name": "Mortal42",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 42,
                        "docs": []
                    },
                    {
                        "name": "Mortal43",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 43,
                        "docs": []
                    },
                    {
                        "name": "Mortal44",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 44,
                        "docs": []
                    },
                    {
                        "name": "Mortal45",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 45,
                        "docs": []
                    },
                    {
                        "name": "Mortal46",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 46,
                        "docs": []
                    },
                    {
                        "name": "Mortal47",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 47,
                        "docs": []
                    },
                    {
                        "name": "Mortal48",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 48,
                        "docs": []
                    },
                    {
                        "name": "Mortal49",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 49,
                        "docs": []
                    },
                    {
                        "name": "Mortal50",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 50,
                        "docs": []
                    },
                    {
                        "name": "Mortal51",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 51,
                        "docs": []
                    },
                    {
                        "name": "Mortal52",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 52,
                        "docs": []
                    },
                    {
                        "name": "Mortal53",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 53,
                        "docs": []
                    },
                    {
                        "name": "Mortal54",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 54,
                        "docs": []
                    },
                    {
                        "name": "Mortal55",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 55,
                        "docs": []
                    },
                    {
                        "name": "Mortal56",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 56,
                        "docs": []
                    },
                    {
                        "name": "Mortal57",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 57,
                        "docs": []
                    },
                    {
                        "name": "Mortal58",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 58,
                        "docs": []
                    },
                    {
                        "name": "Mortal59",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 59,
                        "docs": []
                    },
                    {
                        "name": "Mortal60",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 60,
                        "docs": []
                    },
                    {
                        "name": "Mortal61",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 61,
                        "docs": []
                    },
                    {
                        "name": "Mortal62",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 62,
                        "docs": []
                    },
                    {
                        "name": "Mortal63",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 63,
                        "docs": []
                    },
                    {
                        "name": "Mortal64",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 64,
                        "docs": []
                    },
                    {
                        "name": "Mortal65",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 65,
                        "docs": []
                    },
                    {
                        "name": "Mortal66",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 66,
                        "docs": []
                    },
                    {
                        "name": "Mortal67",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 67,
                        "docs": []
                    },
                    {
                        "name": "Mortal68",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 68,
                        "docs": []
                    },
                    {
                        "name": "Mortal69",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 69,
                        "docs": []
                    },
                    {
                        "name": "Mortal70",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 70,
                        "docs": []
                    },
                    {
                        "name": "Mortal71",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 71,
                        "docs": []
                    },
                    {
                        "name": "Mortal72",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 72,
                        "docs": []
                    },
                    {
                        "name": "Mortal73",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 73,
                        "docs": []
                    },
                    {
                        "name": "Mortal74",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 74,
                        "docs": []
                    },
                    {
                        "name": "Mortal75",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 75,
                        "docs": []
                    },
                    {
                        "name": "Mortal76",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 76,
                        "docs": []
                    },
                    {
                        "name": "Mortal77",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 77,
                        "docs": []
                    },
                    {
                        "name": "Mortal78",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 78,
                        "docs": []
                    },
                    {
                        "name": "Mortal79",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 79,
                        "docs": []
                    },
                    {
                        "name": "Mortal80",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 80,
                        "docs": []
                    },
                    {
                        "name": "Mortal81",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 81,
                        "docs": []
                    },
                    {
                        "name": "Mortal82",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 82,
                        "docs": []
                    },
                    {
                        "name": "Mortal83",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 83,
                        "docs": []
                    },
                    {
                        "name": "Mortal84",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 84,
                        "docs": []
                    },
                    {
                        "name": "Mortal85",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 85,
                        "docs": []
                    },
                    {
                        "name": "Mortal86",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 86,
                        "docs": []
                    },
                    {
                        "name": "Mortal87",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 87,
                        "docs": []
                    },
                    {
                        "name": "Mortal88",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 88,
                        "docs": []
                    },
                    {
                        "name": "Mortal89",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 89,
                        "docs": []
                    },
                    {
                        "name": "Mortal90",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 90,
                        "docs": []
                    },
                    {
                        "name": "Mortal91",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 91,
                        "docs": []
                    },
                    {
                        "name": "Mortal92",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 92,
                        "docs": []
                    },
                    {
                        "name": "Mortal93",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 93,
                        "docs": []
                    },
                    {
                        "name": "Mortal94",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 94,
                        "docs": []
                    },
                    {
                        "name": "Mortal95",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 95,
                        "docs": []
                    },
                    {
                        "name": "Mortal96",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 96,
                        "docs": []
                    },
                    {
                        "name": "Mortal97",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 97,
                        "docs": []
                    },
                    {
                        "name": "Mortal98",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 98,
                        "docs": []
                    },
                    {
                        "name": "Mortal99",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 99,
                        "docs": []
                    },
                    {
                        "name": "Mortal100",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 100,
                        "docs": []
                    },
                    {
                        "name": "Mortal101",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 101,
                        "docs": []
                    },
                    {
                        "name": "Mortal102",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 102,
                        "docs": []
                    },
                    {
                        "name": "Mortal103",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 103,
                        "docs": []
                    },
                    {
                        "name": "Mortal104",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 104,
                        "docs": []
                    },
                    {
                        "name": "Mortal105",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 105,
                        "docs": []
                    },
                    {
                        "name": "Mortal106",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 106,
                        "docs": []
                    },
                    {
                        "name": "Mortal107",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 107,
                        "docs": []
                    },
                    {
                        "name": "Mortal108",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 108,
                        "docs": []
                    },
                    {
                        "name": "Mortal109",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 109,
                        "docs": []
                    },
                    {
                        "name": "Mortal110",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 110,
                        "docs": []
                    },
                    {
                        "name": "Mortal111",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 111,
                        "docs": []
                    },
                    {
                        "name": "Mortal112",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 112,
                        "docs": []
                    },
                    {
                        "name": "Mortal113",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 113,
                        "docs": []
                    },
                    {
                        "name": "Mortal114",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 114,
                        "docs": []
                    },
                    {
                        "name": "Mortal115",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 115,
                        "docs": []
                    },
                    {
                        "name": "Mortal116",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 116,
                        "docs": []
                    },
                    {
                        "name": "Mortal117",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 117,
                        "docs": []
                    },
                    {
                        "name": "Mortal118",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 118,
                        "docs": []
                    },
                    {
                        "name": "Mortal119",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 119,
                        "docs": []
                    },
                    {
                        "name": "Mortal120",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 120,
                        "docs": []
                    },
                    {
                        "name": "Mortal121",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 121,
                        "docs": []
                    },
                    {
                        "name": "Mortal122",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 122,
                        "docs": []
                    },
                    {
                        "name": "Mortal123",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 123,
                        "docs": []
                    },
                    {
                        "name": "Mortal124",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 124,
                        "docs": []
                    },
                    {
                        "name": "Mortal125",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 125,
                        "docs": []
                    },
                    {
                        "name": "Mortal126",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 126,
                        "docs": []
                    },
                    {
                        "name": "Mortal127",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 127,
                        "docs": []
                    },
                    {
                        "name": "Mortal128",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 128,
                        "docs": []
                    },
                    {
                        "name": "Mortal129",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 129,
                        "docs": []
                    },
                    {
                        "name": "Mortal130",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 130,
                        "docs": []
                    },
                    {
                        "name": "Mortal131",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 131,
                        "docs": []
                    },
                    {
                        "name": "Mortal132",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 132,
                        "docs": []
                    },
                    {
                        "name": "Mortal133",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 133,
                        "docs": []
                    },
                    {
                        "name": "Mortal134",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 134,
                        "docs": []
                    },
                    {
                        "name": "Mortal135",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 135,
                        "docs": []
                    },
                    {
                        "name": "Mortal136",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 136,
                        "docs": []
                    },
                    {
                        "name": "Mortal137",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 137,
                        "docs": []
                    },
                    {
                        "name": "Mortal138",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 138,
                        "docs": []
                    },
                    {
                        "name": "Mortal139",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 139,
                        "docs": []
                    },
                    {
                        "name": "Mortal140",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 140,
                        "docs": []
                    },
                    {
                        "name": "Mortal141",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 141,
                        "docs": []
                    },
                    {
                        "name": "Mortal142",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 142,
                        "docs": []
                    },
                    {
                        "name": "Mortal143",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 143,
                        "docs": []
                    },
                    {
                        "name": "Mortal144",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 144,
                        "docs": []
                    },
                    {
                        "name": "Mortal145",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 145,
                        "docs": []
                    },
                    {
                        "name": "Mortal146",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 146,
                        "docs": []
                    },
                    {
                        "name": "Mortal147",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 147,
                        "docs": []
                    },
                    {
                        "name": "Mortal148",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 148,
                        "docs": []
                    },
                    {
                        "name": "Mortal149",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 149,
                        "docs": []
                    },
                    {
                        "name": "Mortal150",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 150,
                        "docs": []
                    },
                    {
                        "name": "Mortal151",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 151,
                        "docs": []
                    },
                    {
                        "name": "Mortal152",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 152,
                        "docs": []
                    },
                    {
                        "name": "Mortal153",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 153,
                        "docs": []
                    },
                    {
                        "name": "Mortal154",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 154,
                        "docs": []
                    },
                    {
                        "name": "Mortal155",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 155,
                        "docs": []
                    },
                    {
                        "name": "Mortal156",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 156,
                        "docs": []
                    },
                    {
                        "name": "Mortal157",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 157,
                        "docs": []
                    },
                    {
                        "name": "Mortal158",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 158,
                        "docs": []
                    },
                    {
                        "name": "Mortal159",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 159,
                        "docs": []
                    },
                    {
                        "name": "Mortal160",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 160,
                        "docs": []
                    },
                    {
                        "name": "Mortal161",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 161,
                        "docs": []
                    },
                    {
                        "name": "Mortal162",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 162,
                        "docs": []
                    },
                    {
                        "name": "Mortal163",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 163,
                        "docs": []
                    },
                    {
                        "name": "Mortal164",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 164,
                        "docs": []
                    },
                    {
                        "name": "Mortal165",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 165,
                        "docs": []
                    },
                    {
                        "name": "Mortal166",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 166,
                        "docs": []
                    },
                    {
                        "name": "Mortal167",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 167,
                        "docs": []
                    },
                    {
                        "name": "Mortal168",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 168,
                        "docs": []
                    },
                    {
                        "name": "Mortal169",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 169,
                        "docs": []
                    },
                    {
                        "name": "Mortal170",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 170,
                        "docs": []
                    },
                    {
                        "name": "Mortal171",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 171,
                        "docs": []
                    },
                    {
                        "name": "Mortal172",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 172,
                        "docs": []
                    },
                    {
                        "name": "Mortal173",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 173,
                        "docs": []
                    },
                    {
                        "name": "Mortal174",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 174,
                        "docs": []
                    },
                    {
                        "name": "Mortal175",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 175,
                        "docs": []
                    },
                    {
                        "name": "Mortal176",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 176,
                        "docs": []
                    },
                    {
                        "name": "Mortal177",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 177,
                        "docs": []
                    },
                    {
                        "name": "Mortal178",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 178,
                        "docs": []
                    },
                    {
                        "name": "Mortal179",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 179,
                        "docs": []
                    },
                    {
                        "name": "Mortal180",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 180,
                        "docs": []
                    },
                    {
                        "name": "Mortal181",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 181,
                        "docs": []
                    },
                    {
                        "name": "Mortal182",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 182,
                        "docs": []
                    },
                    {
                        "name": "Mortal183",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 183,
                        "docs": []
                    },
                    {
                        "name": "Mortal184",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 184,
                        "docs": []
                    },
                    {
                        "name": "Mortal185",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 185,
                        "docs": []
                    },
                    {
                        "name": "Mortal186",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 186,
                        "docs": []
                    },
                    {
                        "name": "Mortal187",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 187,
                        "docs": []
                    },
                    {
                        "name": "Mortal188",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 188,
                        "docs": []
                    },
                    {
                        "name": "Mortal189",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 189,
                        "docs": []
                    },
                    {
                        "name": "Mortal190",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 190,
                        "docs": []
                    },
                    {
                        "name": "Mortal191",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 191,
                        "docs": []
                    },
                    {
                        "name": "Mortal192",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 192,
                        "docs": []
                    },
                    {
                        "name": "Mortal193",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 193,
                        "docs": []
                    },
                    {
                        "name": "Mortal194",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 194,
                        "docs": []
                    },
                    {
                        "name": "Mortal195",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 195,
                        "docs": []
                    },
                    {
                        "name": "Mortal196",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 196,
                        "docs": []
                    },
                    {
                        "name": "Mortal197",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 197,
                        "docs": []
                    },
                    {
                        "name": "Mortal198",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 198,
                        "docs": []
                    },
                    {
                        "name": "Mortal199",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 199,
                        "docs": []
                    },
                    {
                        "name": "Mortal200",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 200,
                        "docs": []
                    },
                    {
                        "name": "Mortal201",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 201,
                        "docs": []
                    },
                    {
                        "name": "Mortal202",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 202,
                        "docs": []
                    },
                    {
                        "name": "Mortal203",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 203,
                        "docs": []
                    },
                    {
                        "name": "Mortal204",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 204,
                        "docs": []
                    },
                    {
                        "name": "Mortal205",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 205,
                        "docs": []
                    },
                    {
                        "name": "Mortal206",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 206,
                        "docs": []
                    },
                    {
                        "name": "Mortal207",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 207,
                        "docs": []
                    },
                    {
                        "name": "Mortal208",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 208,
                        "docs": []
                    },
                    {
                        "name": "Mortal209",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 209,
                        "docs": []
                    },
                    {
                        "name": "Mortal210",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 210,
                        "docs": []
                    },
                    {
                        "name": "Mortal211",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 211,
                        "docs": []
                    },
                    {
                        "name": "Mortal212",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 212,
                        "docs": []
                    },
                    {
                        "name": "Mortal213",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 213,
                        "docs": []
                    },
                    {
                        "name": "Mortal214",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 214,
                        "docs": []
                    },
                    {
                        "name": "Mortal215",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 215,
                        "docs": []
                    },
                    {
                        "name": "Mortal216",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 216,
                        "docs": []
                    },
                    {
                        "name": "Mortal217",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 217,
                        "docs": []
                    },
                    {
                        "name": "Mortal218",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 218,
                        "docs": []
                    },
                    {
                        "name": "Mortal219",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 219,
                        "docs": []
                    },
                    {
                        "name": "Mortal220",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 220,
                        "docs": []
                    },
                    {
                        "name": "Mortal221",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 221,
                        "docs": []
                    },
                    {
                        "name": "Mortal222",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 222,
                        "docs": []
                    },
                    {
                        "name": "Mortal223",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 223,
                        "docs": []
                    },
                    {
                        "name": "Mortal224",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 224,
                        "docs": []
                    },
                    {
                        "name": "Mortal225",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 225,
                        "docs": []
                    },
                    {
                        "name": "Mortal226",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 226,
                        "docs": []
                    },
                    {
                        "name": "Mortal227",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 227,
                        "docs": []
                    },
                    {
                        "name": "Mortal228",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 228,
                        "docs": []
                    },
                    {
                        "name": "Mortal229",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 229,
                        "docs": []
                    },
                    {
                        "name": "Mortal230",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 230,
                        "docs": []
                    },
                    {
                        "name": "Mortal231",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 231,
                        "docs": []
                    },
                    {
                        "name": "Mortal232",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 232,
                        "docs": []
                    },
                    {
                        "name": "Mortal233",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 233,
                        "docs": []
                    },
                    {
                        "name": "Mortal234",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 234,
                        "docs": []
                    },
                    {
                        "name": "Mortal235",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 235,
                        "docs": []
                    },
                    {
                        "name": "Mortal236",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 236,
                        "docs": []
                    },
                    {
                        "name": "Mortal237",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 237,
                        "docs": []
                    },
                    {
                        "name": "Mortal238",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 238,
                        "docs": []
                    },
                    {
                        "name": "Mortal239",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 239,
                        "docs": []
                    },
                    {
                        "name": "Mortal240",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 240,
                        "docs": []
                    },
                    {
                        "name": "Mortal241",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 241,
                        "docs": []
                    },
                    {
                        "name": "Mortal242",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 242,
                        "docs": []
                    },
                    {
                        "name": "Mortal243",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 243,
                        "docs": []
                    },
                    {
                        "name": "Mortal244",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 244,
                        "docs": []
                    },
                    {
                        "name": "Mortal245",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 245,
                        "docs": []
                    },
                    {
                        "name": "Mortal246",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 246,
                        "docs": []
                    },
                    {
                        "name": "Mortal247",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 247,
                        "docs": []
                    },
                    {
                        "name": "Mortal248",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 248,
                        "docs": []
                    },
                    {
                        "name": "Mortal249",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 249,
                        "docs": []
                    },
                    {
                        "name": "Mortal250",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 250,
                        "docs": []
                    },
                    {
                        "name": "Mortal251",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 251,
                        "docs": []
                    },
                    {
                        "name": "Mortal252",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 252,
                        "docs": []
                    },
                    {
                        "name": "Mortal253",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 253,
                        "docs": []
                    },
                    {
                        "name": "Mortal254",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 254,
                        "docs": []
                    },
                    {
                        "name": "Mortal255",
                        "fields": [
                            {
                                "type": 2,
                                "docs": []
                            }
                        ],
                        "index": 255,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 849,
            "path": [
                "frame_system",
                "extensions",
                "check_nonce",
                "CheckNonce"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 59,
                        "typeName": "T::Nonce",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 850,
            "path": [
                "frame_system",
                "extensions",
                "check_weight",
                "CheckWeight"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "composite",
                "value": []
            },
            "docs": []
        },
        {
            "id": 851,
            "path": [
                "pallet_transaction_payment",
                "ChargeTransactionPayment"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 63,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 852,
            "path": [
                "polkadot_runtime_common",
                "claims",
                "PrevalidateAttests"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "composite",
                "value": []
            },
            "docs": []
        },
        {
            "id": 853,
            "path": [
                "frame_metadata_hash_extension",
                "CheckMetadataHash"
            ],
            "params": [
                {
                    "name": "T"
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "mode",
                        "type": 854,
                        "typeName": "Mode",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 854,
            "path": [
                "frame_metadata_hash_extension",
                "Mode"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Disabled",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Enabled",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 855,
            "path": [
                "polkadot_runtime",
                "Runtime"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": []
            },
            "docs": []
        },
        {
            "id": 856,
            "path": [
                "relay_common",
                "apis",
                "InflationInfo"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "inflation",
                        "type": 174,
                        "typeName": "sp_runtime::Perquintill",
                        "docs": []
                    },
                    {
                        "name": "next_mint",
                        "type": 857,
                        "typeName": "(polkadot_primitives::Balance, polkadot_primitives::Balance)",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 857,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    6,
                    6
                ]
            },
            "docs": []
        },
        {
            "id": 858,
            "path": [
                "sp_runtime",
                "generic",
                "block",
                "Block"
            ],
            "params": [
                {
                    "name": "Header",
                    "type": 104
                },
                {
                    "name": "Extrinsic",
                    "type": 859
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "header",
                        "type": 104,
                        "typeName": "Header",
                        "docs": []
                    },
                    {
                        "name": "extrinsics",
                        "type": 860,
                        "typeName": "Vec<Extrinsic>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 859,
            "path": [
                "sp_runtime",
                "generic",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
            ],
            "params": [
                {
                    "name": "Address",
                    "type": 113
                },
                {
                    "name": "Call",
                    "type": 93
                },
                {
                    "name": "Signature",
                    "type": 341
                },
                {
                    "name": "Extra",
                    "type": 842
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 14,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 860,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 859
            },
            "docs": []
        },
        {
            "id": 861,
            "path": [
                "sp_runtime",
                "ExtrinsicInclusionMode"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "AllExtrinsics",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "OnlyInherents",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 862,
            "path": [
                "sp_core",
                "OpaqueMetadata"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 14,
                        "typeName": "Vec<u8>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 863,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 862
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 862,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 864,
            "path": [
                "Result"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 34
                },
                {
                    "name": "E",
                    "type": 865
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Ok",
                        "fields": [
                            {
                                "type": 34,
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Err",
                        "fields": [
                            {
                                "type": 865,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 865,
            "path": [
                "sp_runtime",
                "transaction_validity",
                "TransactionValidityError"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Invalid",
                        "fields": [
                            {
                                "type": 866,
                                "typeName": "InvalidTransaction",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Unknown",
                        "fields": [
                            {
                                "type": 867,
                                "typeName": "UnknownTransaction",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 866,
            "path": [
                "sp_runtime",
                "transaction_validity",
                "InvalidTransaction"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Call",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Payment",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Future",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Stale",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "BadProof",
                        "fields": [],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "AncientBirthBlock",
                        "fields": [],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "ExhaustsResources",
                        "fields": [],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "Custom",
                        "fields": [
                            {
                                "type": 2,
                                "typeName": "u8",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "BadMandatory",
                        "fields": [],
                        "index": 8,
                        "docs": []
                    },
                    {
                        "name": "MandatoryValidation",
                        "fields": [],
                        "index": 9,
                        "docs": []
                    },
                    {
                        "name": "BadSigner",
                        "fields": [],
                        "index": 10,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 867,
            "path": [
                "sp_runtime",
                "transaction_validity",
                "UnknownTransaction"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "CannotLookup",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "NoUnsignedValidator",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Custom",
                        "fields": [
                            {
                                "type": 2,
                                "typeName": "u8",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 868,
            "path": [
                "sp_inherents",
                "InherentData"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "data",
                        "type": 869,
                        "typeName": "BTreeMap<InherentIdentifier, Vec<u8>>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 869,
            "path": [
                "BTreeMap"
            ],
            "params": [
                {
                    "name": "K",
                    "type": 364
                },
                {
                    "name": "V",
                    "type": 14
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 870,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 870,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 871
            },
            "docs": []
        },
        {
            "id": 871,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    364,
                    14
                ]
            },
            "docs": []
        },
        {
            "id": 872,
            "path": [
                "sp_inherents",
                "CheckInherentsResult"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "okay",
                        "type": 8,
                        "typeName": "bool",
                        "docs": []
                    },
                    {
                        "name": "fatal_error",
                        "type": 8,
                        "typeName": "bool",
                        "docs": []
                    },
                    {
                        "name": "errors",
                        "type": 868,
                        "typeName": "InherentData",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 873,
            "path": [
                "sp_runtime",
                "transaction_validity",
                "TransactionSource"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "InBlock",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Local",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "External",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 874,
            "path": [
                "Result"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 875
                },
                {
                    "name": "E",
                    "type": 865
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Ok",
                        "fields": [
                            {
                                "type": 875,
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Err",
                        "fields": [
                            {
                                "type": 865,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 875,
            "path": [
                "sp_runtime",
                "transaction_validity",
                "ValidTransaction"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "priority",
                        "type": 12,
                        "typeName": "TransactionPriority",
                        "docs": []
                    },
                    {
                        "name": "requires",
                        "type": 97,
                        "typeName": "Vec<TransactionTag>",
                        "docs": []
                    },
                    {
                        "name": "provides",
                        "type": 97,
                        "typeName": "Vec<TransactionTag>",
                        "docs": []
                    },
                    {
                        "name": "longevity",
                        "type": 12,
                        "typeName": "TransactionLongevity",
                        "docs": []
                    },
                    {
                        "name": "propagate",
                        "type": 8,
                        "typeName": "bool",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 876,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    723,
                    877
                ]
            },
            "docs": []
        },
        {
            "id": 877,
            "path": [
                "polkadot_primitives",
                "v7",
                "GroupRotationInfo"
            ],
            "params": [
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "session_start_block",
                        "type": 4,
                        "typeName": "N",
                        "docs": []
                    },
                    {
                        "name": "group_rotation_frequency",
                        "type": 4,
                        "typeName": "N",
                        "docs": []
                    },
                    {
                        "name": "now",
                        "type": 4,
                        "typeName": "N",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 878,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 879
            },
            "docs": []
        },
        {
            "id": 879,
            "path": [
                "polkadot_primitives",
                "v7",
                "CoreState"
            ],
            "params": [
                {
                    "name": "H",
                    "type": 13
                },
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Occupied",
                        "fields": [
                            {
                                "type": 880,
                                "typeName": "OccupiedCore<H, N>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Scheduled",
                        "fields": [
                            {
                                "type": 882,
                                "typeName": "ScheduledCore",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Free",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 880,
            "path": [
                "polkadot_primitives",
                "v7",
                "OccupiedCore"
            ],
            "params": [
                {
                    "name": "H",
                    "type": 13
                },
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "next_up_on_available",
                        "type": 881,
                        "typeName": "Option<ScheduledCore>",
                        "docs": []
                    },
                    {
                        "name": "occupied_since",
                        "type": 4,
                        "typeName": "N",
                        "docs": []
                    },
                    {
                        "name": "time_out_at",
                        "type": 4,
                        "typeName": "N",
                        "docs": []
                    },
                    {
                        "name": "next_up_on_time_out",
                        "type": 881,
                        "typeName": "Option<ScheduledCore>",
                        "docs": []
                    },
                    {
                        "name": "availability",
                        "type": 292,
                        "typeName": "BitVec<u8, bitvec::order::Lsb0>",
                        "docs": []
                    },
                    {
                        "name": "group_responsible",
                        "type": 477,
                        "typeName": "GroupIndex",
                        "docs": []
                    },
                    {
                        "name": "candidate_hash",
                        "type": 315,
                        "typeName": "CandidateHash",
                        "docs": []
                    },
                    {
                        "name": "candidate_descriptor",
                        "type": 299,
                        "typeName": "CandidateDescriptor<H>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 881,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 882
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 882,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 882,
            "path": [
                "polkadot_primitives",
                "v7",
                "ScheduledCore"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "para_id",
                        "type": 163,
                        "typeName": "Id",
                        "docs": []
                    },
                    {
                        "name": "collator",
                        "type": 883,
                        "typeName": "Option<CollatorId>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 883,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 300
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 300,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 884,
            "path": [
                "polkadot_primitives",
                "v7",
                "OccupiedCoreAssumption"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Included",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "TimedOut",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Free",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 885,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 886
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 886,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 886,
            "path": [
                "polkadot_primitives",
                "v7",
                "PersistedValidationData"
            ],
            "params": [
                {
                    "name": "H",
                    "type": 13
                },
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "parent_head",
                        "type": 310,
                        "typeName": "HeadData",
                        "docs": []
                    },
                    {
                        "name": "relay_parent_number",
                        "type": 4,
                        "typeName": "N",
                        "docs": []
                    },
                    {
                        "name": "relay_parent_storage_root",
                        "type": 13,
                        "typeName": "H",
                        "docs": []
                    },
                    {
                        "name": "max_pov_size",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 887,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 888
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 888,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 888,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    886,
                    302
                ]
            },
            "docs": []
        },
        {
            "id": 889,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 298
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 298,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 890,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 891
            },
            "docs": []
        },
        {
            "id": 891,
            "path": [
                "polkadot_primitives",
                "v7",
                "CandidateEvent"
            ],
            "params": [
                {
                    "name": "H",
                    "type": 13
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "CandidateBacked",
                        "fields": [
                            {
                                "type": 475,
                                "typeName": "CandidateReceipt<H>",
                                "docs": []
                            },
                            {
                                "type": 310,
                                "typeName": "HeadData",
                                "docs": []
                            },
                            {
                                "type": 476,
                                "typeName": "CoreIndex",
                                "docs": []
                            },
                            {
                                "type": 477,
                                "typeName": "GroupIndex",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "CandidateIncluded",
                        "fields": [
                            {
                                "type": 475,
                                "typeName": "CandidateReceipt<H>",
                                "docs": []
                            },
                            {
                                "type": 310,
                                "typeName": "HeadData",
                                "docs": []
                            },
                            {
                                "type": 476,
                                "typeName": "CoreIndex",
                                "docs": []
                            },
                            {
                                "type": 477,
                                "typeName": "GroupIndex",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "CandidateTimedOut",
                        "fields": [
                            {
                                "type": 475,
                                "typeName": "CandidateReceipt<H>",
                                "docs": []
                            },
                            {
                                "type": 310,
                                "typeName": "HeadData",
                                "docs": []
                            },
                            {
                                "type": 476,
                                "typeName": "CoreIndex",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 892,
            "path": [
                "BTreeMap"
            ],
            "params": [
                {
                    "name": "K",
                    "type": 163
                },
                {
                    "name": "V",
                    "type": 755
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 893,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 893,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 894
            },
            "docs": []
        },
        {
            "id": 894,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    163,
                    755
                ]
            },
            "docs": []
        },
        {
            "id": 895,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 717
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 717,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 896,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 761
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 761,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 897,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 302
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 302,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 898,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 899
            },
            "docs": []
        },
        {
            "id": 899,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    4,
                    315,
                    765
                ]
            },
            "docs": []
        },
        {
            "id": 900,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 278
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 278,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 901,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 902
            },
            "docs": []
        },
        {
            "id": 902,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    4,
                    315,
                    768
                ]
            },
            "docs": []
        },
        {
            "id": 903,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 904
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 904,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 904,
            "path": [
                "polkadot_primitives",
                "v7",
                "slashing",
                "OpaqueKeyOwnershipProof"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 14,
                        "typeName": "Vec<u8>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 905,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 35
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 35,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 906,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 907
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 907,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 907,
            "path": [
                "polkadot_primitives",
                "v7",
                "async_backing",
                "BackingState"
            ],
            "params": [
                {
                    "name": "H",
                    "type": 13
                },
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "constraints",
                        "type": 908,
                        "typeName": "Constraints<N>",
                        "docs": []
                    },
                    {
                        "name": "pending_availability",
                        "type": 916,
                        "typeName": "Vec<CandidatePendingAvailability<H, N>>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 908,
            "path": [
                "polkadot_primitives",
                "v7",
                "async_backing",
                "Constraints"
            ],
            "params": [
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "min_relay_parent_number",
                        "type": 4,
                        "typeName": "N",
                        "docs": []
                    },
                    {
                        "name": "max_pov_size",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "max_code_size",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "ump_remaining",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "ump_remaining_bytes",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "max_ump_num_per_candidate",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "dmp_remaining_messages",
                        "type": 121,
                        "typeName": "Vec<N>",
                        "docs": []
                    },
                    {
                        "name": "hrmp_inbound",
                        "type": 909,
                        "typeName": "InboundHrmpLimitations<N>",
                        "docs": []
                    },
                    {
                        "name": "hrmp_channels_out",
                        "type": 910,
                        "typeName": "Vec<(Id, OutboundHrmpChannelLimitations)>",
                        "docs": []
                    },
                    {
                        "name": "max_hrmp_num_per_candidate",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "required_parent",
                        "type": 310,
                        "typeName": "HeadData",
                        "docs": []
                    },
                    {
                        "name": "validation_code_hash",
                        "type": 302,
                        "typeName": "ValidationCodeHash",
                        "docs": []
                    },
                    {
                        "name": "upgrade_restriction",
                        "type": 913,
                        "typeName": "Option<UpgradeRestriction>",
                        "docs": []
                    },
                    {
                        "name": "future_validation_code",
                        "type": 914,
                        "typeName": "Option<(N, ValidationCodeHash)>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 909,
            "path": [
                "polkadot_primitives",
                "v7",
                "async_backing",
                "InboundHrmpLimitations"
            ],
            "params": [
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "valid_watermarks",
                        "type": 121,
                        "typeName": "Vec<N>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 910,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 911
            },
            "docs": []
        },
        {
            "id": 911,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    163,
                    912
                ]
            },
            "docs": []
        },
        {
            "id": 912,
            "path": [
                "polkadot_primitives",
                "v7",
                "async_backing",
                "OutboundHrmpChannelLimitations"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "bytes_remaining",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    },
                    {
                        "name": "messages_remaining",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 913,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 745
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 745,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 914,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 915
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 915,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 915,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    4,
                    302
                ]
            },
            "docs": []
        },
        {
            "id": 916,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 917
            },
            "docs": []
        },
        {
            "id": 917,
            "path": [
                "polkadot_primitives",
                "v7",
                "async_backing",
                "CandidatePendingAvailability"
            ],
            "params": [
                {
                    "name": "H",
                    "type": 13
                },
                {
                    "name": "N",
                    "type": 4
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "candidate_hash",
                        "type": 315,
                        "typeName": "CandidateHash",
                        "docs": []
                    },
                    {
                        "name": "descriptor",
                        "type": 299,
                        "typeName": "CandidateDescriptor<H>",
                        "docs": []
                    },
                    {
                        "name": "commitments",
                        "type": 303,
                        "typeName": "CandidateCommitments",
                        "docs": []
                    },
                    {
                        "name": "relay_parent_number",
                        "type": 4,
                        "typeName": "N",
                        "docs": []
                    },
                    {
                        "name": "max_pov_size",
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 918,
            "path": [
                "BTreeMap"
            ],
            "params": [
                {
                    "name": "K",
                    "type": 476
                },
                {
                    "name": "V",
                    "type": 737
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 919,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 919,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 920
            },
            "docs": []
        },
        {
            "id": 920,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    476,
                    737
                ]
            },
            "docs": []
        },
        {
            "id": 921,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 298
            },
            "docs": []
        },
        {
            "id": 922,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 923
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 923,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 923,
            "path": [
                "sp_consensus_beefy",
                "ValidatorSet"
            ],
            "params": [
                {
                    "name": "AuthorityId",
                    "type": 138
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "validators",
                        "type": 839,
                        "typeName": "Vec<AuthorityId>",
                        "docs": []
                    },
                    {
                        "name": "id",
                        "type": 12,
                        "typeName": "ValidatorSetId",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 924,
            "path": [
                "sp_runtime",
                "OpaqueValue"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 14,
                        "typeName": "Vec<u8>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 925,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 924
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 924,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 926,
            "path": [
                "Result"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 13
                },
                {
                    "name": "E",
                    "type": 927
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Ok",
                        "fields": [
                            {
                                "type": 13,
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Err",
                        "fields": [
                            {
                                "type": 927,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 927,
            "path": [
                "sp_mmr_primitives",
                "Error"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "InvalidNumericOp",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Push",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "GetRoot",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Commit",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "GenerateProof",
                        "fields": [],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "Verify",
                        "fields": [],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "LeafNotFound",
                        "fields": [],
                        "index": 6,
                        "docs": []
                    },
                    {
                        "name": "PalletNotIncluded",
                        "fields": [],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "InvalidLeafIndex",
                        "fields": [],
                        "index": 8,
                        "docs": []
                    },
                    {
                        "name": "InvalidBestKnownBlock",
                        "fields": [],
                        "index": 9,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 928,
            "path": [
                "Result"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 12
                },
                {
                    "name": "E",
                    "type": 927
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Ok",
                        "fields": [
                            {
                                "type": 12,
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Err",
                        "fields": [
                            {
                                "type": 927,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 929,
            "path": [
                "Result"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 930
                },
                {
                    "name": "E",
                    "type": 927
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Ok",
                        "fields": [
                            {
                                "type": 930,
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Err",
                        "fields": [
                            {
                                "type": 927,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 930,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    931,
                    933
                ]
            },
            "docs": []
        },
        {
            "id": 931,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 932
            },
            "docs": []
        },
        {
            "id": 932,
            "path": [
                "sp_mmr_primitives",
                "EncodableOpaqueLeaf"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 14,
                        "typeName": "Vec<u8>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 933,
            "path": [
                "sp_mmr_primitives",
                "LeafProof"
            ],
            "params": [
                {
                    "name": "Hash",
                    "type": 13
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "leaf_indices",
                        "type": 680,
                        "typeName": "Vec<LeafIndex>",
                        "docs": []
                    },
                    {
                        "name": "leaf_count",
                        "type": 12,
                        "typeName": "NodeIndex",
                        "docs": []
                    },
                    {
                        "name": "items",
                        "type": 101,
                        "typeName": "Vec<Hash>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 934,
            "path": [
                "Result"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 35
                },
                {
                    "name": "E",
                    "type": 927
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Ok",
                        "fields": [
                            {
                                "type": 35,
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Err",
                        "fields": [
                            {
                                "type": 927,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 935,
            "path": [
                "sp_consensus_babe",
                "BabeConfiguration"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "slot_duration",
                        "type": 12,
                        "typeName": "u64",
                        "docs": []
                    },
                    {
                        "name": "epoch_length",
                        "type": 12,
                        "typeName": "u64",
                        "docs": []
                    },
                    {
                        "name": "c",
                        "type": 109,
                        "typeName": "(u64, u64)",
                        "docs": []
                    },
                    {
                        "name": "authorities",
                        "type": 530,
                        "typeName": "Vec<(AuthorityId, BabeAuthorityWeight)>",
                        "docs": []
                    },
                    {
                        "name": "randomness",
                        "type": 1,
                        "typeName": "Randomness",
                        "docs": []
                    },
                    {
                        "name": "allowed_slots",
                        "type": 110,
                        "typeName": "AllowedSlots",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 936,
            "path": [
                "sp_consensus_babe",
                "Epoch"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "epoch_index",
                        "type": 12,
                        "typeName": "u64",
                        "docs": []
                    },
                    {
                        "name": "start_slot",
                        "type": 106,
                        "typeName": "Slot",
                        "docs": []
                    },
                    {
                        "name": "duration",
                        "type": 12,
                        "typeName": "u64",
                        "docs": []
                    },
                    {
                        "name": "authorities",
                        "type": 530,
                        "typeName": "Vec<(AuthorityId, BabeAuthorityWeight)>",
                        "docs": []
                    },
                    {
                        "name": "randomness",
                        "type": 1,
                        "typeName": "Randomness",
                        "docs": []
                    },
                    {
                        "name": "config",
                        "type": 539,
                        "typeName": "BabeEpochConfiguration",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 937,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 938
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 938,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 938,
            "path": [
                "sp_consensus_babe",
                "OpaqueKeyOwnershipProof"
            ],
            "params": [],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "type": 14,
                        "typeName": "Vec<u8>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 939,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 940
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 940,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 940,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 941
            },
            "docs": []
        },
        {
            "id": 941,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    14,
                    595
                ]
            },
            "docs": []
        },
        {
            "id": 942,
            "path": [
                "pallet_transaction_payment",
                "types",
                "RuntimeDispatchInfo"
            ],
            "params": [
                {
                    "name": "Balance",
                    "type": 6
                },
                {
                    "name": "Weight",
                    "type": 10
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "weight",
                        "type": 10,
                        "typeName": "Weight",
                        "docs": []
                    },
                    {
                        "name": "class",
                        "type": 24,
                        "typeName": "DispatchClass",
                        "docs": []
                    },
                    {
                        "name": "partial_fee",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 943,
            "path": [
                "pallet_transaction_payment",
                "types",
                "FeeDetails"
            ],
            "params": [
                {
                    "name": "Balance",
                    "type": 6
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "inclusion_fee",
                        "type": 944,
                        "typeName": "Option<InclusionFee<Balance>>",
                        "docs": []
                    },
                    {
                        "name": "tip",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 944,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 945
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 945,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 945,
            "path": [
                "pallet_transaction_payment",
                "types",
                "InclusionFee"
            ],
            "params": [
                {
                    "name": "Balance",
                    "type": 6
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "base_fee",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "len_fee",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    },
                    {
                        "name": "adjusted_weight_fee",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 946,
            "path": [
                "Result"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 947
                },
                {
                    "name": "E",
                    "type": 948
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Ok",
                        "fields": [
                            {
                                "type": 947,
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Err",
                        "fields": [
                            {
                                "type": 948,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 947,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 431
            },
            "docs": []
        },
        {
            "id": 948,
            "path": [
                "xcm_runtime_apis",
                "fees",
                "Error"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Unimplemented",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "VersionedConversionFailed",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "WeightNotComputable",
                        "fields": [],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "UnhandledXcmVersion",
                        "fields": [],
                        "index": 3,
                        "docs": []
                    },
                    {
                        "name": "AssetNotFound",
                        "fields": [],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "Unroutable",
                        "fields": [],
                        "index": 5,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 949,
            "path": [
                "Result"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 10
                },
                {
                    "name": "E",
                    "type": 948
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Ok",
                        "fields": [
                            {
                                "type": 10,
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Err",
                        "fields": [
                            {
                                "type": 948,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 950,
            "path": [
                "Result"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 6
                },
                {
                    "name": "E",
                    "type": 948
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Ok",
                        "fields": [
                            {
                                "type": 6,
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Err",
                        "fields": [
                            {
                                "type": 948,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 951,
            "path": [
                "Result"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 418
                },
                {
                    "name": "E",
                    "type": 948
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Ok",
                        "fields": [
                            {
                                "type": 418,
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Err",
                        "fields": [
                            {
                                "type": 948,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 952,
            "path": [
                "Result"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 953
                },
                {
                    "name": "E",
                    "type": 959
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Ok",
                        "fields": [
                            {
                                "type": 953,
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Err",
                        "fields": [
                            {
                                "type": 959,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 953,
            "path": [
                "xcm_runtime_apis",
                "dry_run",
                "CallDryRunEffects"
            ],
            "params": [
                {
                    "name": "Event",
                    "type": 21
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "execution_result",
                        "type": 450,
                        "typeName": "DispatchResultWithPostInfo",
                        "docs": []
                    },
                    {
                        "name": "emitted_events",
                        "type": 954,
                        "typeName": "Vec<Event>",
                        "docs": []
                    },
                    {
                        "name": "local_xcm",
                        "type": 955,
                        "typeName": "Option<VersionedXcm<()>>",
                        "docs": []
                    },
                    {
                        "name": "forwarded_xcms",
                        "type": 956,
                        "typeName": "Vec<(VersionedLocation, Vec<VersionedXcm<()>>)>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 954,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 21
            },
            "docs": []
        },
        {
            "id": 955,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 354
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 354,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 956,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 957
            },
            "docs": []
        },
        {
            "id": 957,
            "path": [],
            "params": [],
            "def": {
                "tag": "tuple",
                "value": [
                    81,
                    958
                ]
            },
            "docs": []
        },
        {
            "id": 958,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 354
            },
            "docs": []
        },
        {
            "id": 959,
            "path": [
                "xcm_runtime_apis",
                "dry_run",
                "Error"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Unimplemented",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "VersionedConversionFailed",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 960,
            "path": [
                "Result"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 961
                },
                {
                    "name": "E",
                    "type": 959
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Ok",
                        "fields": [
                            {
                                "type": 961,
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Err",
                        "fields": [
                            {
                                "type": 959,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 961,
            "path": [
                "xcm_runtime_apis",
                "dry_run",
                "XcmDryRunEffects"
            ],
            "params": [
                {
                    "name": "Event",
                    "type": 21
                }
            ],
            "def": {
                "tag": "composite",
                "value": [
                    {
                        "name": "execution_result",
                        "type": 493,
                        "typeName": "Outcome",
                        "docs": []
                    },
                    {
                        "name": "emitted_events",
                        "type": 954,
                        "typeName": "Vec<Event>",
                        "docs": []
                    },
                    {
                        "name": "forwarded_xcms",
                        "type": 956,
                        "typeName": "Vec<(VersionedLocation, Vec<VersionedXcm<()>>)>",
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 962,
            "path": [
                "Result"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 0
                },
                {
                    "name": "E",
                    "type": 963
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Ok",
                        "fields": [
                            {
                                "type": 0,
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Err",
                        "fields": [
                            {
                                "type": 963,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 963,
            "path": [
                "xcm_runtime_apis",
                "conversions",
                "Error"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Unsupported",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "VersionedConversionFailed",
                        "fields": [],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 964,
            "path": [
                "Result"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 35
                },
                {
                    "name": "E",
                    "type": 500
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "Ok",
                        "fields": [
                            {
                                "type": 35,
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Err",
                        "fields": [
                            {
                                "type": 500,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 965,
            "path": [
                "Option"
            ],
            "params": [
                {
                    "name": "T",
                    "type": 500
                }
            ],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "None",
                        "fields": [],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Some",
                        "fields": [
                            {
                                "type": 500,
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    }
                ]
            },
            "docs": []
        },
        {
            "id": 966,
            "path": [],
            "params": [],
            "def": {
                "tag": "sequence",
                "value": 500
            },
            "docs": []
        },
        {
            "id": 967,
            "path": [
                "polkadot_runtime",
                "RuntimeError"
            ],
            "params": [],
            "def": {
                "tag": "variant",
                "value": [
                    {
                        "name": "System",
                        "fields": [
                            {
                                "type": 512,
                                "typeName": "frame_system::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 0,
                        "docs": []
                    },
                    {
                        "name": "Scheduler",
                        "fields": [
                            {
                                "type": 518,
                                "typeName": "pallet_scheduler::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 1,
                        "docs": []
                    },
                    {
                        "name": "Preimage",
                        "fields": [
                            {
                                "type": 527,
                                "typeName": "pallet_preimage::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 10,
                        "docs": []
                    },
                    {
                        "name": "Babe",
                        "fields": [
                            {
                                "type": 543,
                                "typeName": "pallet_babe::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 2,
                        "docs": []
                    },
                    {
                        "name": "Indices",
                        "fields": [
                            {
                                "type": 545,
                                "typeName": "pallet_indices::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 4,
                        "docs": []
                    },
                    {
                        "name": "Balances",
                        "fields": [
                            {
                                "type": 564,
                                "typeName": "pallet_balances::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 5,
                        "docs": []
                    },
                    {
                        "name": "Staking",
                        "fields": [
                            {
                                "type": 588,
                                "typeName": "pallet_staking::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 7,
                        "docs": []
                    },
                    {
                        "name": "Session",
                        "fields": [
                            {
                                "type": 596,
                                "typeName": "pallet_session::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 9,
                        "docs": []
                    },
                    {
                        "name": "Grandpa",
                        "fields": [
                            {
                                "type": 600,
                                "typeName": "pallet_grandpa::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 11,
                        "docs": []
                    },
                    {
                        "name": "Treasury",
                        "fields": [
                            {
                                "type": 609,
                                "typeName": "pallet_treasury::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 19,
                        "docs": []
                    },
                    {
                        "name": "ConvictionVoting",
                        "fields": [
                            {
                                "type": 622,
                                "typeName": "pallet_conviction_voting::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 20,
                        "docs": []
                    },
                    {
                        "name": "Referenda",
                        "fields": [
                            {
                                "type": 640,
                                "typeName": "pallet_referenda::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 21,
                        "docs": []
                    },
                    {
                        "name": "Whitelist",
                        "fields": [
                            {
                                "type": 641,
                                "typeName": "pallet_whitelist::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 23,
                        "docs": []
                    },
                    {
                        "name": "Claims",
                        "fields": [
                            {
                                "type": 642,
                                "typeName": "claims::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 24,
                        "docs": []
                    },
                    {
                        "name": "Vesting",
                        "fields": [
                            {
                                "type": 646,
                                "typeName": "pallet_vesting::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 25,
                        "docs": []
                    },
                    {
                        "name": "Utility",
                        "fields": [
                            {
                                "type": 647,
                                "typeName": "pallet_utility::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 26,
                        "docs": []
                    },
                    {
                        "name": "Proxy",
                        "fields": [
                            {
                                "type": 656,
                                "typeName": "pallet_proxy::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 29,
                        "docs": []
                    },
                    {
                        "name": "Multisig",
                        "fields": [
                            {
                                "type": 660,
                                "typeName": "pallet_multisig::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 30,
                        "docs": []
                    },
                    {
                        "name": "Bounties",
                        "fields": [
                            {
                                "type": 664,
                                "typeName": "pallet_bounties::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 34,
                        "docs": []
                    },
                    {
                        "name": "ChildBounties",
                        "fields": [
                            {
                                "type": 667,
                                "typeName": "pallet_child_bounties::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 38,
                        "docs": []
                    },
                    {
                        "name": "ElectionProviderMultiPhase",
                        "fields": [
                            {
                                "type": 677,
                                "typeName": "pallet_election_provider_multi_phase::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 36,
                        "docs": []
                    },
                    {
                        "name": "VoterList",
                        "fields": [
                            {
                                "type": 681,
                                "typeName": "pallet_bags_list::Error<Runtime, pallet_bags_list::Instance1>",
                                "docs": []
                            }
                        ],
                        "index": 37,
                        "docs": []
                    },
                    {
                        "name": "NominationPools",
                        "fields": [
                            {
                                "type": 699,
                                "typeName": "pallet_nomination_pools::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 39,
                        "docs": []
                    },
                    {
                        "name": "FastUnstake",
                        "fields": [
                            {
                                "type": 704,
                                "typeName": "pallet_fast_unstake::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 40,
                        "docs": []
                    },
                    {
                        "name": "Configuration",
                        "fields": [
                            {
                                "type": 708,
                                "typeName": "parachains_configuration::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 51,
                        "docs": []
                    },
                    {
                        "name": "ParaInclusion",
                        "fields": [
                            {
                                "type": 716,
                                "typeName": "parachains_inclusion::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 53,
                        "docs": []
                    },
                    {
                        "name": "ParaInherent",
                        "fields": [
                            {
                                "type": 722,
                                "typeName": "parachains_paras_inherent::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 54,
                        "docs": []
                    },
                    {
                        "name": "Paras",
                        "fields": [
                            {
                                "type": 747,
                                "typeName": "parachains_paras::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 56,
                        "docs": []
                    },
                    {
                        "name": "Hrmp",
                        "fields": [
                            {
                                "type": 759,
                                "typeName": "parachains_hrmp::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 60,
                        "docs": []
                    },
                    {
                        "name": "ParasDisputes",
                        "fields": [
                            {
                                "type": 767,
                                "typeName": "parachains_disputes::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 62,
                        "docs": []
                    },
                    {
                        "name": "ParasSlashing",
                        "fields": [
                            {
                                "type": 772,
                                "typeName": "parachains_slashing::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 63,
                        "docs": []
                    },
                    {
                        "name": "OnDemand",
                        "fields": [
                            {
                                "type": 784,
                                "typeName": "parachains_assigner_on_demand::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 64,
                        "docs": []
                    },
                    {
                        "name": "CoretimeAssignmentProvider",
                        "fields": [
                            {
                                "type": 795,
                                "typeName": "parachains_assigner_coretime::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 65,
                        "docs": []
                    },
                    {
                        "name": "Registrar",
                        "fields": [
                            {
                                "type": 797,
                                "typeName": "paras_registrar::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 70,
                        "docs": []
                    },
                    {
                        "name": "Slots",
                        "fields": [
                            {
                                "type": 799,
                                "typeName": "slots::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 71,
                        "docs": []
                    },
                    {
                        "name": "Auctions",
                        "fields": [
                            {
                                "type": 804,
                                "typeName": "auctions::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 72,
                        "docs": []
                    },
                    {
                        "name": "Crowdloan",
                        "fields": [
                            {
                                "type": 807,
                                "typeName": "crowdloan::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 73,
                        "docs": []
                    },
                    {
                        "name": "Coretime",
                        "fields": [
                            {
                                "type": 808,
                                "typeName": "coretime::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 74,
                        "docs": []
                    },
                    {
                        "name": "StateTrieMigration",
                        "fields": [
                            {
                                "type": 491,
                                "typeName": "pallet_state_trie_migration::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 98,
                        "docs": []
                    },
                    {
                        "name": "XcmPallet",
                        "fields": [
                            {
                                "type": 829,
                                "typeName": "pallet_xcm::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 99,
                        "docs": []
                    },
                    {
                        "name": "MessageQueue",
                        "fields": [
                            {
                                "type": 836,
                                "typeName": "pallet_message_queue::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 100,
                        "docs": []
                    },
                    {
                        "name": "AssetRate",
                        "fields": [
                            {
                                "type": 837,
                                "typeName": "pallet_asset_rate::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 101,
                        "docs": []
                    },
                    {
                        "name": "Beefy",
                        "fields": [
                            {
                                "type": 840,
                                "typeName": "pallet_beefy::Error<Runtime>",
                                "docs": []
                            }
                        ],
                        "index": 200,
                        "docs": []
                    }
                ]
            },
            "docs": []
        }
    ],
    "pallets": [
        {
            "name": "System",
            "storage": {
                "prefix": "System",
                "items": [
                    {
                        "name": "Account",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 3
                            }
                        },
                        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080",
                        "docs": [
                            " The full account information for a particular account ID."
                        ]
                    },
                    {
                        "name": "ExtrinsicCount",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Total extrinsics count for the current block."
                        ]
                    },
                    {
                        "name": "InherentsApplied",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 8
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Whether all inherents have been applied."
                        ]
                    },
                    {
                        "name": "BlockWeight",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 9
                        },
                        "fallback": "0x000000000000",
                        "docs": [
                            " The current weight for the block."
                        ]
                    },
                    {
                        "name": "AllExtrinsicsLen",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Total length (in bytes) for all extrinsics put together, for the current block."
                        ]
                    },
                    {
                        "name": "BlockHash",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 13
                            }
                        },
                        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                        "docs": [
                            " Map of block numbers to block hashes."
                        ]
                    },
                    {
                        "name": "ExtrinsicData",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 14
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                        ]
                    },
                    {
                        "name": "Number",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " The current block number being processed. Set by `execute_block`."
                        ]
                    },
                    {
                        "name": "ParentHash",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 13
                        },
                        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                        "docs": [
                            " Hash of the previous block."
                        ]
                    },
                    {
                        "name": "Digest",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 15
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Digest of the current block, also part of the block header."
                        ]
                    },
                    {
                        "name": "Events",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 19
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Events deposited for the current block.",
                            "",
                            " NOTE: The item is unbound and should therefore never be read on chain.",
                            " It could otherwise inflate the PoV size of a block.",
                            "",
                            " Events have a large in-memory size. Box the events to not go out-of-memory",
                            " just in case someone still reads them from within the runtime."
                        ]
                    },
                    {
                        "name": "EventCount",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " The number of events in the `Events<T>` list."
                        ]
                    },
                    {
                        "name": "EventTopics",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 13,
                                "value": 498
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                            " of events in the `<Events<T>>` list.",
                            "",
                            " All topic vectors have deterministic storage locations depending on the topic. This",
                            " allows light-clients to leverage the changes trie storage tracking mechanism and",
                            " in case of changes fetch the list of events of interest.",
                            "",
                            " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just",
                            " the `EventIndex` then in case if the topic has the same contents on the next block",
                            " no notification will be triggered thus the event might be lost."
                        ]
                    },
                    {
                        "name": "LastRuntimeUpgrade",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 499
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                        ]
                    },
                    {
                        "name": "UpgradedToU32RefCount",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 8
                        },
                        "fallback": "0x00",
                        "docs": [
                            " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                        ]
                    },
                    {
                        "name": "UpgradedToTripleRefCount",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 8
                        },
                        "fallback": "0x00",
                        "docs": [
                            " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                            " (default) if not."
                        ]
                    },
                    {
                        "name": "ExecutionPhase",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 497
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The execution phase of the block."
                        ]
                    },
                    {
                        "name": "AuthorizedUpgrade",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 501
                        },
                        "fallback": "0x00",
                        "docs": [
                            " `Some` if a code upgrade has been authorized."
                        ]
                    }
                ]
            },
            "calls": 94,
            "events": 22,
            "constants": [
                {
                    "name": "BlockWeights",
                    "type": 502,
                    "value": "0x07b0bde93603000b00204aa9d10113ffffffffffffffff222d0d1e00010bb8845c8f580113a3703d0ad7a370bd010b0098f73e5d0113ffffffffffffffbf010000222d0d1e00010bb80caff9cc0113a3703d0ad7a370fd010b00204aa9d10113ffffffffffffffff01070088526a74130000000000000040222d0d1e00000000",
                    "docs": [
                        " Block & extrinsics weights: base values and limits."
                    ]
                },
                {
                    "name": "BlockLength",
                    "type": 505,
                    "value": "0x00003c000000500000005000",
                    "docs": [
                        " The maximum length of a block (in bytes)."
                    ]
                },
                {
                    "name": "BlockHashCount",
                    "type": 4,
                    "value": "0x00100000",
                    "docs": [
                        " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
                    ]
                },
                {
                    "name": "DbWeight",
                    "type": 507,
                    "value": "0x38ca38010000000098aaf90400000000",
                    "docs": [
                        " The weight of runtime database operations the runtime can invoke."
                    ]
                },
                {
                    "name": "Version",
                    "type": 508,
                    "value": "0x20706f6c6b61646f743c7061726974792d706f6c6b61646f7400000000fb4d0f00000000005cc51ff1fa3f5d0cca01000000df6acb689907609b0500000037e397fc7c91f5e40200000040fe3ad401f8959a0600000017a6bc0d0062aeb30100000018ef58a3b67ba77001000000d2bc9897eed08f1503000000f78b278be53f454c02000000af2c0297a23e6d3d0b00000049eaaf1b548a0cb00300000091d5df18b0d2cf58020000002a5e924655399e6001000000ed99c5acb25eedf503000000cbca25e39f14238702000000687ad44ad37f03c201000000ab3c0572291feb8b01000000bc9d89904f5b923f0100000037c8bb1350a9a2a804000000f3ff14d5ab527059030000006ff52ee858e6c5bd0100000091b1c8b16328eb92010000009ffb505aa738d69c01000000fbc577b9d747efd6010000001a00000001",
                    "docs": [
                        " Get the chain's in-code version."
                    ]
                },
                {
                    "name": "SS58Prefix",
                    "type": 91,
                    "value": "0x0000",
                    "docs": [
                        " The designated SS58 prefix of this chain.",
                        "",
                        " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                        " that the runtime should know about the prefix in order to make use of it as",
                        " an identifier of the chain."
                    ]
                }
            ],
            "errors": 512,
            "index": 0,
            "docs": []
        },
        {
            "name": "Scheduler",
            "storage": {
                "prefix": "Scheduler",
                "items": [
                    {
                        "name": "IncompleteSince",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00",
                        "docs": []
                    },
                    {
                        "name": "Agenda",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 513
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Items to be executed, indexed by the block number that they should be executed on."
                        ]
                    },
                    {
                        "name": "Retries",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 32,
                                "value": 517
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Retry configurations for items to be executed, indexed by task address."
                        ]
                    },
                    {
                        "name": "Lookup",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 1,
                                "value": 32
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Lookup from a name to the block number and index of the task.",
                            "",
                            " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
                            " identities."
                        ]
                    }
                ]
            },
            "calls": 98,
            "events": 31,
            "constants": [
                {
                    "name": "MaximumWeight",
                    "type": 10,
                    "value": "0x0b00806e87740113cccccccccccccccc",
                    "docs": [
                        " The maximum weight that may be scheduled per block for any dispatchables."
                    ]
                },
                {
                    "name": "MaxScheduledPerBlock",
                    "type": 4,
                    "value": "0x32000000",
                    "docs": [
                        " The maximum number of scheduled calls in the queue for a single block.",
                        "",
                        " NOTE:",
                        " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a",
                        " higher limit under `runtime-benchmarks` feature."
                    ]
                }
            ],
            "errors": 518,
            "index": 1,
            "docs": []
        },
        {
            "name": "Preimage",
            "storage": {
                "prefix": "Preimage",
                "items": [
                    {
                        "name": "StatusFor",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Identity"
                                    }
                                ],
                                "key": 13,
                                "value": 519
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The request status of a given hash."
                        ]
                    },
                    {
                        "name": "RequestStatusFor",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Identity"
                                    }
                                ],
                                "key": 13,
                                "value": 521
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The request status of a given hash."
                        ]
                    },
                    {
                        "name": "PreimageFor",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Identity"
                                    }
                                ],
                                "key": 525,
                                "value": 526
                            }
                        },
                        "fallback": "0x00",
                        "docs": []
                    }
                ]
            },
            "calls": 100,
            "events": 36,
            "constants": [],
            "errors": 527,
            "index": 10,
            "docs": []
        },
        {
            "name": "Babe",
            "storage": {
                "prefix": "Babe",
                "items": [
                    {
                        "name": "EpochIndex",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 12
                        },
                        "fallback": "0x0000000000000000",
                        "docs": [
                            " Current epoch index."
                        ]
                    },
                    {
                        "name": "Authorities",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 528
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Current epoch authorities."
                        ]
                    },
                    {
                        "name": "GenesisSlot",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 106
                        },
                        "fallback": "0x0000000000000000",
                        "docs": [
                            " The slot at which the first epoch actually started. This is 0",
                            " until the first block of the chain."
                        ]
                    },
                    {
                        "name": "CurrentSlot",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 106
                        },
                        "fallback": "0x0000000000000000",
                        "docs": [
                            " Current slot number."
                        ]
                    },
                    {
                        "name": "Randomness",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 1
                        },
                        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                        "docs": [
                            " The epoch randomness for the *current* epoch.",
                            "",
                            " # Security",
                            "",
                            " This MUST NOT be used for gambling, as it can be influenced by a",
                            " malicious validator in the short term. It MAY be used in many",
                            " cryptographic protocols, however, so long as one remembers that this",
                            " (like everything else on-chain) it is public. For example, it can be",
                            " used where a number is needed that cannot have been chosen by an",
                            " adversary, for purposes such as public-coin zero-knowledge proofs."
                        ]
                    },
                    {
                        "name": "PendingEpochConfigChange",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 108
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Pending epoch configuration change that will be applied when the next epoch is enacted."
                        ]
                    },
                    {
                        "name": "NextRandomness",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 1
                        },
                        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                        "docs": [
                            " Next epoch randomness."
                        ]
                    },
                    {
                        "name": "NextAuthorities",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 528
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Next epoch authorities."
                        ]
                    },
                    {
                        "name": "SegmentIndex",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " Randomness under construction.",
                            "",
                            " We make a trade-off between storage accesses and list length.",
                            " We store the under-construction randomness in segments of up to",
                            " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                            "",
                            " Once a segment reaches this length, we begin the next one.",
                            " We reset all segments and return to `0` at the beginning of every",
                            " epoch."
                        ]
                    },
                    {
                        "name": "UnderConstruction",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 531
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."
                        ]
                    },
                    {
                        "name": "Initialized",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 533
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Temporary value (cleared at block finalization) which is `Some`",
                            " if per-block initialization has already been called for current block."
                        ]
                    },
                    {
                        "name": "AuthorVrfRandomness",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 33
                        },
                        "fallback": "0x00",
                        "docs": [
                            " This field should always be populated during block processing unless",
                            " secondary plain slots are enabled (which don't contain a VRF output).",
                            "",
                            " It is set in `on_finalize`, before it will contain the value from the last block."
                        ]
                    },
                    {
                        "name": "EpochStart",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 32
                        },
                        "fallback": "0x0000000000000000",
                        "docs": [
                            " The block numbers when the last and current epoch have started, respectively `N-1` and",
                            " `N`.",
                            " NOTE: We track this is in order to annotate the block number when a given pool of",
                            " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in",
                            " slots, which may be skipped, the block numbers may not line up with the slot numbers."
                        ]
                    },
                    {
                        "name": "Lateness",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " How late the current block is compared to its parent.",
                            "",
                            " This entry is populated as part of block execution and is cleaned up",
                            " on block finalization. Querying this storage entry outside of block",
                            " execution context should always yield zero."
                        ]
                    },
                    {
                        "name": "EpochConfig",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 539
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The configuration for the current epoch. Should never be `None` as it is initialized in",
                            " genesis."
                        ]
                    },
                    {
                        "name": "NextEpochConfig",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 539
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The configuration for the next epoch, `None` if the config will not change",
                            " (you can fallback to `EpochConfig` instead in that case)."
                        ]
                    },
                    {
                        "name": "SkippedEpochs",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 540
                        },
                        "fallback": "0x00",
                        "docs": [
                            " A list of the last 100 skipped epochs and the corresponding session index",
                            " when the epoch was skipped.",
                            "",
                            " This is only used for validating equivocation proofs. An equivocation proof",
                            " must contains a key-ownership proof for a given session, therefore we need a",
                            " way to tie together sessions and epoch indices, i.e. we need to validate that",
                            " a validator was the owner of a given key on a given session, and what the",
                            " active epoch index was during that session."
                        ]
                    }
                ]
            },
            "calls": 102,
            "constants": [
                {
                    "name": "EpochDuration",
                    "type": 12,
                    "value": "0x6009000000000000",
                    "docs": [
                        " The amount of time, in slots, that each epoch should last.",
                        " NOTE: Currently it is not possible to change the epoch duration after",
                        " the chain has started. Attempting to do so will brick block production."
                    ]
                },
                {
                    "name": "ExpectedBlockTime",
                    "type": 12,
                    "value": "0x7017000000000000",
                    "docs": [
                        " The expected average block time at which BABE should be creating",
                        " blocks. Since BABE is probabilistic it is not trivial to figure out",
                        " what the expected average block time should be based on the slot",
                        " duration and the security parameter `c` (where `1 - c` represents",
                        " the probability of a slot being empty)."
                    ]
                },
                {
                    "name": "MaxAuthorities",
                    "type": 4,
                    "value": "0xa0860100",
                    "docs": [
                        " Max number of authorities allowed"
                    ]
                },
                {
                    "name": "MaxNominators",
                    "type": 4,
                    "value": "0x00020000",
                    "docs": [
                        " The maximum number of nominators for each validator."
                    ]
                }
            ],
            "errors": 543,
            "index": 2,
            "docs": []
        },
        {
            "name": "Timestamp",
            "storage": {
                "prefix": "Timestamp",
                "items": [
                    {
                        "name": "Now",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 12
                        },
                        "fallback": "0x0000000000000000",
                        "docs": [
                            " The current time for the current block."
                        ]
                    },
                    {
                        "name": "DidUpdate",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 8
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Whether the timestamp has been updated in this block.",
                            "",
                            " This value is updated to `true` upon successful submission of a timestamp by a node.",
                            " It is then checked at the end of each block execution in the `on_finalize` hook."
                        ]
                    }
                ]
            },
            "calls": 111,
            "constants": [
                {
                    "name": "MinimumPeriod",
                    "type": 12,
                    "value": "0xb80b000000000000",
                    "docs": [
                        " The minimum period between blocks.",
                        "",
                        " Be aware that this is different to the *expected* period that the block production",
                        " apparatus provides. Your chosen consensus system will generally work with this to",
                        " determine a sensible block time. For example, in the Aura pallet it will be double this",
                        " period on default settings."
                    ]
                }
            ],
            "index": 3,
            "docs": []
        },
        {
            "name": "Indices",
            "storage": {
                "prefix": "Indices",
                "items": [
                    {
                        "name": "Accounts",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 544
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The lookup from index to account."
                        ]
                    }
                ]
            },
            "calls": 112,
            "events": 37,
            "constants": [
                {
                    "name": "Deposit",
                    "type": 6,
                    "value": "0x00e87648170000000000000000000000",
                    "docs": [
                        " The deposit needed for reserving an index."
                    ]
                }
            ],
            "errors": 545,
            "index": 4,
            "docs": []
        },
        {
            "name": "Balances",
            "storage": {
                "prefix": "Balances",
                "items": [
                    {
                        "name": "TotalIssuance",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 6
                        },
                        "fallback": "0x00000000000000000000000000000000",
                        "docs": [
                            " The total units issued in the system."
                        ]
                    },
                    {
                        "name": "InactiveIssuance",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 6
                        },
                        "fallback": "0x00000000000000000000000000000000",
                        "docs": [
                            " The total units of outstanding deactivated balance in the system."
                        ]
                    },
                    {
                        "name": "Account",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 5
                            }
                        },
                        "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080",
                        "docs": [
                            " The Balances pallet example of storing the balance of an account.",
                            "",
                            " # Example",
                            "",
                            " ```nocompile",
                            "  impl pallet_balances::Config for Runtime {",
                            "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                            "  }",
                            " ```",
                            "",
                            " You can also store the balance of an account in the `System` pallet.",
                            "",
                            " # Example",
                            "",
                            " ```nocompile",
                            "  impl pallet_balances::Config for Runtime {",
                            "   type AccountStore = System",
                            "  }",
                            " ```",
                            "",
                            " But this comes with tradeoffs, storing account balances in the system pallet stores",
                            " `frame_system` data alongside the account data contrary to storing account balances in the",
                            " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                            " NOTE: This is only used in the case that this pallet is used to store balances."
                        ]
                    },
                    {
                        "name": "Locks",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 546
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Any liquidity locks on some account balances.",
                            " NOTE: Should only be accessed when setting, changing and freeing a lock.",
                            "",
                            " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
                        ]
                    },
                    {
                        "name": "Reserves",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 550
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Named reserves on some account balances.",
                            "",
                            " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
                        ]
                    },
                    {
                        "name": "Holds",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 553
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Holds on account balances."
                        ]
                    },
                    {
                        "name": "Freezes",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 559
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Freeze locks on account balances."
                        ]
                    }
                ]
            },
            "calls": 115,
            "events": 38,
            "constants": [
                {
                    "name": "ExistentialDeposit",
                    "type": 6,
                    "value": "0x00e40b54020000000000000000000000",
                    "docs": [
                        " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
                        "",
                        " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
                        " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
                        " In case you have multiple sources of provider references, you may also get unexpected",
                        " behaviour if you set this to zero.",
                        "",
                        " Bottom line: Do yourself a favour and make it at least one!"
                    ]
                },
                {
                    "name": "MaxLocks",
                    "type": 4,
                    "value": "0x32000000",
                    "docs": [
                        " The maximum number of locks that should exist on an account.",
                        " Not strictly enforced, but used for weight estimation.",
                        "",
                        " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
                    ]
                },
                {
                    "name": "MaxReserves",
                    "type": 4,
                    "value": "0x32000000",
                    "docs": [
                        " The maximum number of named reserves that can exist on an account.",
                        "",
                        " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
                    ]
                },
                {
                    "name": "MaxFreezes",
                    "type": 4,
                    "value": "0x08000000",
                    "docs": [
                        " The maximum number of individual freeze locks that can exist on an account at any time."
                    ]
                }
            ],
            "errors": 564,
            "index": 5,
            "docs": []
        },
        {
            "name": "TransactionPayment",
            "storage": {
                "prefix": "TransactionPayment",
                "items": [
                    {
                        "name": "NextFeeMultiplier",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 436
                        },
                        "fallback": "0x000064a7b3b6e00d0000000000000000",
                        "docs": []
                    },
                    {
                        "name": "StorageVersion",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 565
                        },
                        "fallback": "0x00",
                        "docs": []
                    }
                ]
            },
            "events": 40,
            "constants": [
                {
                    "name": "OperationalFeeMultiplier",
                    "type": 2,
                    "value": "0x05",
                    "docs": [
                        " A fee multiplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                        " `priority`",
                        "",
                        " This value is multiplied by the `final_fee` to obtain a \"virtual tip\" that is later",
                        " added to a tip component in regular `priority` calculations.",
                        " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                        " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                        "",
                        " ```rust,ignore",
                        " // For `Normal`",
                        " let priority = priority_calc(tip);",
                        "",
                        " // For `Operational`",
                        " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                        " let priority = priority_calc(tip + virtual_tip);",
                        " ```",
                        "",
                        " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                        " sent with the transaction. So, not only does the transaction get a priority bump based",
                        " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                        " transactions."
                    ]
                }
            ],
            "index": 32,
            "docs": []
        },
        {
            "name": "Authorship",
            "storage": {
                "prefix": "Authorship",
                "items": [
                    {
                        "name": "Author",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 0
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Author of current block."
                        ]
                    }
                ]
            },
            "constants": [],
            "index": 6,
            "docs": []
        },
        {
            "name": "Staking",
            "storage": {
                "prefix": "Staking",
                "items": [
                    {
                        "name": "ValidatorCount",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " The ideal number of active validators."
                        ]
                    },
                    {
                        "name": "MinimumValidatorCount",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " Minimum number of staking participants before emergency conditions are imposed."
                        ]
                    },
                    {
                        "name": "Invulnerables",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 116
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
                            " easy to initialize and the performance hit is minimal (we expect no more than four",
                            " invulnerables) and restricted to testnets."
                        ]
                    },
                    {
                        "name": "Bonded",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 0
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Map from all locked \"stash\" accounts to the controller account.",
                            "",
                            " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                        ]
                    },
                    {
                        "name": "MinNominatorBond",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 6
                        },
                        "fallback": "0x00000000000000000000000000000000",
                        "docs": [
                            " The minimum active bond to become and maintain the role of a nominator."
                        ]
                    },
                    {
                        "name": "MinValidatorBond",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 6
                        },
                        "fallback": "0x00000000000000000000000000000000",
                        "docs": [
                            " The minimum active bond to become and maintain the role of a validator."
                        ]
                    },
                    {
                        "name": "MinimumActiveStake",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 6
                        },
                        "fallback": "0x00000000000000000000000000000000",
                        "docs": [
                            " The minimum active nominator stake of the last successful election."
                        ]
                    },
                    {
                        "name": "MinCommission",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 43
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " The minimum amount of commission that validators can set.",
                            "",
                            " If set to `0`, no limit exists."
                        ]
                    },
                    {
                        "name": "Ledger",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 566
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Map from all (unlocked) \"controller\" accounts to the info regarding the staking.",
                            "",
                            " Note: All the reads and mutations to this storage *MUST* be done through the methods exposed",
                            " by [`StakingLedger`] to ensure data and lock consistency."
                        ]
                    },
                    {
                        "name": "Payee",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 42
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Where the reward payment should be made. Keyed by stash.",
                            "",
                            " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                        ]
                    },
                    {
                        "name": "Validators",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 44
                            }
                        },
                        "fallback": "0x0000",
                        "docs": [
                            " The map from (wannabe) validator stash key to the preferences of that validator.",
                            "",
                            " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                        ]
                    },
                    {
                        "name": "CounterForValidators",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            "Counter for the related counted storage map"
                        ]
                    },
                    {
                        "name": "MaxValidatorsCount",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The maximum validator count before we stop allowing new validators to join.",
                            "",
                            " When this value is not set, no limits are enforced."
                        ]
                    },
                    {
                        "name": "Nominators",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 568
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The map from nominator stash key to their nomination preferences, namely the validators that",
                            " they wish to support.",
                            "",
                            " Note that the keys of this storage map might become non-decodable in case the",
                            " account's [`NominationsQuota::MaxNominations`] configuration is decreased.",
                            " In this rare case, these nominators",
                            " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`",
                            " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable",
                            " nominators will effectively not-exist, until they re-submit their preferences such that it",
                            " is within the bounds of the newly set `Config::MaxNominations`.",
                            "",
                            " This implies that `::iter_keys().count()` and `::iter().count()` might return different",
                            " values for this map. Moreover, the main `::count()` is aligned with the former, namely the",
                            " number of keys that exist.",
                            "",
                            " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via",
                            " [`Call::chill_other`] dispatchable by anyone.",
                            "",
                            " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                        ]
                    },
                    {
                        "name": "CounterForNominators",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            "Counter for the related counted storage map"
                        ]
                    },
                    {
                        "name": "VirtualStakers",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 35
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Stakers whose funds are managed by other pallets.",
                            "",
                            " This pallet does not apply any locks on them, therefore they are only virtually bonded. They",
                            " are expected to be keyless accounts and hence should not be allowed to mutate their ledger",
                            " directly via this pallet. Instead, these accounts are managed by other pallets and accessed",
                            " via low level apis. We keep track of them to do minimal integrity checks."
                        ]
                    },
                    {
                        "name": "CounterForVirtualStakers",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            "Counter for the related counted storage map"
                        ]
                    },
                    {
                        "name": "MaxNominatorsCount",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The maximum nominator count before we stop allowing new validators to join.",
                            "",
                            " When this value is not set, no limits are enforced."
                        ]
                    },
                    {
                        "name": "CurrentEra",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The current era index.",
                            "",
                            " This is the latest planned era, depending on how the Session pallet queues the validator",
                            " set, it might be active or not."
                        ]
                    },
                    {
                        "name": "ActiveEra",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 570
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The active era information, it holds index and start.",
                            "",
                            " The active era is the era being currently rewarded. Validator set of this era must be",
                            " equal to [`SessionInterface::validators`]."
                        ]
                    },
                    {
                        "name": "ErasStartSessionIndex",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 4
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The session index at which the era start for the last [`Config::HistoryDepth`] eras.",
                            "",
                            " Note: This tracks the starting session (i.e. session index when era start being active)",
                            " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."
                        ]
                    },
                    {
                        "name": "ErasStakers",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    },
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 572,
                                "value": 573
                            }
                        },
                        "fallback": "0x000000",
                        "docs": [
                            " Exposure of validator at era.",
                            "",
                            " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                            "",
                            " Is it removed after [`Config::HistoryDepth`] eras.",
                            " If stakers hasn't been set or has been removed then empty exposure is returned.",
                            "",
                            " Note: Deprecated since v14. Use `EraInfo` instead to work with exposures."
                        ]
                    },
                    {
                        "name": "ErasStakersOverview",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    },
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 572,
                                "value": 576
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Summary of validator exposure at a given era.",
                            "",
                            " This contains the total stake in support of the validator and their own stake. In addition,",
                            " it can also be used to get the number of nominators backing this validator and the number of",
                            " exposure pages they are divided into. The page count is useful to determine the number of",
                            " pages of rewards that needs to be claimed.",
                            "",
                            " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                            " Should only be accessed through `EraInfo`.",
                            "",
                            " Is it removed after [`Config::HistoryDepth`] eras.",
                            " If stakers hasn't been set or has been removed then empty overview is returned."
                        ]
                    },
                    {
                        "name": "ErasStakersClipped",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    },
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 572,
                                "value": 573
                            }
                        },
                        "fallback": "0x000000",
                        "docs": [
                            " Clipped Exposure of validator at era.",
                            "",
                            " Note: This is deprecated, should be used as read-only and will be removed in the future.",
                            " New `Exposure`s are stored in a paged manner in `ErasStakersPaged` instead.",
                            "",
                            " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
                            " `T::MaxExposurePageSize` biggest stakers.",
                            " (Note: the field `total` and `own` of the exposure remains unchanged).",
                            " This is used to limit the i/o cost for the nominator payout.",
                            "",
                            " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
                            "",
                            " It is removed after [`Config::HistoryDepth`] eras.",
                            " If stakers hasn't been set or has been removed then empty exposure is returned.",
                            "",
                            " Note: Deprecated since v14. Use `EraInfo` instead to work with exposures."
                        ]
                    },
                    {
                        "name": "ErasStakersPaged",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    },
                                    {
                                        "tag": "Twox64Concat"
                                    },
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 577,
                                "value": 578
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Paginated exposure of a validator at given era.",
                            "",
                            " This is keyed first by the era index to allow bulk deletion, then stash account and finally",
                            " the page. Should only be accessed through `EraInfo`.",
                            "",
                            " This is cleared after [`Config::HistoryDepth`] eras."
                        ]
                    },
                    {
                        "name": "ClaimedRewards",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    },
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 572,
                                "value": 121
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " History of claimed paged rewards by era and validator.",
                            "",
                            " This is keyed by era and validator stash which maps to the set of page indexes which have",
                            " been claimed.",
                            "",
                            " It is removed after [`Config::HistoryDepth`] eras."
                        ]
                    },
                    {
                        "name": "ErasValidatorPrefs",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    },
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 572,
                                "value": 44
                            }
                        },
                        "fallback": "0x0000",
                        "docs": [
                            " Similar to `ErasStakers`, this holds the preferences of validators.",
                            "",
                            " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                            "",
                            " Is it removed after [`Config::HistoryDepth`] eras."
                        ]
                    },
                    {
                        "name": "ErasValidatorReward",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 6
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The total validator era payout for the last [`Config::HistoryDepth`] eras.",
                            "",
                            " Eras that haven't finished yet or has been removed doesn't have reward."
                        ]
                    },
                    {
                        "name": "ErasRewardPoints",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 579
                            }
                        },
                        "fallback": "0x0000000000",
                        "docs": [
                            " Rewards for the last [`Config::HistoryDepth`] eras.",
                            " If reward hasn't been set or has been removed then 0 reward is returned."
                        ]
                    },
                    {
                        "name": "ErasTotalStake",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 6
                            }
                        },
                        "fallback": "0x00000000000000000000000000000000",
                        "docs": [
                            " The total amount staked for the last [`Config::HistoryDepth`] eras.",
                            " If total hasn't been set or has been removed then 0 stake is returned."
                        ]
                    },
                    {
                        "name": "ForceEra",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 46
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Mode of era forcing."
                        ]
                    },
                    {
                        "name": "MaxStakedRewards",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 120
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Maximum staked rewards, i.e. the percentage of the era inflation that",
                            " is used for stake rewards.",
                            " See [Era payout](./index.html#era-payout)."
                        ]
                    },
                    {
                        "name": "SlashRewardFraction",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 43
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " The percentage of the slash that is distributed to reporters.",
                            "",
                            " The rest of the slashed value is handled by the `Slash`."
                        ]
                    },
                    {
                        "name": "CanceledSlashPayout",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 6
                        },
                        "fallback": "0x00000000000000000000000000000000",
                        "docs": [
                            " The amount of currency given to reporters of a slash event which was",
                            " canceled by extraordinary circumstances (e.g. governance)."
                        ]
                    },
                    {
                        "name": "UnappliedSlashes",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 583
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " All unapplied slashes that are queued for later."
                        ]
                    },
                    {
                        "name": "BondedEras",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 498
                        },
                        "fallback": "0x00",
                        "docs": [
                            " A mapping from still-bonded eras to the first session index of that era.",
                            "",
                            " Must contains information for eras for the range:",
                            " `[active_era - bounding_duration; active_era]`"
                        ]
                    },
                    {
                        "name": "ValidatorSlashInEra",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    },
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 572,
                                "value": 585
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " All slashing events on validators, mapped by era to the highest slash proportion",
                            " and slash value of the era."
                        ]
                    },
                    {
                        "name": "NominatorSlashInEra",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    },
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 572,
                                "value": 6
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " All slashing events on nominators, mapped by era to the highest slash value of the era."
                        ]
                    },
                    {
                        "name": "SlashingSpans",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 586
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Slashing spans for stash accounts."
                        ]
                    },
                    {
                        "name": "SpanSlash",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 582,
                                "value": 587
                            }
                        },
                        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                        "docs": [
                            " Records information about the maximum slash of a stash within a slashing span,",
                            " as well as how much reward has been paid out."
                        ]
                    },
                    {
                        "name": "CurrentPlannedSession",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " The last planned session scheduled by the session pallet.",
                            "",
                            " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."
                        ]
                    },
                    {
                        "name": "DisabledValidators",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 121
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Indices of validators that have offended in the active era. The offenders are disabled for a",
                            " whole era. For this reason they are kept here - only staking pallet knows about eras. The",
                            " implementor of [`DisablingStrategy`] defines if a validator should be disabled which",
                            " implicitly means that the implementor also controls the max number of disabled validators.",
                            "",
                            " The vec is always kept sorted so that we can find whether a given validator has previously",
                            " offended using binary search."
                        ]
                    },
                    {
                        "name": "ChillThreshold",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 120
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The threshold for when users can start calling `chill_other` for other validators /",
                            " nominators. The threshold is compared to the actual number of validators / nominators",
                            " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."
                        ]
                    }
                ]
            },
            "calls": 118,
            "events": 41,
            "constants": [
                {
                    "name": "HistoryDepth",
                    "type": 4,
                    "value": "0x54000000",
                    "docs": [
                        " Number of eras to keep in history.",
                        "",
                        " Following information is kept for eras in `[current_era -",
                        " HistoryDepth, current_era]`: `ErasStakers`, `ErasStakersClipped`,",
                        " `ErasValidatorPrefs`, `ErasValidatorReward`, `ErasRewardPoints`,",
                        " `ErasTotalStake`, `ErasStartSessionIndex`, `ClaimedRewards`, `ErasStakersPaged`,",
                        " `ErasStakersOverview`.",
                        "",
                        " Must be more than the number of eras delayed by session.",
                        " I.e. active era must always be in history. I.e. `active_era >",
                        " current_era - history_depth` must be guaranteed.",
                        "",
                        " If migrating an existing pallet from storage value to config value,",
                        " this should be set to same value or greater as in storage.",
                        "",
                        " Note: `HistoryDepth` is used as the upper bound for the `BoundedVec`",
                        " item `StakingLedger.legacy_claimed_rewards`. Setting this value lower than",
                        " the existing value can lead to inconsistencies in the",
                        " `StakingLedger` and will need to be handled properly in a migration.",
                        " The test `reducing_history_depth_abrupt` shows this effect."
                    ]
                },
                {
                    "name": "SessionsPerEra",
                    "type": 4,
                    "value": "0x06000000",
                    "docs": [
                        " Number of sessions per era."
                    ]
                },
                {
                    "name": "BondingDuration",
                    "type": 4,
                    "value": "0x1c000000",
                    "docs": [
                        " Number of eras that staked funds must remain bonded for."
                    ]
                },
                {
                    "name": "SlashDeferDuration",
                    "type": 4,
                    "value": "0x1b000000",
                    "docs": [
                        " Number of eras that slashes are deferred by, after computation.",
                        "",
                        " This should be less than the bonding duration. Set to 0 if slashes",
                        " should be applied immediately, without opportunity for intervention."
                    ]
                },
                {
                    "name": "MaxExposurePageSize",
                    "type": 4,
                    "value": "0x00020000",
                    "docs": [
                        " The maximum size of each `T::ExposurePage`.",
                        "",
                        " An `ExposurePage` is weakly bounded to a maximum of `MaxExposurePageSize`",
                        " nominators.",
                        "",
                        " For older non-paged exposure, a reward payout was restricted to the top",
                        " `MaxExposurePageSize` nominators. This is to limit the i/o cost for the",
                        " nominator payout.",
                        "",
                        " Note: `MaxExposurePageSize` is used to bound `ClaimedRewards` and is unsafe to reduce",
                        " without handling it in a migration."
                    ]
                },
                {
                    "name": "MaxUnlockingChunks",
                    "type": 4,
                    "value": "0x20000000",
                    "docs": [
                        " The maximum number of `unlocking` chunks a [`StakingLedger`] can",
                        " have. Effectively determines how many unique eras a staker may be",
                        " unbonding in.",
                        "",
                        " Note: `MaxUnlockingChunks` is used as the upper bound for the",
                        " `BoundedVec` item `StakingLedger.unlocking`. Setting this value",
                        " lower than the existing value can lead to inconsistencies in the",
                        " `StakingLedger` and will need to be handled properly in a runtime",
                        " migration. The test `reducing_max_unlocking_chunks_abrupt` shows",
                        " this effect."
                    ]
                }
            ],
            "errors": 588,
            "index": 7,
            "docs": []
        },
        {
            "name": "Offences",
            "storage": {
                "prefix": "Offences",
                "items": [
                    {
                        "name": "Reports",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 13,
                                "value": 589
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The primary structure that holds all offence records keyed by report identifiers."
                        ]
                    },
                    {
                        "name": "ConcurrentReportsIndex",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    },
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 591,
                                "value": 101
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " A vector of reports of the same kind that happened at the same time slot."
                        ]
                    }
                ]
            },
            "events": 47,
            "constants": [],
            "index": 8,
            "docs": []
        },
        {
            "name": "Historical",
            "storage": {
                "prefix": "Historical",
                "items": [
                    {
                        "name": "HistoricalSessions",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 525
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Mapping from historical session indices to session-data root hash and validator count."
                        ]
                    },
                    {
                        "name": "StoredRange",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 32
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The range of historical sessions we store. [first, last)"
                        ]
                    }
                ]
            },
            "constants": [],
            "index": 33,
            "docs": []
        },
        {
            "name": "Session",
            "storage": {
                "prefix": "Session",
                "items": [
                    {
                        "name": "Validators",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 116
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The current set of validators."
                        ]
                    },
                    {
                        "name": "CurrentIndex",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " Current index of the session."
                        ]
                    },
                    {
                        "name": "QueuedChanged",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 8
                        },
                        "fallback": "0x00",
                        "docs": [
                            " True if the underlying economic identities or weighting behind the validators",
                            " has changed in the queued validator set."
                        ]
                    },
                    {
                        "name": "QueuedKeys",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 592
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The queued keys for the next session. When the next session begins, these keys",
                            " will be used to determine the validator's session keys."
                        ]
                    },
                    {
                        "name": "DisabledValidators",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 121
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Indices of disabled validators.",
                            "",
                            " The vec is always kept sorted so that we can find whether a given validator is",
                            " disabled using binary search. It gets cleared when `on_session_ending` returns",
                            " a new set of identities."
                        ]
                    },
                    {
                        "name": "NextKeys",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 134
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The next session keys for a validator."
                        ]
                    },
                    {
                        "name": "KeyOwner",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 594,
                                "value": 0
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                        ]
                    }
                ]
            },
            "calls": 133,
            "events": 49,
            "constants": [],
            "errors": 596,
            "index": 9,
            "docs": []
        },
        {
            "name": "Grandpa",
            "storage": {
                "prefix": "Grandpa",
                "items": [
                    {
                        "name": "State",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 597
                        },
                        "fallback": "0x00",
                        "docs": [
                            " State of the current authority set."
                        ]
                    },
                    {
                        "name": "PendingChange",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 598
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Pending change: (signaled at, scheduled change)."
                        ]
                    },
                    {
                        "name": "NextForced",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00",
                        "docs": [
                            " next block number where we can force a change."
                        ]
                    },
                    {
                        "name": "Stalled",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 32
                        },
                        "fallback": "0x00",
                        "docs": [
                            " `true` if we are currently stalled."
                        ]
                    },
                    {
                        "name": "CurrentSetId",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 12
                        },
                        "fallback": "0x0000000000000000",
                        "docs": [
                            " The number of changes (both in terms of keys and underlying economic responsibilities)",
                            " in the \"set\" of Grandpa validators from genesis."
                        ]
                    },
                    {
                        "name": "SetIdSession",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 12,
                                "value": 4
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                            " members were responsible.",
                            "",
                            " This is only used for validating equivocation proofs. An equivocation proof must",
                            " contains a key-ownership proof for a given session, therefore we need a way to tie",
                            " together sessions and GRANDPA set ids, i.e. we need to validate that a validator",
                            " was the owner of a given key on a given session, and what the active set ID was",
                            " during that session.",
                            "",
                            " TWOX-NOTE: `SetId` is not under user control."
                        ]
                    },
                    {
                        "name": "Authorities",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 599
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The current list of authorities."
                        ]
                    }
                ]
            },
            "calls": 140,
            "events": 50,
            "constants": [
                {
                    "name": "MaxAuthorities",
                    "type": 4,
                    "value": "0xa0860100",
                    "docs": [
                        " Max Authorities in use"
                    ]
                },
                {
                    "name": "MaxNominators",
                    "type": 4,
                    "value": "0x00020000",
                    "docs": [
                        " The maximum number of nominators for each validator."
                    ]
                },
                {
                    "name": "MaxSetIdSessionEntries",
                    "type": 12,
                    "value": "0xa800000000000000",
                    "docs": [
                        " The maximum number of entries to keep in the set id to session index mapping.",
                        "",
                        " Since the `SetIdSession` map is only used for validating equivocations this",
                        " value should relate to the bonding duration of whatever staking system is",
                        " being used (if any). If equivocation handling is not enabled then this value",
                        " can be zero."
                    ]
                }
            ],
            "errors": 600,
            "index": 11,
            "docs": []
        },
        {
            "name": "AuthorityDiscovery",
            "storage": {
                "prefix": "AuthorityDiscovery",
                "items": [
                    {
                        "name": "Keys",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 601
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Keys of the current authority set."
                        ]
                    },
                    {
                        "name": "NextKeys",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 601
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Keys of the next authority set."
                        ]
                    }
                ]
            },
            "constants": [],
            "index": 13,
            "docs": []
        },
        {
            "name": "Treasury",
            "storage": {
                "prefix": "Treasury",
                "items": [
                    {
                        "name": "ProposalCount",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " Number of proposals that have been made."
                        ]
                    },
                    {
                        "name": "Proposals",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 603
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Proposals that have been made."
                        ]
                    },
                    {
                        "name": "Deactivated",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 6
                        },
                        "fallback": "0x00000000000000000000000000000000",
                        "docs": [
                            " The amount which has been reported as inactive to Currency."
                        ]
                    },
                    {
                        "name": "Approvals",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 604
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Proposal indices that have been approved but not yet awarded."
                        ]
                    },
                    {
                        "name": "SpendCount",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " The count of spends that have been made."
                        ]
                    },
                    {
                        "name": "Spends",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 605
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Spends that have been approved and being processed."
                        ]
                    }
                ]
            },
            "calls": 151,
            "events": 54,
            "constants": [
                {
                    "name": "SpendPeriod",
                    "type": 4,
                    "value": "0x00460500",
                    "docs": [
                        " Period between successive spends."
                    ]
                },
                {
                    "name": "Burn",
                    "type": 607,
                    "value": "0x10270000",
                    "docs": [
                        " Percentage of spare funds (if any) that are burnt per spend period."
                    ]
                },
                {
                    "name": "PalletId",
                    "type": 608,
                    "value": "0x70792f7472737279",
                    "docs": [
                        " The treasury's pallet id, used for deriving its sovereign account ID."
                    ]
                },
                {
                    "name": "MaxApprovals",
                    "type": 4,
                    "value": "0x64000000",
                    "docs": [
                        " The maximum number of approvals that can wait in the spending queue.",
                        "",
                        " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
                    ]
                },
                {
                    "name": "PayoutPeriod",
                    "type": 4,
                    "value": "0x80970600",
                    "docs": [
                        " The period during which an approved treasury spend has to be claimed."
                    ]
                }
            ],
            "errors": 609,
            "index": 19,
            "docs": []
        },
        {
            "name": "ConvictionVoting",
            "storage": {
                "prefix": "ConvictionVoting",
                "items": [
                    {
                        "name": "VotingFor",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    },
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 610,
                                "value": 611
                            }
                        },
                        "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                        "docs": [
                            " All voting for a particular voter in a particular voting class. We store the balance for the",
                            " number of votes that we have recorded."
                        ]
                    },
                    {
                        "name": "ClassLocksFor",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 619
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The voting classes which have a non-zero lock requirement and the lock amounts which they",
                            " require. The actual amount locked on behalf of this pallet should always be the maximum of",
                            " this list."
                        ]
                    }
                ]
            },
            "calls": 153,
            "events": 89,
            "constants": [
                {
                    "name": "MaxVotes",
                    "type": 4,
                    "value": "0x00020000",
                    "docs": [
                        " The maximum number of concurrent votes an account may have.",
                        "",
                        " Also used to compute weight, an overly large value can lead to extrinsics with large",
                        " weight estimation: see `delegate` for instance."
                    ]
                },
                {
                    "name": "VoteLockingPeriod",
                    "type": 4,
                    "value": "0xc0890100",
                    "docs": [
                        " The minimum period of vote locking.",
                        "",
                        " It should be no shorter than enactment period to ensure that in the case of an approval,",
                        " those successful voters are locked into the consequences that their votes entail."
                    ]
                }
            ],
            "errors": 622,
            "index": 20,
            "docs": []
        },
        {
            "name": "Referenda",
            "storage": {
                "prefix": "Referenda",
                "items": [
                    {
                        "name": "ReferendumCount",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " The next free referendum index, aka the number of referenda started so far."
                        ]
                    },
                    {
                        "name": "ReferendumInfoFor",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 623
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Information concerning any given referendum."
                        ]
                    },
                    {
                        "name": "TrackQueue",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 91,
                                "value": 631
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
                            " conviction-weighted approvals.",
                            "",
                            " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
                        ]
                    },
                    {
                        "name": "DecidingCount",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 91,
                                "value": 4
                            }
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " The number of referenda being decided currently."
                        ]
                    },
                    {
                        "name": "MetadataOf",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 13
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The metadata is a general information concerning the referendum.",
                            " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON",
                            " dump or IPFS hash of a JSON file.",
                            "",
                            " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                            " large preimages."
                        ]
                    }
                ]
            },
            "calls": 158,
            "events": 90,
            "constants": [
                {
                    "name": "SubmissionDeposit",
                    "type": 6,
                    "value": "0x00e40b54020000000000000000000000",
                    "docs": [
                        " The minimum amount to be used as a deposit for a public referendum proposal."
                    ]
                },
                {
                    "name": "MaxQueued",
                    "type": 4,
                    "value": "0x64000000",
                    "docs": [
                        " Maximum size of the referendum queue for a single track."
                    ]
                },
                {
                    "name": "UndecidingTimeout",
                    "type": 4,
                    "value": "0x80130300",
                    "docs": [
                        " The number of blocks after submission that a referendum must begin being decided by.",
                        " Once this passes, then anyone may cancel the referendum."
                    ]
                },
                {
                    "name": "AlarmInterval",
                    "type": 4,
                    "value": "0x01000000",
                    "docs": [
                        " Quantization level for the referendum wakeup scheduler. A higher number will result in",
                        " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
                        " automatic referendum status changes. Explicit servicing instructions are unaffected."
                    ]
                },
                {
                    "name": "Tracks",
                    "type": 634,
                    "value": "0x40000010726f6f74010000000080c6a47e8d03000000000000000000b00400000027060040380000403800000290d73e0d000000005743de13000000005443de13000000000000ca9a3b000000000065cd1d01004877686974656c69737465645f63616c6c65726400000000407a10f35a000000000000000000002c01000000270600640000006400000002ec972510000000007b573c170000000042392f1200000000020e00840000000000d6e61f0100000000396279020000000002003c776973685f666f725f6368616e67650a0000000080f420e6b500000000000000000000b00400000027060040380000640000000290d73e0d000000005743de13000000005443de13000000000000ca9a3b000000000065cd1d0a00347374616b696e675f61646d696e0a00000000203d88792d00000000000000000000b004000000270600080700006400000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff0b00247472656173757265720a00000000a0724e180900000000000000000000b004000000270600c0890100403800000290d73e0d000000005743de13000000005443de13000000000000ca9a3b000000000065cd1d0c002c6c656173655f61646d696e0a00000000203d88792d00000000000000000000b004000000270600080700006400000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff0d004066656c6c6f77736869705f61646d696e0a00000000203d88792d00000000000000000000b004000000270600080700006400000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff0e003467656e6572616c5f61646d696e0a00000000203d88792d00000000000000000000b00400000027060008070000640000000290d73e0d000000005743de13000000005443de13000000000259a2f40200000000a3296b05000000002e6b4afdffffffff0f003461756374696f6e5f61646d696e0a00000000203d88792d00000000000000000000b00400000027060008070000640000000290d73e0d000000005743de13000000005443de13000000000259a2f40200000000a3296b05000000002e6b4afdffffffff1400507265666572656e64756d5f63616e63656c6c6572e803000000407a10f35a00000000000000000000b0040000c0890100080700006400000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff1500447265666572656e64756d5f6b696c6c6572e803000000406352bfc601000000000000000000b004000000270600080700006400000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff1e0030736d616c6c5f746970706572c800000000e40b540200000000000000000000000a000000c0890100640000000a00000000499149150065cd1d00ca9a3b02f9ba1800000000002a4d3100000000006b59e7ffffffffff1f00286269675f7469707065726400000000e8764817000000000000000000000064000000c0890100580200006400000000499149150065cd1d00ca9a3b02694f3f000000000035967d0000000000e534c1ffffffffff200034736d616c6c5f7370656e646572320000000010a5d4e800000000000000000000006009000000270600807000004038000000c94330240065cd1d00ca9a3b025d6f780000000000e82eed00000000008c6889ffffffffff2100386d656469756d5f7370656e6465723200000000204aa9d10100000000000000000000600900000027060000e1000040380000005b01f6300065cd1d00ca9a3b021161db0000000000bfd1aa010000000020972affffffffff22002c6269675f7370656e6465723200000000409452a303000000000000000000006009000000270600c0890100403800000000ca9a3b0065cd1d00ca9a3b02413cb00100000000755d34030000000045d165feffffffff",
                    "docs": [
                        " Information concerning the different referendum tracks."
                    ]
                }
            ],
            "errors": 640,
            "index": 21,
            "docs": []
        },
        {
            "name": "Origins",
            "constants": [],
            "index": 22,
            "docs": []
        },
        {
            "name": "Whitelist",
            "storage": {
                "prefix": "Whitelist",
                "items": [
                    {
                        "name": "WhitelistedCall",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 13,
                                "value": 35
                            }
                        },
                        "fallback": "0x00",
                        "docs": []
                    }
                ]
            },
            "calls": 168,
            "events": 449,
            "constants": [],
            "errors": 641,
            "index": 23,
            "docs": []
        },
        {
            "name": "Parameters",
            "storage": {
                "prefix": "Parameters",
                "items": [
                    {
                        "name": "Parameters",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 455,
                                "value": 458
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Stored parameters."
                        ]
                    }
                ]
            },
            "calls": 169,
            "events": 454,
            "constants": [],
            "index": 27,
            "docs": []
        },
        {
            "name": "Claims",
            "storage": {
                "prefix": "Claims",
                "items": [
                    {
                        "name": "Claims",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Identity"
                                    }
                                ],
                                "key": 183,
                                "value": 6
                            }
                        },
                        "fallback": "0x00",
                        "docs": []
                    },
                    {
                        "name": "Total",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 6
                        },
                        "fallback": "0x00000000000000000000000000000000",
                        "docs": []
                    },
                    {
                        "name": "Vesting",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Identity"
                                    }
                                ],
                                "key": 183,
                                "value": 185
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Vesting schedule for a claim.",
                            " First balance is the total amount that should be held for vesting.",
                            " Second balance is how much should be unlocked per block.",
                            " The block number is when the vesting should start."
                        ]
                    },
                    {
                        "name": "Signing",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Identity"
                                    }
                                ],
                                "key": 183,
                                "value": 187
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The statement kind that must be signed, if any."
                        ]
                    },
                    {
                        "name": "Preclaims",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Identity"
                                    }
                                ],
                                "key": 0,
                                "value": 183
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Pre-claimed Ethereum accounts, by the Account ID that they are claimed to."
                        ]
                    }
                ]
            },
            "calls": 180,
            "events": 460,
            "constants": [
                {
                    "name": "Prefix",
                    "type": 14,
                    "value": "0x8450617920444f547320746f2074686520506f6c6b61646f74206163636f756e743a",
                    "docs": []
                }
            ],
            "errors": 642,
            "index": 24,
            "docs": []
        },
        {
            "name": "Vesting",
            "storage": {
                "prefix": "Vesting",
                "items": [
                    {
                        "name": "Vesting",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 643
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Information regarding the vesting of a given account."
                        ]
                    },
                    {
                        "name": "StorageVersion",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 645
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Storage version of the pallet.",
                            "",
                            " New networks start with latest version, as determined by the genesis build."
                        ]
                    }
                ]
            },
            "calls": 188,
            "events": 461,
            "constants": [
                {
                    "name": "MinVestedTransfer",
                    "type": 6,
                    "value": "0x00e40b54020000000000000000000000",
                    "docs": [
                        " The minimum amount transferred to call `vested_transfer`."
                    ]
                },
                {
                    "name": "MaxVestingSchedules",
                    "type": 4,
                    "value": "0x1c000000",
                    "docs": []
                }
            ],
            "errors": 646,
            "index": 25,
            "docs": []
        },
        {
            "name": "Utility",
            "calls": 190,
            "events": 462,
            "constants": [
                {
                    "name": "batched_calls_limit",
                    "type": 4,
                    "value": "0xaa2a0000",
                    "docs": [
                        " The limit on the number of batched calls."
                    ]
                }
            ],
            "errors": 647,
            "index": 26,
            "docs": []
        },
        {
            "name": "Proxy",
            "storage": {
                "prefix": "Proxy",
                "items": [
                    {
                        "name": "Proxies",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 648
                            }
                        },
                        "fallback": "0x0000000000000000000000000000000000",
                        "docs": [
                            " The set of account proxies. Maps the account which has delegated to the accounts",
                            " which are being delegated to, together with the amount held on deposit."
                        ]
                    },
                    {
                        "name": "Announcements",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 652
                            }
                        },
                        "fallback": "0x0000000000000000000000000000000000",
                        "docs": [
                            " The announcements made by the proxy (key)."
                        ]
                    }
                ]
            },
            "calls": 192,
            "events": 463,
            "constants": [
                {
                    "name": "ProxyDepositBase",
                    "type": 6,
                    "value": "0x0084b2952e0000000000000000000000",
                    "docs": [
                        " The base amount of currency needed to reserve for creating a proxy.",
                        "",
                        " This is held for an additional storage item whose value size is",
                        " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
                    ]
                },
                {
                    "name": "ProxyDepositFactor",
                    "type": 6,
                    "value": "0x8066ab13000000000000000000000000",
                    "docs": [
                        " The amount of currency needed per proxy added.",
                        "",
                        " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
                        " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
                        " into account `32 + proxy_type.encode().len()` bytes of data."
                    ]
                },
                {
                    "name": "MaxProxies",
                    "type": 4,
                    "value": "0x20000000",
                    "docs": [
                        " The maximum amount of proxies allowed for a single account."
                    ]
                },
                {
                    "name": "MaxPending",
                    "type": 4,
                    "value": "0x20000000",
                    "docs": [
                        " The maximum amount of time-delayed announcements that are allowed to be pending."
                    ]
                },
                {
                    "name": "AnnouncementDepositBase",
                    "type": 6,
                    "value": "0x0084b2952e0000000000000000000000",
                    "docs": [
                        " The base amount of currency needed to reserve for creating an announcement.",
                        "",
                        " This is held when a new storage item holding a `Balance` is created (typically 16",
                        " bytes)."
                    ]
                },
                {
                    "name": "AnnouncementDepositFactor",
                    "type": 6,
                    "value": "0x00cd5627000000000000000000000000",
                    "docs": [
                        " The amount of currency needed per announcement made.",
                        "",
                        " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
                        " into a pre-existing storage value."
                    ]
                }
            ],
            "errors": 656,
            "index": 29,
            "docs": []
        },
        {
            "name": "Multisig",
            "storage": {
                "prefix": "Multisig",
                "items": [
                    {
                        "name": "Multisigs",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    },
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 657,
                                "value": 658
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The set of open multisig operations."
                        ]
                    }
                ]
            },
            "calls": 195,
            "events": 464,
            "constants": [
                {
                    "name": "DepositBase",
                    "type": 6,
                    "value": "0x008c61c52e0000000000000000000000",
                    "docs": [
                        " The base amount of currency needed to reserve for creating a multisig execution or to",
                        " store a dispatch call for later.",
                        "",
                        " This is held for an additional storage item whose value size is",
                        " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
                        " `32 + sizeof(AccountId)` bytes."
                    ]
                },
                {
                    "name": "DepositFactor",
                    "type": 6,
                    "value": "0x00d01213000000000000000000000000",
                    "docs": [
                        " The amount of currency needed per unit threshold when creating a multisig execution.",
                        "",
                        " This is held for adding 32 bytes more into a pre-existing storage value."
                    ]
                },
                {
                    "name": "MaxSignatories",
                    "type": 4,
                    "value": "0x64000000",
                    "docs": [
                        " The maximum amount of signatories allowed in the multisig."
                    ]
                }
            ],
            "errors": 660,
            "index": 30,
            "docs": []
        },
        {
            "name": "Bounties",
            "storage": {
                "prefix": "Bounties",
                "items": [
                    {
                        "name": "BountyCount",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " Number of bounty proposals that have been made."
                        ]
                    },
                    {
                        "name": "Bounties",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 661
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Bounties that have been made."
                        ]
                    },
                    {
                        "name": "BountyDescriptions",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 663
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The description of each bounty."
                        ]
                    },
                    {
                        "name": "BountyApprovals",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 604
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Bounty indices that have been approved but not yet funded."
                        ]
                    }
                ]
            },
            "calls": 198,
            "events": 465,
            "constants": [
                {
                    "name": "BountyDepositBase",
                    "type": 6,
                    "value": "0x00e40b54020000000000000000000000",
                    "docs": [
                        " The amount held on deposit for placing a bounty proposal."
                    ]
                },
                {
                    "name": "BountyDepositPayoutDelay",
                    "type": 4,
                    "value": "0x00000000",
                    "docs": [
                        " The delay period for which a bounty beneficiary need to wait before claim the payout."
                    ]
                },
                {
                    "name": "BountyUpdatePeriod",
                    "type": 4,
                    "value": "0x80c61300",
                    "docs": [
                        " Bounty duration in blocks."
                    ]
                },
                {
                    "name": "CuratorDepositMultiplier",
                    "type": 607,
                    "value": "0x20a10700",
                    "docs": [
                        " The curator deposit is calculated as a percentage of the curator fee.",
                        "",
                        " This deposit has optional upper and lower bounds with `CuratorDepositMax` and",
                        " `CuratorDepositMin`."
                    ]
                },
                {
                    "name": "CuratorDepositMax",
                    "type": 128,
                    "value": "0x0100204aa9d10100000000000000000000",
                    "docs": [
                        " Maximum amount of funds that should be placed in a deposit for making a proposal."
                    ]
                },
                {
                    "name": "CuratorDepositMin",
                    "type": 128,
                    "value": "0x0100e87648170000000000000000000000",
                    "docs": [
                        " Minimum amount of funds that should be placed in a deposit for making a proposal."
                    ]
                },
                {
                    "name": "BountyValueMinimum",
                    "type": 6,
                    "value": "0x00e87648170000000000000000000000",
                    "docs": [
                        " Minimum value for a bounty."
                    ]
                },
                {
                    "name": "DataDepositPerByte",
                    "type": 6,
                    "value": "0x00e1f505000000000000000000000000",
                    "docs": [
                        " The amount held on deposit per byte within the tip report reason or bounty description."
                    ]
                },
                {
                    "name": "MaximumReasonLength",
                    "type": 4,
                    "value": "0x00400000",
                    "docs": [
                        " Maximum acceptable reason length.",
                        "",
                        " Benchmarks depend on this value, be sure to update weights file when changing this value"
                    ]
                }
            ],
            "errors": 664,
            "index": 34,
            "docs": []
        },
        {
            "name": "ChildBounties",
            "storage": {
                "prefix": "ChildBounties",
                "items": [
                    {
                        "name": "ChildBountyCount",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " Number of total child bounties."
                        ]
                    },
                    {
                        "name": "ParentChildBounties",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 4
                            }
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " Number of child bounties per parent bounty.",
                            " Map of parent bounty index to number of child bounties."
                        ]
                    },
                    {
                        "name": "ChildBounties",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    },
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 32,
                                "value": 665
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Child bounties that have been added."
                        ]
                    },
                    {
                        "name": "ChildBountyDescriptions",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 663
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The description of each child-bounty."
                        ]
                    },
                    {
                        "name": "ChildrenCuratorFees",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 6
                            }
                        },
                        "fallback": "0x00000000000000000000000000000000",
                        "docs": [
                            " The cumulative child-bounty curator fee for each parent bounty."
                        ]
                    }
                ]
            },
            "calls": 199,
            "events": 466,
            "constants": [
                {
                    "name": "MaxActiveChildBountyCount",
                    "type": 4,
                    "value": "0x64000000",
                    "docs": [
                        " Maximum number of child bounties that can be added to a parent bounty."
                    ]
                },
                {
                    "name": "ChildBountyValueMinimum",
                    "type": 6,
                    "value": "0x00e40b54020000000000000000000000",
                    "docs": [
                        " Minimum value for a child-bounty."
                    ]
                }
            ],
            "errors": 667,
            "index": 38,
            "docs": []
        },
        {
            "name": "ElectionProviderMultiPhase",
            "storage": {
                "prefix": "ElectionProviderMultiPhase",
                "items": [
                    {
                        "name": "Round",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x01000000",
                        "docs": [
                            " Internal counter for the number of rounds.",
                            "",
                            " This is useful for de-duplication of transactions submitted to the pool, and general",
                            " diagnostics of the pallet.",
                            "",
                            " This is merely incremented once per every time that an upstream `elect` is called."
                        ]
                    },
                    {
                        "name": "CurrentPhase",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 469
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Current phase."
                        ]
                    },
                    {
                        "name": "QueuedSolution",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 668
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Current best solution, signed or unsigned, queued to be returned upon `elect`.",
                            "",
                            " Always sorted by score."
                        ]
                    },
                    {
                        "name": "Snapshot",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 670
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Snapshot data of the round.",
                            "",
                            " This is created at the beginning of the signed phase and cleared upon calling `elect`.",
                            " Note: This storage type must only be mutated through [`SnapshotWrapper`]."
                        ]
                    },
                    {
                        "name": "DesiredTargets",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Desired number of targets to elect for this round.",
                            "",
                            " Only exists when [`Snapshot`] is present.",
                            " Note: This storage type must only be mutated through [`SnapshotWrapper`]."
                        ]
                    },
                    {
                        "name": "SnapshotMetadata",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 254
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The metadata of the [`RoundSnapshot`]",
                            "",
                            " Only exists when [`Snapshot`] is present.",
                            " Note: This storage type must only be mutated through [`SnapshotWrapper`]."
                        ]
                    },
                    {
                        "name": "SignedSubmissionNextIndex",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " The next index to be assigned to an incoming signed submission.",
                            "",
                            " Every accepted submission is assigned a unique index; that index is bound to that particular",
                            " submission for the duration of the election. On election finalization, the next index is",
                            " reset to 0.",
                            "",
                            " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its",
                            " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,",
                            " because iteration is slow. Instead, we store the value here."
                        ]
                    },
                    {
                        "name": "SignedSubmissionIndices",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 673
                        },
                        "fallback": "0x00",
                        "docs": [
                            " A sorted, bounded vector of `(score, block_number, index)`, where each `index` points to a",
                            " value in `SignedSubmissions`.",
                            "",
                            " We never need to process more than a single signed submission at a time. Signed submissions",
                            " can be quite large, so we're willing to pay the cost of multiple database accesses to access",
                            " them one at a time instead of reading and decoding all of them at once."
                        ]
                    },
                    {
                        "name": "SignedSubmissionsMap",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 676
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Unchecked, signed solutions.",
                            "",
                            " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while",
                            " allowing us to keep only a single one in memory at a time.",
                            "",
                            " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or",
                            " affect; we shouldn't need a cryptographically secure hasher."
                        ]
                    },
                    {
                        "name": "MinimumUntrustedScore",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 253
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The minimum score that each 'untrusted' solution must attain in order to be considered",
                            " feasible.",
                            "",
                            " Can be set via `set_minimum_untrusted_score`."
                        ]
                    }
                ]
            },
            "calls": 200,
            "events": 467,
            "constants": [
                {
                    "name": "BetterSignedThreshold",
                    "type": 43,
                    "value": "0x00000000",
                    "docs": [
                        " The minimum amount of improvement to the solution score that defines a solution as",
                        " \"better\" in the Signed phase."
                    ]
                },
                {
                    "name": "OffchainRepeat",
                    "type": 4,
                    "value": "0x12000000",
                    "docs": [
                        " The repeat threshold of the offchain worker.",
                        "",
                        " For example, if it is 5, that means that at least 5 blocks will elapse between attempts",
                        " to submit the worker's solution."
                    ]
                },
                {
                    "name": "MinerTxPriority",
                    "type": 12,
                    "value": "0x65666666666666e6",
                    "docs": [
                        " The priority of the unsigned transaction submitted in the unsigned-phase"
                    ]
                },
                {
                    "name": "SignedMaxSubmissions",
                    "type": 4,
                    "value": "0x10000000",
                    "docs": [
                        " Maximum number of signed submissions that can be queued.",
                        "",
                        " It is best to avoid adjusting this during an election, as it impacts downstream data",
                        " structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you",
                        " update this value during an election, you _must_ ensure that",
                        " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,",
                        " attempts to submit new solutions may cause a runtime panic."
                    ]
                },
                {
                    "name": "SignedMaxWeight",
                    "type": 10,
                    "value": "0x0b08c77258550113a3703d0ad7a370bd",
                    "docs": [
                        " Maximum weight of a signed solution.",
                        "",
                        " If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of",
                        " this pallet), then [`MinerConfig::solution_weight`] is used to compare against",
                        " this value."
                    ]
                },
                {
                    "name": "SignedMaxRefunds",
                    "type": 4,
                    "value": "0x04000000",
                    "docs": [
                        " The maximum amount of unchecked solutions to refund the call fee for."
                    ]
                },
                {
                    "name": "SignedRewardBase",
                    "type": 6,
                    "value": "0x00e40b54020000000000000000000000",
                    "docs": [
                        " Base reward for a signed solution"
                    ]
                },
                {
                    "name": "SignedDepositByte",
                    "type": 6,
                    "value": "0x787d0100000000000000000000000000",
                    "docs": [
                        " Per-byte deposit for a signed solution."
                    ]
                },
                {
                    "name": "SignedDepositWeight",
                    "type": 6,
                    "value": "0x00000000000000000000000000000000",
                    "docs": [
                        " Per-weight deposit for a signed solution."
                    ]
                },
                {
                    "name": "MaxWinners",
                    "type": 4,
                    "value": "0xb0040000",
                    "docs": [
                        " The maximum number of winners that can be elected by this `ElectionProvider`",
                        " implementation.",
                        "",
                        " Note: This must always be greater or equal to `T::DataProvider::desired_targets()`."
                    ]
                },
                {
                    "name": "MinerMaxLength",
                    "type": 4,
                    "value": "0x00003600",
                    "docs": []
                },
                {
                    "name": "MinerMaxWeight",
                    "type": 10,
                    "value": "0x0b08c77258550113a3703d0ad7a370bd",
                    "docs": []
                },
                {
                    "name": "MinerMaxVotesPerVoter",
                    "type": 4,
                    "value": "0x10000000",
                    "docs": []
                },
                {
                    "name": "MinerMaxWinners",
                    "type": 4,
                    "value": "0xb0040000",
                    "docs": []
                }
            ],
            "errors": 677,
            "index": 36,
            "docs": []
        },
        {
            "name": "VoterList",
            "storage": {
                "prefix": "VoterList",
                "items": [
                    {
                        "name": "ListNodes",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 678
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " A single node, within some bag.",
                            "",
                            " Nodes store links forward and back within their respective bags."
                        ]
                    },
                    {
                        "name": "CounterForListNodes",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            "Counter for the related counted storage map"
                        ]
                    },
                    {
                        "name": "ListBags",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 12,
                                "value": 679
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " A bag stored in storage.",
                            "",
                            " Stores a `Bag` struct, which stores head and tail pointers to itself."
                        ]
                    }
                ]
            },
            "calls": 261,
            "events": 471,
            "constants": [
                {
                    "name": "BagThresholds",
                    "type": 680,
                    "value": "0x210300e40b5402000000f39e809702000000a8b197e20200000094492e3603000000279c3a930300000003bccefa0300000042c01b6e040000001b4775ee04000000385e557d0500000046dc601c0600000089386ccd06000000b6ee809207000000fe7ee36d08000000e81b1a6209000000b019f4710a000000103592a00b000000cfc96ff10c00000041146d680e000000e79bda0910000000cee885da1100000028a9c7df13000000bb70931f160000008e4089a018000000810a096a1b000000366a48841e0000005bd36af821000000807c9cd025000000c95530182a000000bd63c1db2e00000071e0572934000000689092103a000000edc4d4a240000000699379f3470000008fd80c18500000004baf8a28590000006a16a63f630000000995177b6e00000078c5f4fb7a00000062c811e78800000051bf6d6598000000048eaba4a9000000544698d7bc00000091cac036d2000000175f1801ea000000bd15b27c0401000043358ff721010000b8fc84c84201000099673c506701000007e44efa8f010000b341833ebd010000027f2ea2ef0100009883bcb927020000164d652a66020000b49513acab0200002d8e820bf9020000a1e6982c4f030000a616080daf030000cc9d37c719040000a0d584959004000042e7e0d514050000028cd70da80500000f750aef4b060000ea8d2e5c02070000c3cb996ecd070000b1e5717caf080000aa2b8e1fab090000b5c1203dc30a000026d03d0efb0b000070c75929560d0000ebadda8cd80e0000f797dbaa86100000cff04476651200001f2660717a14000009a611becb1600001dfbe82f60190000943a3c603f1c00008afe89c4711f0000ced963c70023000003a92ae4f6260000fe72eec55f2b000036c9cc6948300000dae33245bf350000062a7470d43b00007c9732d69942000084a32468234a0000571ad45987520000e7f10262de5b00000db8760344660000ae0401ded67100007d9eb308b97e00001e044a76108d00003a1df064079d0000e04fafdaccae00005679f02f95c2000095c3aaa99ad80000967c05251ef10000177a66d6670c010028cb1f1ec82a0100fa282f75984c0100d57dc8743c7201007dc4b3fb229c0100365cde74c7ca01009eb8e142b3fe01000c31ae547f3802005fe101e8d57802006373da7e74c0020051d1a60d2e100300c7e9a468ed68030061c091f7b7cb0300bf27a1b7b03904007b1499941bb404008523ed22613c050069a5d4c512d40500ec8c934def7c0600f5aa901be83807008cbe5ddb260a080002978ce113f30800fae314435df60900ddf12dbafe160b002ebadc6f4a580c000c5518c4f2bd0d00f0bb5431154c0f00498e866b46071100b2c153de9ff41200278a2fb2ce191500b2399f84247d1700e199e704aa251a00ba13f5ab331b1d00264785cc7866200088bf803f2d1124001c9823f81d262800ccc422d450b12c00f088820528c03100367c6d7e896137006e9329d30aa63d008cbc6c1322a044000070f32a5c644c00b43b84699909550080b4abe450a95e00a0cda979db5f69004cc27f4cc74c7500d0ac0eba34938200483e0ccf3d5a910068c68e7469cda100281e6fa52b1db40098a92326747fc800f09a74634d30df0080cdfc4b8d72f8009014602d9a901401f0b413d945dd330120973596c1b4560150dcfbaead7d7d01e01198b947aaa80130c7ee16bbb9d801206e488697390e02a0fa4b1d72c74902c0117170b5128c02808a1643a6ded502c0f823b1a204280380af5970a2768303c06f2d87ff41e90340937fac8f925a040091097117b6d804400fdf5b212065050049c149446e0106008ebca6e56caf0600595686851c71078068aa34a4b7480880a1e29e52b9380900bdabe880e4430a002a72b4204c6d0b80f1c013335cb80c00a03ccbdce3280e80b8629a9e20c30f00de5693d2ca8b11005d7f4c93238813001a87df3504be1500a7ce4b84ef3318000110fbea24f11a00802ae5d1b5fd1d0022a134609d62210044216bf0da2925000261f1828f5e29006620cf851e0d2e008410195252433300a0c18fca8410390026ad1493cc853f00d0cd24662fb646009ce19a1cdab64e0058ccc20c5f9f5700200a7578fb89610030bbbbd6e4936c0060cba7dc9edd7800b83bc0425b8b8600b886236164c59500f8f15fdc93b8a600206a91c0d696b900d8efe28fc097ce0068299bf52ef9e5ffffffffffffffff",
                    "docs": [
                        " The list of thresholds separating the various bags.",
                        "",
                        " Ids are separated into unsorted bags according to their score. This specifies the",
                        " thresholds separating the bags. An id's bag is the largest bag for which the id's score",
                        " is less than or equal to its upper threshold.",
                        "",
                        " When ids are iterated, higher bags are iterated completely before lower bags. This means",
                        " that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower",
                        " score, but peer ids within a particular bag are sorted in insertion order.",
                        "",
                        " # Expressing the constant",
                        "",
                        " This constant must be sorted in strictly increasing order. Duplicate items are not",
                        " permitted.",
                        "",
                        " There is an implied upper limit of `Score::MAX`; that value does not need to be",
                        " specified within the bag. For any two threshold lists, if one ends with",
                        " `Score::MAX`, the other one does not, and they are otherwise equal, the two",
                        " lists will behave identically.",
                        "",
                        " # Calculation",
                        "",
                        " It is recommended to generate the set of thresholds in a geometric series, such that",
                        " there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *",
                        " constant_ratio).max(threshold[k] + 1)` for all `k`.",
                        "",
                        " The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.",
                        "",
                        " # Examples",
                        "",
                        " - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and",
                        "   iteration is strictly in insertion order.",
                        " - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to",
                        "   the procedure given above, then the constant ratio is equal to 2.",
                        " - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to",
                        "   the procedure given above, then the constant ratio is approximately equal to 1.248.",
                        " - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall",
                        "   into bag 0, an id with score 2 will fall into bag 1, etc.",
                        "",
                        " # Migration",
                        "",
                        " In the event that this list ever changes, a copy of the old bags list must be retained.",
                        " With that `List::migrate` can be called, which will perform the appropriate migration."
                    ]
                }
            ],
            "errors": 681,
            "index": 37,
            "docs": []
        },
        {
            "name": "NominationPools",
            "storage": {
                "prefix": "NominationPools",
                "items": [
                    {
                        "name": "TotalValueLocked",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 6
                        },
                        "fallback": "0x00000000000000000000000000000000",
                        "docs": [
                            " The sum of funds across all pools.",
                            "",
                            " This might be lower but never higher than the sum of `total_balance` of all [`PoolMembers`]",
                            " because calling `pool_withdraw_unbonded` might decrease the total stake of the pool's",
                            " `bonded_account` without adjusting the pallet-internal `UnbondingPool`'s."
                        ]
                    },
                    {
                        "name": "MinJoinBond",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 6
                        },
                        "fallback": "0x00000000000000000000000000000000",
                        "docs": [
                            " Minimum amount to bond to join a pool."
                        ]
                    },
                    {
                        "name": "MinCreateBond",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 6
                        },
                        "fallback": "0x00000000000000000000000000000000",
                        "docs": [
                            " Minimum bond required to create a pool.",
                            "",
                            " This is the amount that the depositor must put as their initial stake in the pool, as an",
                            " indication of \"skin in the game\".",
                            "",
                            " This is the value that will always exist in the staking ledger of the pool bonded account",
                            " while all other accounts leave."
                        ]
                    },
                    {
                        "name": "MaxPools",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Maximum number of nomination pools that can exist. If `None`, then an unbounded number of",
                            " pools can exist."
                        ]
                    },
                    {
                        "name": "MaxPoolMembers",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Maximum number of members that can exist in the system. If `None`, then the count",
                            " members are not bound on a system wide basis."
                        ]
                    },
                    {
                        "name": "MaxPoolMembersPerPool",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Maximum number of members that may belong to pool. If `None`, then the count of",
                            " members is not bound on a per pool basis."
                        ]
                    },
                    {
                        "name": "GlobalMaxCommission",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 43
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The maximum commission that can be charged by a pool. Used on commission payouts to bound",
                            " pool commissions that are > `GlobalMaxCommission`, necessary if a future",
                            " `GlobalMaxCommission` is lower than some current pool commissions."
                        ]
                    },
                    {
                        "name": "PoolMembers",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 683
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Active members.",
                            "",
                            " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                        ]
                    },
                    {
                        "name": "CounterForPoolMembers",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            "Counter for the related counted storage map"
                        ]
                    },
                    {
                        "name": "BondedPools",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 686
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Storage for bonded pools."
                        ]
                    },
                    {
                        "name": "CounterForBondedPools",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            "Counter for the related counted storage map"
                        ]
                    },
                    {
                        "name": "RewardPools",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 691
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Reward pools. This is where there rewards for each pool accumulate. When a members payout is",
                            " claimed, the balance comes out of the reward pool. Keyed by the bonded pools account."
                        ]
                    },
                    {
                        "name": "CounterForRewardPools",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            "Counter for the related counted storage map"
                        ]
                    },
                    {
                        "name": "SubPoolsStorage",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 692
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Groups of unbonding pools. Each group of unbonding pools belongs to a",
                            " bonded pool, hence the name sub-pools. Keyed by the bonded pools account."
                        ]
                    },
                    {
                        "name": "CounterForSubPoolsStorage",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            "Counter for the related counted storage map"
                        ]
                    },
                    {
                        "name": "Metadata",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 698
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Metadata for the pool."
                        ]
                    },
                    {
                        "name": "CounterForMetadata",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            "Counter for the related counted storage map"
                        ]
                    },
                    {
                        "name": "LastPoolId",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " Ever increasing number of all pools created so far."
                        ]
                    },
                    {
                        "name": "ReversePoolIdLookup",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 4
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " A reverse lookup from the pool's account id to its id.",
                            "",
                            " This is only used for slashing and on automatic withdraw update. In all other instances, the",
                            " pool id is used, and the accounts are deterministically derived from it."
                        ]
                    },
                    {
                        "name": "CounterForReversePoolIdLookup",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            "Counter for the related counted storage map"
                        ]
                    },
                    {
                        "name": "ClaimPermissions",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 269
                            }
                        },
                        "fallback": "0x02",
                        "docs": [
                            " Map from a pool member account to their opted claim permission."
                        ]
                    }
                ]
            },
            "calls": 262,
            "events": 472,
            "constants": [
                {
                    "name": "PalletId",
                    "type": 608,
                    "value": "0x70792f6e6f706c73",
                    "docs": [
                        " The nomination pool's pallet id."
                    ]
                },
                {
                    "name": "MaxPointsToBalance",
                    "type": 2,
                    "value": "0x0a",
                    "docs": [
                        " The maximum pool points-to-balance ratio that an `open` pool can have.",
                        "",
                        " This is important in the event slashing takes place and the pool's points-to-balance",
                        " ratio becomes disproportional.",
                        "",
                        " Moreover, this relates to the `RewardCounter` type as well, as the arithmetic operations",
                        " are a function of number of points, and by setting this value to e.g. 10, you ensure",
                        " that the total number of points in the system are at most 10 times the total_issuance of",
                        " the chain, in the absolute worse case.",
                        "",
                        " For a value of 10, the threshold would be a pool points-to-balance ratio of 10:1.",
                        " Such a scenario would also be the equivalent of the pool being 90% slashed."
                    ]
                },
                {
                    "name": "MaxUnbonding",
                    "type": 4,
                    "value": "0x20000000",
                    "docs": [
                        " The maximum number of simultaneous unbonding chunks that can exist per member."
                    ]
                }
            ],
            "errors": 699,
            "index": 39,
            "docs": []
        },
        {
            "name": "FastUnstake",
            "storage": {
                "prefix": "FastUnstake",
                "items": [
                    {
                        "name": "Head",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 701
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The current \"head of the queue\" being unstaked.",
                            "",
                            " The head in itself can be a batch of up to [`Config::BatchSize`] stakers."
                        ]
                    },
                    {
                        "name": "Queue",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 6
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The map of all accounts wishing to be unstaked.",
                            "",
                            " Keeps track of `AccountId` wishing to unstake and it's corresponding deposit."
                        ]
                    },
                    {
                        "name": "CounterForQueue",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            "Counter for the related counted storage map"
                        ]
                    },
                    {
                        "name": "ErasToCheckPerBlock",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " Number of eras to check per block.",
                            "",
                            " If set to 0, this pallet does absolutely nothing. Cannot be set to more than",
                            " [`Config::MaxErasToCheckPerBlock`].",
                            "",
                            " Based on the amount of weight available at [`Pallet::on_idle`], up to this many eras are",
                            " checked. The checking is represented by updating [`UnstakeRequest::checked`], which is",
                            " stored in [`Head`]."
                        ]
                    }
                ]
            },
            "calls": 275,
            "events": 473,
            "constants": [
                {
                    "name": "Deposit",
                    "type": 6,
                    "value": "0x00e40b54020000000000000000000000",
                    "docs": [
                        " Deposit to take for unstaking, to make sure we're able to slash the it in order to cover",
                        " the costs of resources on unsuccessful unstake."
                    ]
                }
            ],
            "errors": 704,
            "index": 40,
            "docs": []
        },
        {
            "name": "ParachainsOrigin",
            "constants": [],
            "index": 50,
            "docs": [
                " There is no way to register an origin type in `construct_runtime` without a pallet the origin",
                " belongs to.",
                "",
                " This module fulfills only the single purpose of housing the `Origin` in `construct_runtime`."
            ]
        },
        {
            "name": "Configuration",
            "storage": {
                "prefix": "Configuration",
                "items": [
                    {
                        "name": "ActiveConfig",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 705
                        },
                        "fallback": "0x00003000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000064000000010000000100000000000000000000000000000002000000020000000200000000010000000100000001000000000100000000000000000000001027000080b2e60e80c3c9018096980000000000000000000000000005000000",
                        "docs": [
                            " The active configuration for the current session."
                        ]
                    },
                    {
                        "name": "PendingConfigs",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 706
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Pending configuration changes.",
                            "",
                            " This is a list of configuration changes, each with a session index at which it should",
                            " be applied.",
                            "",
                            " The list is sorted ascending by session index. Also, this list can only contain at most",
                            " 2 items: for the next session and for the `scheduled_session`."
                        ]
                    },
                    {
                        "name": "BypassConsistencyCheck",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 8
                        },
                        "fallback": "0x00",
                        "docs": [
                            " If this is set, then the configuration setters will bypass the consistency checks. This",
                            " is meant to be used only as the last resort."
                        ]
                    }
                ]
            },
            "calls": 276,
            "constants": [],
            "errors": 708,
            "index": 51,
            "docs": []
        },
        {
            "name": "ParasShared",
            "storage": {
                "prefix": "ParasShared",
                "items": [
                    {
                        "name": "CurrentSessionIndex",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " The current session index."
                        ]
                    },
                    {
                        "name": "ActiveValidatorIndices",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 709
                        },
                        "fallback": "0x00",
                        "docs": [
                            " All the validators actively participating in parachain consensus.",
                            " Indices are into the broader validator set."
                        ]
                    },
                    {
                        "name": "ActiveValidatorKeys",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 710
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The parachain attestation keys of the validators actively participating in parachain",
                            " consensus. This should be the same length as `ActiveValidatorIndices`."
                        ]
                    },
                    {
                        "name": "AllowedRelayParents",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 711
                        },
                        "fallback": "0x0000000000",
                        "docs": [
                            " All allowed relay-parents."
                        ]
                    }
                ]
            },
            "calls": 285,
            "constants": [],
            "index": 52,
            "docs": []
        },
        {
            "name": "ParaInclusion",
            "storage": {
                "prefix": "ParaInclusion",
                "items": [
                    {
                        "name": "V1",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 714
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Candidates pending availability by `ParaId`. They form a chain starting from the latest",
                            " included head of the para.",
                            " Use a different prefix post-migration to v1, since the v0 `PendingAvailability` storage",
                            " would otherwise have the exact same prefix which could cause undefined behaviour when doing",
                            " the migration."
                        ]
                    }
                ]
            },
            "calls": 286,
            "events": 474,
            "constants": [],
            "errors": 716,
            "index": 53,
            "docs": []
        },
        {
            "name": "ParaInherent",
            "storage": {
                "prefix": "ParaInherent",
                "items": [
                    {
                        "name": "Included",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 35
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Whether the paras inherent was included within this block.",
                            "",
                            " The `Option<()>` is effectively a `bool`, but it never hits storage in the `None` variant",
                            " due to the guarantees of FRAME's storage APIs.",
                            "",
                            " If this is `None` at the end of the block, we panic and render the block invalid."
                        ]
                    },
                    {
                        "name": "OnChainVotes",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 717
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Scraped on chain data for extracting resolved disputes as well as backing votes."
                        ]
                    }
                ]
            },
            "calls": 287,
            "constants": [],
            "errors": 722,
            "index": 54,
            "docs": []
        },
        {
            "name": "ParaScheduler",
            "storage": {
                "prefix": "ParaScheduler",
                "items": [
                    {
                        "name": "ValidatorGroups",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 723
                        },
                        "fallback": "0x00",
                        "docs": [
                            " All the validator groups. One for each core. Indices are into `ActiveValidators` - not the",
                            " broader set of Polkadot validators, but instead just the subset used for parachains during",
                            " this session.",
                            "",
                            " Bound: The number of cores is the sum of the numbers of parachains and parathread",
                            " multiplexers. Reasonably, 100-1000. The dominant factor is the number of validators: safe",
                            " upper bound at 10k."
                        ]
                    },
                    {
                        "name": "AvailabilityCores",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 724
                        },
                        "fallback": "0x00",
                        "docs": [
                            " One entry for each availability core. The i'th parachain belongs to the i'th core, with the",
                            " remaining cores all being on demand parachain multiplexers.",
                            "",
                            " Bounded by the maximum of either of these two values:",
                            "   * The number of parachains and parathread multiplexers",
                            "   * The number of validators divided by `configuration.max_validators_per_core`."
                        ]
                    },
                    {
                        "name": "SessionStartBlock",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " The block number where the session start occurred. Used to track how many group rotations",
                            " have occurred.",
                            "",
                            " Note that in the context of parachains modules the session change is signaled during",
                            " the block and enacted at the end of the block (at the finalization stage, to be exact).",
                            " Thus for all intents and purposes the effect of the session change is observed at the",
                            " block following the session change, block number of which we save in this storage value."
                        ]
                    },
                    {
                        "name": "ClaimQueue",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 728
                        },
                        "fallback": "0x00",
                        "docs": [
                            " One entry for each availability core. The `VecDeque` represents the assignments to be",
                            " scheduled on that core. The value contained here will not be valid after the end of",
                            " a block. Runtime APIs should be used to determine scheduled cores for the upcoming block."
                        ]
                    }
                ]
            },
            "constants": [],
            "index": 55,
            "docs": []
        },
        {
            "name": "Paras",
            "storage": {
                "prefix": "Paras",
                "items": [
                    {
                        "name": "PvfActiveVoteMap",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 302,
                                "value": 732
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " All currently active PVF pre-checking votes.",
                            "",
                            " Invariant:",
                            " - There are no PVF pre-checking votes that exists in list but not in the set and vice versa."
                        ]
                    },
                    {
                        "name": "PvfActiveVoteList",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 736
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The list of all currently active PVF votes. Auxiliary to `PvfActiveVoteMap`."
                        ]
                    },
                    {
                        "name": "Parachains",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 737
                        },
                        "fallback": "0x00",
                        "docs": [
                            " All lease holding parachains. Ordered ascending by `ParaId`. On demand parachains are not",
                            " included.",
                            "",
                            " Consider using the [`ParachainsCache`] type of modifying."
                        ]
                    },
                    {
                        "name": "ParaLifecycles",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 738
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The current lifecycle of a all known Para IDs."
                        ]
                    },
                    {
                        "name": "Heads",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 310
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The head-data of every registered para."
                        ]
                    },
                    {
                        "name": "MostRecentContext",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 4
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The context (relay-chain block number) of the most recent parachain head."
                        ]
                    },
                    {
                        "name": "CurrentCodeHash",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 302
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The validation code hash of every live para.",
                            "",
                            " Corresponding code can be retrieved with [`CodeByHash`]."
                        ]
                    },
                    {
                        "name": "PastCodeHash",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 739,
                                "value": 302
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Actual past code hash, indicated by the para id as well as the block number at which it",
                            " became outdated.",
                            "",
                            " Corresponding code can be retrieved with [`CodeByHash`]."
                        ]
                    },
                    {
                        "name": "PastCodeMeta",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 740
                            }
                        },
                        "fallback": "0x0000",
                        "docs": [
                            " Past code of parachains. The parachains themselves may not be registered anymore,",
                            " but we also keep their code on-chain for the same amount of time as outdated code",
                            " to keep it available for approval checkers."
                        ]
                    },
                    {
                        "name": "PastCodePruning",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 743
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Which paras have past code that needs pruning and the relay-chain block at which the code",
                            " was replaced. Note that this is the actual height of the included block, not the expected",
                            " height at which the code upgrade would be applied, although they may be equal.",
                            " This is to ensure the entire acceptance period is covered, not an offset acceptance period",
                            " starting from the time at which the parachain perceives a code upgrade as having occurred.",
                            " Multiple entries for a single para are permitted. Ordered ascending by block number."
                        ]
                    },
                    {
                        "name": "FutureCodeUpgrades",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 4
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The block number at which the planned code change is expected for a parachain.",
                            "",
                            " The change will be applied after the first parablock for this ID included which executes",
                            " in the context of a relay chain block with a number >= `expected_at`."
                        ]
                    },
                    {
                        "name": "FutureCodeUpgradesAt",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 743
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The list of upcoming future code upgrades.",
                            "",
                            " Each item is a pair of the parachain and the expected block at which the upgrade should be",
                            " applied. The upgrade will be applied at the given relay chain block. In contrast to",
                            " [`FutureCodeUpgrades`] this code upgrade will be applied regardless the parachain making any",
                            " progress or not.",
                            "",
                            " Ordered ascending by block number."
                        ]
                    },
                    {
                        "name": "FutureCodeHash",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 302
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The actual future code hash of a para.",
                            "",
                            " Corresponding code can be retrieved with [`CodeByHash`]."
                        ]
                    },
                    {
                        "name": "UpgradeGoAheadSignal",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 744
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " This is used by the relay-chain to communicate to a parachain a go-ahead with in the upgrade",
                            " procedure.",
                            "",
                            " This value is absent when there are no upgrades scheduled or during the time the relay chain",
                            " performs the checks. It is set at the first relay-chain block when the corresponding",
                            " parachain can switch its upgrade function. As soon as the parachain's block is included, the",
                            " value gets reset to `None`.",
                            "",
                            " NOTE that this field is used by parachains via merkle storage proofs, therefore changing",
                            " the format will require migration of parachains."
                        ]
                    },
                    {
                        "name": "UpgradeRestrictionSignal",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 745
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " This is used by the relay-chain to communicate that there are restrictions for performing",
                            " an upgrade for this parachain.",
                            "",
                            " This may be a because the parachain waits for the upgrade cooldown to expire. Another",
                            " potential use case is when we want to perform some maintenance (such as storage migration)",
                            " we could restrict upgrades to make the process simpler.",
                            "",
                            " NOTE that this field is used by parachains via merkle storage proofs, therefore changing",
                            " the format will require migration of parachains."
                        ]
                    },
                    {
                        "name": "UpgradeCooldowns",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 743
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The list of parachains that are awaiting for their upgrade restriction to cooldown.",
                            "",
                            " Ordered ascending by block number."
                        ]
                    },
                    {
                        "name": "UpcomingUpgrades",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 743
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The list of upcoming code upgrades.",
                            "",
                            " Each item is a pair of which para performs a code upgrade and at which relay-chain block it",
                            " is expected at.",
                            "",
                            " Ordered ascending by block number."
                        ]
                    },
                    {
                        "name": "ActionsQueue",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 737
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The actions to perform during the start of a specific session index."
                        ]
                    },
                    {
                        "name": "UpcomingParasGenesis",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 746
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Upcoming paras instantiation arguments.",
                            "",
                            " NOTE that after PVF pre-checking is enabled the para genesis arg will have it's code set",
                            " to empty. Instead, the code will be saved into the storage right away via `CodeByHash`."
                        ]
                    },
                    {
                        "name": "CodeByHashRefs",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Identity"
                                    }
                                ],
                                "key": 302,
                                "value": 4
                            }
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " The number of reference on the validation code in [`CodeByHash`] storage."
                        ]
                    },
                    {
                        "name": "CodeByHash",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Identity"
                                    }
                                ],
                                "key": 302,
                                "value": 309
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Validation code stored by its hash.",
                            "",
                            " This storage is consistent with [`FutureCodeHash`], [`CurrentCodeHash`] and",
                            " [`PastCodeHash`]."
                        ]
                    }
                ]
            },
            "calls": 322,
            "events": 478,
            "constants": [
                {
                    "name": "UnsignedPriority",
                    "type": 12,
                    "value": "0xffffffffffffffff",
                    "docs": []
                }
            ],
            "errors": 747,
            "index": 56,
            "docs": []
        },
        {
            "name": "Initializer",
            "storage": {
                "prefix": "Initializer",
                "items": [
                    {
                        "name": "HasInitialized",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 35
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Whether the parachains modules have been initialized within this block.",
                            "",
                            " Semantically a `bool`, but this guarantees it should never hit the trie,",
                            " as this is cleared in `on_finalize` and Frame optimizes `None` values to be empty values.",
                            "",
                            " As a `bool`, `set(false)` and `remove()` both lead to the next `get()` being false, but one",
                            " of them writes to the trie and one does not. This confusion makes `Option<()>` more suitable",
                            " for the semantics of this variable."
                        ]
                    },
                    {
                        "name": "BufferedSessionChanges",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 748
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Buffered session changes along with the block number at which they should be applied.",
                            "",
                            " Typically this will be empty or one element long. Apart from that this item never hits",
                            " the storage.",
                            "",
                            " However this is a `Vec` regardless to handle various edge cases that may occur at runtime",
                            " upgrade boundaries or if governance intervenes."
                        ]
                    }
                ]
            },
            "calls": 324,
            "constants": [],
            "index": 57,
            "docs": []
        },
        {
            "name": "Dmp",
            "storage": {
                "prefix": "Dmp",
                "items": [
                    {
                        "name": "DownwardMessageQueues",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 750
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The downward messages addressed for a certain para."
                        ]
                    },
                    {
                        "name": "DownwardMessageQueueHeads",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 13
                            }
                        },
                        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                        "docs": [
                            " A mapping that stores the downward message queue MQC head for each para.",
                            "",
                            " Each link in this chain has a form:",
                            " `(prev_head, B, H(M))`, where",
                            " - `prev_head`: is the previous head hash or zero if none.",
                            " - `B`: is the relay-chain block number in which a message was appended.",
                            " - `H(M)`: is the hash of the message being appended."
                        ]
                    },
                    {
                        "name": "DeliveryFeeFactor",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 436
                            }
                        },
                        "fallback": "0x000064a7b3b6e00d0000000000000000",
                        "docs": [
                            " The factor to multiply the base delivery fee by."
                        ]
                    }
                ]
            },
            "constants": [],
            "index": 58,
            "docs": []
        },
        {
            "name": "Hrmp",
            "storage": {
                "prefix": "Hrmp",
                "items": [
                    {
                        "name": "HrmpOpenChannelRequests",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 326,
                                "value": 752
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The set of pending HRMP open channel requests.",
                            "",
                            " The set is accompanied by a list for iteration.",
                            "",
                            " Invariant:",
                            " - There are no channels that exists in list but not in the set and vice versa."
                        ]
                    },
                    {
                        "name": "HrmpOpenChannelRequestsList",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 753
                        },
                        "fallback": "0x00",
                        "docs": []
                    },
                    {
                        "name": "HrmpOpenChannelRequestCount",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 4
                            }
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " This mapping tracks how many open channel requests are initiated by a given sender para.",
                            " Invariant: `HrmpOpenChannelRequests` should contain the same number of items that has",
                            " `(X, _)` as the number of `HrmpOpenChannelRequestCount` for `X`."
                        ]
                    },
                    {
                        "name": "HrmpAcceptedChannelRequestCount",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 4
                            }
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " This mapping tracks how many open channel requests were accepted by a given recipient para.",
                            " Invariant: `HrmpOpenChannelRequests` should contain the same number of items `(_, X)` with",
                            " `confirmed` set to true, as the number of `HrmpAcceptedChannelRequestCount` for `X`."
                        ]
                    },
                    {
                        "name": "HrmpCloseChannelRequests",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 326,
                                "value": 35
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " A set of pending HRMP close channel requests that are going to be closed during the session",
                            " change. Used for checking if a given channel is registered for closure.",
                            "",
                            " The set is accompanied by a list for iteration.",
                            "",
                            " Invariant:",
                            " - There are no channels that exists in list but not in the set and vice versa."
                        ]
                    },
                    {
                        "name": "HrmpCloseChannelRequestsList",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 753
                        },
                        "fallback": "0x00",
                        "docs": []
                    },
                    {
                        "name": "HrmpWatermarks",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 4
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The HRMP watermark associated with each para.",
                            " Invariant:",
                            " - each para `P` used here as a key should satisfy `Paras::is_valid_para(P)` within a",
                            "   session."
                        ]
                    },
                    {
                        "name": "HrmpChannels",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 326,
                                "value": 754
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " HRMP channel data associated with each para.",
                            " Invariant:",
                            " - each participant in the channel should satisfy `Paras::is_valid_para(P)` within a session."
                        ]
                    },
                    {
                        "name": "HrmpIngressChannelsIndex",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 737
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Ingress/egress indexes allow to find all the senders and receivers given the opposite side.",
                            " I.e.",
                            "",
                            " (a) ingress index allows to find all the senders for a given recipient.",
                            " (b) egress index allows to find all the recipients for a given sender.",
                            "",
                            " Invariants:",
                            " - for each ingress index entry for `P` each item `I` in the index should present in",
                            "   `HrmpChannels` as `(I, P)`.",
                            " - for each egress index entry for `P` each item `E` in the index should present in",
                            "   `HrmpChannels` as `(P, E)`.",
                            " - there should be no other dangling channels in `HrmpChannels`.",
                            " - the vectors are sorted."
                        ]
                    },
                    {
                        "name": "HrmpEgressChannelsIndex",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 737
                            }
                        },
                        "fallback": "0x00",
                        "docs": []
                    },
                    {
                        "name": "HrmpChannelContents",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 326,
                                "value": 755
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Storage for the messages for each channel.",
                            " Invariant: cannot be non-empty if the corresponding channel in `HrmpChannels` is `None`."
                        ]
                    },
                    {
                        "name": "HrmpChannelDigests",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 757
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Maintains a mapping that can be used to answer the question: What paras sent a message at",
                            " the given block number for a given receiver. Invariants:",
                            " - The inner `Vec<ParaId>` is never empty.",
                            " - The inner `Vec<ParaId>` cannot store two same `ParaId`.",
                            " - The outer vector is sorted ascending by block number and cannot store two items with the",
                            "   same block number."
                        ]
                    }
                ]
            },
            "calls": 325,
            "events": 479,
            "constants": [],
            "errors": 759,
            "index": 60,
            "docs": []
        },
        {
            "name": "ParaSessionInfo",
            "storage": {
                "prefix": "ParaSessionInfo",
                "items": [
                    {
                        "name": "AssignmentKeysUnsafe",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 760
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Assignment keys for the current session.",
                            " Note that this API is private due to it being prone to 'off-by-one' at session boundaries.",
                            " When in doubt, use `Sessions` API instead."
                        ]
                    },
                    {
                        "name": "EarliestStoredSession",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " The earliest session for which previous session info is stored."
                        ]
                    },
                    {
                        "name": "Sessions",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Identity"
                                    }
                                ],
                                "key": 4,
                                "value": 761
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Session information in a rolling window.",
                            " Should have an entry in range `EarliestStoredSession..=CurrentSessionIndex`.",
                            " Does not have any entries before the session index in the first session change notification."
                        ]
                    },
                    {
                        "name": "AccountKeys",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Identity"
                                    }
                                ],
                                "key": 4,
                                "value": 116
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The validator account keys of the validators actively participating in parachain consensus."
                        ]
                    },
                    {
                        "name": "SessionExecutorParams",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Identity"
                                    }
                                ],
                                "key": 4,
                                "value": 278
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Executor parameter set for a given session index"
                        ]
                    }
                ]
            },
            "constants": [],
            "index": 61,
            "docs": []
        },
        {
            "name": "ParasDisputes",
            "storage": {
                "prefix": "ParasDisputes",
                "items": [
                    {
                        "name": "LastPrunedSession",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The last pruned session, if any. All data stored by this module",
                            " references sessions."
                        ]
                    },
                    {
                        "name": "Disputes",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    },
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 764,
                                "value": 765
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " All ongoing or concluded disputes for the last several sessions."
                        ]
                    },
                    {
                        "name": "BackersOnDisputes",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    },
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 764,
                                "value": 766
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Backing votes stored for each dispute.",
                            " This storage is used for slashing."
                        ]
                    },
                    {
                        "name": "Included",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    },
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 764,
                                "value": 4
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " All included blocks on the chain, as well as the block number in this chain that",
                            " should be reverted back to if the candidate is disputed and determined to be invalid."
                        ]
                    },
                    {
                        "name": "Frozen",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 152
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Whether the chain is frozen. Starts as `None`. When this is `Some`,",
                            " the chain will not accept any new parachain blocks for backing or inclusion,",
                            " and its value indicates the last valid block number in the chain.",
                            " It can only be set back to `None` by governance intervention."
                        ]
                    }
                ]
            },
            "calls": 327,
            "events": 480,
            "constants": [],
            "errors": 767,
            "index": 62,
            "docs": []
        },
        {
            "name": "ParasSlashing",
            "storage": {
                "prefix": "ParasSlashing",
                "items": [
                    {
                        "name": "UnappliedSlashes",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    },
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 764,
                                "value": 768
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Validators pending dispute slashes."
                        ]
                    },
                    {
                        "name": "ValidatorSetCounts",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 4
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " `ValidatorSetCount` per session."
                        ]
                    }
                ]
            },
            "calls": 328,
            "constants": [],
            "errors": 772,
            "index": 63,
            "docs": []
        },
        {
            "name": "OnDemand",
            "storage": {
                "prefix": "OnDemand",
                "items": [
                    {
                        "name": "ParaIdAffinity",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 773
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Maps a `ParaId` to `CoreIndex` and keeps track of how many assignments the scheduler has in",
                            " it's lookahead. Keeping track of this affinity prevents parallel execution of the same",
                            " `ParaId` on two or more `CoreIndex`es."
                        ]
                    },
                    {
                        "name": "QueueStatus",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 774
                        },
                        "fallback": "0x000064a7b3b6e00d0000000000000000000000000000000000",
                        "docs": [
                            " Overall status of queue (both free + affinity entries)"
                        ]
                    },
                    {
                        "name": "FreeEntries",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 779
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Priority queue for all orders which don't yet (or not any more) have any core affinity."
                        ]
                    },
                    {
                        "name": "AffinityEntries",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 476,
                                "value": 779
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Queue entries that are currently bound to a particular core due to core affinity."
                        ]
                    },
                    {
                        "name": "Revenue",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 782
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Keeps track of accumulated revenue from on demand order sales."
                        ]
                    }
                ]
            },
            "calls": 332,
            "events": 483,
            "constants": [
                {
                    "name": "TrafficDefaultValue",
                    "type": 436,
                    "value": "0x000064a7b3b6e00d0000000000000000",
                    "docs": [
                        " The default value for the spot traffic multiplier."
                    ]
                },
                {
                    "name": "MaxHistoricalRevenue",
                    "type": 4,
                    "value": "0xa0000000",
                    "docs": [
                        " The maximum number of blocks some historical revenue",
                        " information stored for."
                    ]
                },
                {
                    "name": "PalletId",
                    "type": 608,
                    "value": "0x70792f6f6e646d64",
                    "docs": [
                        " Identifier for the internal revenue balance."
                    ]
                }
            ],
            "errors": 784,
            "index": 64,
            "docs": []
        },
        {
            "name": "CoretimeAssignmentProvider",
            "storage": {
                "prefix": "CoretimeAssignmentProvider",
                "items": [
                    {
                        "name": "CoreSchedules",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox256"
                                    }
                                ],
                                "key": 785,
                                "value": 786
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Scheduled assignment sets.",
                            "",
                            " Assignments as of the given block number. They will go into state once the block number is",
                            " reached (and replace whatever was in there before)."
                        ]
                    },
                    {
                        "name": "CoreDescriptors",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox256"
                                    }
                                ],
                                "key": 476,
                                "value": 787
                            }
                        },
                        "fallback": "0x0000",
                        "docs": [
                            " Assignments which are currently active.",
                            "",
                            " They will be picked from `PendingAssignments` once we reach the scheduled block number in",
                            " `PendingAssignments`."
                        ]
                    }
                ]
            },
            "constants": [],
            "errors": 795,
            "index": 65,
            "docs": []
        },
        {
            "name": "Registrar",
            "storage": {
                "prefix": "Registrar",
                "items": [
                    {
                        "name": "PendingSwap",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 163
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Pending swap operations."
                        ]
                    },
                    {
                        "name": "Paras",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 796
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Amount held on deposit for each para and the original depositor.",
                            "",
                            " The given account ID is responsible for registering the code and initial head data, but may",
                            " only do so if it isn't yet registered. (After that, it's up to governance to do so.)"
                        ]
                    },
                    {
                        "name": "NextFreeParaId",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 163
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " The next free `ParaId`."
                        ]
                    }
                ]
            },
            "calls": 333,
            "events": 484,
            "constants": [
                {
                    "name": "ParaDeposit",
                    "type": 6,
                    "value": "0x0010a5d4e80000000000000000000000",
                    "docs": [
                        " The deposit to be paid to run a on-demand parachain.",
                        " This should include the cost for storing the genesis head and validation code."
                    ]
                },
                {
                    "name": "DataDepositPerByte",
                    "type": 6,
                    "value": "0x80969800000000000000000000000000",
                    "docs": [
                        " The deposit to be paid per byte stored on chain."
                    ]
                }
            ],
            "errors": 797,
            "index": 70,
            "docs": []
        },
        {
            "name": "Slots",
            "storage": {
                "prefix": "Slots",
                "items": [
                    {
                        "name": "Leases",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 798
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Amounts held on deposit for each (possibly future) leased parachain.",
                            "",
                            " The actual amount locked on its behalf by any account at any time is the maximum of the",
                            " second values of the items in this list whose first value is the account.",
                            "",
                            " The first item in the list is the amount locked for the current Lease Period. Following",
                            " items are for the subsequent lease periods.",
                            "",
                            " The default value (an empty list) implies that the parachain no longer exists (or never",
                            " existed) as far as this pallet is concerned.",
                            "",
                            " If a parachain doesn't exist *yet* but is scheduled to exist in the future, then it",
                            " will be left-padded with one or more `None`s to denote the fact that nothing is held on",
                            " deposit for the non-existent chain currently, but is held at some point in the future.",
                            "",
                            " It is illegal for a `None` value to trail in the list."
                        ]
                    }
                ]
            },
            "calls": 334,
            "events": 485,
            "constants": [
                {
                    "name": "LeasePeriod",
                    "type": 4,
                    "value": "0x00751200",
                    "docs": [
                        " The number of blocks over which a single period lasts."
                    ]
                },
                {
                    "name": "LeaseOffset",
                    "type": 4,
                    "value": "0x00100e00",
                    "docs": [
                        " The number of blocks to offset each lease period by."
                    ]
                }
            ],
            "errors": 799,
            "index": 71,
            "docs": []
        },
        {
            "name": "Auctions",
            "storage": {
                "prefix": "Auctions",
                "items": [
                    {
                        "name": "AuctionCounter",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " Number of auctions started so far."
                        ]
                    },
                    {
                        "name": "AuctionInfo",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 32
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Information relating to the current auction, if there is one.",
                            "",
                            " The first item in the tuple is the lease period index that the first of the four",
                            " contiguous lease periods on auction is for. The second is the block number when the",
                            " auction will \"begin to end\", i.e. the first block of the Ending Period of the auction."
                        ]
                    },
                    {
                        "name": "ReservedAmounts",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 800,
                                "value": 6
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Amounts currently reserved in the accounts of the bidders currently winning",
                            " (sub-)ranges."
                        ]
                    },
                    {
                        "name": "Winning",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 4,
                                "value": 801
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The winning bids for each of the 10 ranges at each sample in the final Ending Period of",
                            " the current auction. The map's key is the 0-based index into the Sample Size. The",
                            " first sample of the ending period is 0; the last is `Sample Size - 1`."
                        ]
                    }
                ]
            },
            "calls": 335,
            "events": 486,
            "constants": [
                {
                    "name": "EndingPeriod",
                    "type": 4,
                    "value": "0x40190100",
                    "docs": [
                        " The number of blocks over which an auction may be retroactively ended."
                    ]
                },
                {
                    "name": "SampleLength",
                    "type": 4,
                    "value": "0x14000000",
                    "docs": [
                        " The length of each sample to take during the ending period.",
                        "",
                        " `EndingPeriod` / `SampleLength` = Total # of Samples"
                    ]
                },
                {
                    "name": "SlotRangeCount",
                    "type": 4,
                    "value": "0x24000000",
                    "docs": []
                },
                {
                    "name": "LeasePeriodsPerSlot",
                    "type": 4,
                    "value": "0x08000000",
                    "docs": []
                }
            ],
            "errors": 804,
            "index": 72,
            "docs": []
        },
        {
            "name": "Crowdloan",
            "storage": {
                "prefix": "Crowdloan",
                "items": [
                    {
                        "name": "Funds",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 163,
                                "value": 805
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Info on all of the funds."
                        ]
                    },
                    {
                        "name": "NewRaise",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 737
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The funds that have had additional contributions during the last block. This is used",
                            " in order to determine which funds should submit new or updated bids."
                        ]
                    },
                    {
                        "name": "EndingsCount",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " The number of auctions that have entered into their ending period so far."
                        ]
                    },
                    {
                        "name": "NextFundIndex",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " Tracker for the next available fund index"
                        ]
                    }
                ]
            },
            "calls": 337,
            "events": 487,
            "constants": [
                {
                    "name": "PalletId",
                    "type": 608,
                    "value": "0x70792f6366756e64",
                    "docs": [
                        " `PalletId` for the crowdloan pallet. An appropriate value could be",
                        " `PalletId(*b\"py/cfund\")`"
                    ]
                },
                {
                    "name": "MinContribution",
                    "type": 6,
                    "value": "0x00743ba40b0000000000000000000000",
                    "docs": [
                        " The minimum amount that may be contributed into a crowdloan. Should almost certainly be",
                        " at least `ExistentialDeposit`."
                    ]
                },
                {
                    "name": "RemoveKeysLimit",
                    "type": 4,
                    "value": "0xe8030000",
                    "docs": [
                        " Max number of storage keys to remove per extrinsic call."
                    ]
                }
            ],
            "errors": 807,
            "index": 73,
            "docs": []
        },
        {
            "name": "Coretime",
            "calls": 342,
            "events": 488,
            "constants": [
                {
                    "name": "BrokerId",
                    "type": 4,
                    "value": "0xed030000",
                    "docs": [
                        " The ParaId of the coretime chain."
                    ]
                },
                {
                    "name": "BrokerPotLocation",
                    "type": 68,
                    "value": "0x0101006d6f646c70792f62726f6b650000000000000000000000000000000000000000",
                    "docs": [
                        " The coretime chain pot location."
                    ]
                }
            ],
            "errors": 808,
            "index": 74,
            "docs": []
        },
        {
            "name": "StateTrieMigration",
            "storage": {
                "prefix": "StateTrieMigration",
                "items": [
                    {
                        "name": "MigrationProcess",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 350
                        },
                        "fallback": "0x0000000000000000000000000000",
                        "docs": [
                            " Migration progress.",
                            "",
                            " This stores the snapshot of the last migrated keys. It can be set into motion and move",
                            " forward by any of the means provided by this pallet."
                        ]
                    },
                    {
                        "name": "AutoLimits",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 348
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The limits that are imposed on automatic migrations.",
                            "",
                            " If set to None, then no automatic migration happens."
                        ]
                    },
                    {
                        "name": "SignedMigrationMaxLimits",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 349
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The maximum limits that the signed migration could use.",
                            "",
                            " If not set, no signed submission is allowed."
                        ]
                    }
                ]
            },
            "calls": 347,
            "events": 489,
            "constants": [
                {
                    "name": "MaxKeyLen",
                    "type": 4,
                    "value": "0x00020000",
                    "docs": [
                        " Maximal number of bytes that a key can have.",
                        "",
                        " FRAME itself does not limit the key length.",
                        " The concrete value must therefore depend on your storage usage.",
                        " A [`frame_support::storage::StorageNMap`] for example can have an arbitrary number of",
                        " keys which are then hashed and concatenated, resulting in arbitrarily long keys.",
                        "",
                        " Use the *state migration RPC* to retrieve the length of the longest key in your",
                        " storage: <https://github.com/paritytech/substrate/issues/11642>",
                        "",
                        " The migration will halt with a `Halted` event if this value is too small.",
                        " Since there is no real penalty from over-estimating, it is advised to use a large",
                        " value. The default is 512 byte.",
                        "",
                        " Some key lengths for reference:",
                        " - [`frame_support::storage::StorageValue`]: 32 byte",
                        " - [`frame_support::storage::StorageMap`]: 64 byte",
                        " - [`frame_support::storage::StorageDoubleMap`]: 96 byte",
                        "",
                        " For more info see",
                        " <https://www.shawntabrizi.com/blog/substrate/querying-substrate-storage-via-rpc/>"
                    ]
                }
            ],
            "errors": 491,
            "index": 98,
            "docs": []
        },
        {
            "name": "XcmPallet",
            "storage": {
                "prefix": "XcmPallet",
                "items": [
                    {
                        "name": "QueryCounter",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 12
                        },
                        "fallback": "0x0000000000000000",
                        "docs": [
                            " The latest available query index."
                        ]
                    },
                    {
                        "name": "Queries",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 12,
                                "value": 809
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The ongoing queries."
                        ]
                    },
                    {
                        "name": "AssetTraps",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Identity"
                                    }
                                ],
                                "key": 13,
                                "value": 4
                            }
                        },
                        "fallback": "0x00000000",
                        "docs": [
                            " The existing asset traps.",
                            "",
                            " Key is the blake2 256 hash of (origin, versioned `Assets`) pair. Value is the number of",
                            " times this pair has been trapped (usually just 1 if it exists at all)."
                        ]
                    },
                    {
                        "name": "SafeXcmVersion",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 4
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Default version to encode XCM when latest version of destination is unknown. If `None`,",
                            " then the destinations whose XCM version is unknown are considered unreachable."
                        ]
                    },
                    {
                        "name": "SupportedVersion",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    },
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 814,
                                "value": 4
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The Latest versions that we know various locations support."
                        ]
                    },
                    {
                        "name": "VersionNotifiers",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    },
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 814,
                                "value": 12
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " All locations that we have requested version notifications from."
                        ]
                    },
                    {
                        "name": "VersionNotifyTargets",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    },
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 814,
                                "value": 815
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The target locations that are subscribed to our version changes, as well as the most recent",
                            " of our versions we informed them of."
                        ]
                    },
                    {
                        "name": "VersionDiscoveryQueue",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 816
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
                            " the `u32` counter is the number of times that a send to the destination has been attempted,",
                            " which is used as a prioritization."
                        ]
                    },
                    {
                        "name": "CurrentMigration",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 819
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The current migration's stage, if any."
                        ]
                    },
                    {
                        "name": "RemoteLockedFungibles",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    },
                                    {
                                        "tag": "Blake2128Concat"
                                    },
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 821,
                                "value": 822
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Fungible assets which we know are locked on a remote chain."
                        ]
                    },
                    {
                        "name": "LockedFungibles",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 0,
                                "value": 826
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Fungible assets which we know are locked on this chain."
                        ]
                    },
                    {
                        "name": "XcmExecutionSuspended",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 8
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Global suspension state of the XCM executor."
                        ]
                    },
                    {
                        "name": "ShouldRecordXcm",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 8
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Whether or not incoming XCMs (both executed locally and received) should be recorded.",
                            " Only one XCM program will be recorded at a time.",
                            " This is meant to be used in runtime APIs, and it's advised it stays false",
                            " for all other use cases, so as to not degrade regular performance.",
                            "",
                            " Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]",
                            " implementation in the XCM executor configuration."
                        ]
                    },
                    {
                        "name": "RecordedXcm",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 400
                        },
                        "fallback": "0x00",
                        "docs": [
                            " If [`ShouldRecordXcm`] is set to true, then the last XCM program executed locally",
                            " will be stored here.",
                            " Runtime APIs can fetch the XCM that was executed by accessing this value.",
                            "",
                            " Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]",
                            " implementation in the XCM executor configuration."
                        ]
                    }
                ]
            },
            "calls": 353,
            "events": 492,
            "constants": [],
            "errors": 829,
            "index": 99,
            "docs": []
        },
        {
            "name": "MessageQueue",
            "storage": {
                "prefix": "MessageQueue",
                "items": [
                    {
                        "name": "BookStateFor",
                        "modifier": 1,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 433,
                                "value": 830
                            }
                        },
                        "fallback": "0x0000000000000000000000000000000000000000000000000000000000",
                        "docs": [
                            " The index of the first and last (non-empty) pages."
                        ]
                    },
                    {
                        "name": "ServiceHead",
                        "modifier": 0,
                        "type": {
                            "tag": "plain",
                            "value": 433
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The origin at which we should begin servicing."
                        ]
                    },
                    {
                        "name": "Pages",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    },
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 833,
                                "value": 834
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The map of page indices to pages."
                        ]
                    }
                ]
            },
            "calls": 432,
            "events": 494,
            "constants": [
                {
                    "name": "HeapSize",
                    "type": 4,
                    "value": "0x00000100",
                    "docs": [
                        " The size of the page; this implies the maximum message size which can be sent.",
                        "",
                        " A good value depends on the expected message sizes, their weights, the weight that is",
                        " available for processing them and the maximal needed message size. The maximal message",
                        " size is slightly lower than this as defined by [`MaxMessageLenOf`]."
                    ]
                },
                {
                    "name": "MaxStale",
                    "type": 4,
                    "value": "0x08000000",
                    "docs": [
                        " The maximum number of stale pages (i.e. of overweight messages) allowed before culling",
                        " can happen. Once there are more stale pages than this, then historical pages may be",
                        " dropped, even if they contain unprocessed overweight messages."
                    ]
                },
                {
                    "name": "ServiceWeight",
                    "type": 452,
                    "value": "0x010700a0db215d133333333333333333",
                    "docs": [
                        " The amount of weight (if any) which should be provided to the message queue for",
                        " servicing enqueued items `on_initialize`.",
                        "",
                        " This may be legitimately `None` in the case that you will call",
                        " `ServiceQueues::service_queues` manually or set [`Self::IdleMaxServiceWeight`] to have",
                        " it run in `on_idle`."
                    ]
                },
                {
                    "name": "IdleMaxServiceWeight",
                    "type": 452,
                    "value": "0x010700a0db215d133333333333333333",
                    "docs": [
                        " The maximum amount of weight (if any) to be used from remaining weight `on_idle` which",
                        " should be provided to the message queue for servicing enqueued items `on_idle`.",
                        " Useful for parachains to process messages at the same block they are received.",
                        "",
                        " If `None`, it will not call `ServiceQueues::service_queues` in `on_idle`."
                    ]
                }
            ],
            "errors": 836,
            "index": 100,
            "docs": []
        },
        {
            "name": "AssetRate",
            "storage": {
                "prefix": "AssetRate",
                "items": [
                    {
                        "name": "ConversionRateToNative",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Blake2128Concat"
                                    }
                                ],
                                "key": 55,
                                "value": 436
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Maps an asset to its fixed point representation in the native balance.",
                            "",
                            " E.g. `native_amount = asset_amount * ConversionRateToNative::<T>::get(asset_kind)`"
                        ]
                    }
                ]
            },
            "calls": 435,
            "events": 496,
            "constants": [],
            "errors": 837,
            "index": 101,
            "docs": []
        },
        {
            "name": "Beefy",
            "storage": {
                "prefix": "Beefy",
                "items": [
                    {
                        "name": "Authorities",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 838
                        },
                        "fallback": "0x00",
                        "docs": [
                            " The current authorities set"
                        ]
                    },
                    {
                        "name": "ValidatorSetId",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 12
                        },
                        "fallback": "0x0000000000000000",
                        "docs": [
                            " The current validator set id"
                        ]
                    },
                    {
                        "name": "NextAuthorities",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 838
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Authorities set scheduled to be used with the next session"
                        ]
                    },
                    {
                        "name": "SetIdSession",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Twox64Concat"
                                    }
                                ],
                                "key": 12,
                                "value": 4
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " A mapping from BEEFY set ID to the index of the *most recent* session for which its",
                            " members were responsible.",
                            "",
                            " This is only used for validating equivocation proofs. An equivocation proof must",
                            " contains a key-ownership proof for a given session, therefore we need a way to tie",
                            " together sessions and BEEFY set ids, i.e. we need to validate that a validator",
                            " was the owner of a given key on a given session, and what the active set ID was",
                            " during that session.",
                            "",
                            " TWOX-NOTE: `ValidatorSetId` is not under user control."
                        ]
                    },
                    {
                        "name": "GenesisBlock",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 152
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Block number where BEEFY consensus is enabled/started.",
                            " By changing this (through privileged `set_new_genesis()`), BEEFY consensus is effectively",
                            " restarted from the newly set block number."
                        ]
                    }
                ]
            },
            "calls": 437,
            "constants": [
                {
                    "name": "MaxAuthorities",
                    "type": 4,
                    "value": "0xa0860100",
                    "docs": [
                        " The maximum number of authorities that can be added."
                    ]
                },
                {
                    "name": "MaxNominators",
                    "type": 4,
                    "value": "0x00020000",
                    "docs": [
                        " The maximum number of nominators for each validator."
                    ]
                },
                {
                    "name": "MaxSetIdSessionEntries",
                    "type": 12,
                    "value": "0xa800000000000000",
                    "docs": [
                        " The maximum number of entries to keep in the set id to session index mapping.",
                        "",
                        " Since the `SetIdSession` map is only used for validating equivocations this",
                        " value should relate to the bonding duration of whatever staking system is",
                        " being used (if any). If equivocation handling is not enabled then this value",
                        " can be zero."
                    ]
                }
            ],
            "errors": 840,
            "index": 200,
            "docs": []
        },
        {
            "name": "Mmr",
            "storage": {
                "prefix": "Mmr",
                "items": [
                    {
                        "name": "RootHash",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 13
                        },
                        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                        "docs": [
                            " Latest MMR Root hash."
                        ]
                    },
                    {
                        "name": "NumberOfLeaves",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 12
                        },
                        "fallback": "0x0000000000000000",
                        "docs": [
                            " Current size of the MMR (number of leaves)."
                        ]
                    },
                    {
                        "name": "Nodes",
                        "modifier": 0,
                        "type": {
                            "tag": "map",
                            "value": {
                                "hashers": [
                                    {
                                        "tag": "Identity"
                                    }
                                ],
                                "key": 12,
                                "value": 13
                            }
                        },
                        "fallback": "0x00",
                        "docs": [
                            " Hashes of the nodes in the MMR.",
                            "",
                            " Note this collection only contains MMR peaks, the inner nodes (and leaves)",
                            " are pruned and only stored in the Offchain DB."
                        ]
                    }
                ]
            },
            "constants": [],
            "index": 201,
            "docs": []
        },
        {
            "name": "BeefyMmrLeaf",
            "storage": {
                "prefix": "BeefyMmrLeaf",
                "items": [
                    {
                        "name": "BeefyAuthorities",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 841
                        },
                        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                        "docs": [
                            " Details of current BEEFY authority set."
                        ]
                    },
                    {
                        "name": "BeefyNextAuthorities",
                        "modifier": 1,
                        "type": {
                            "tag": "plain",
                            "value": 841
                        },
                        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                        "docs": [
                            " Details of next BEEFY authority set.",
                            "",
                            " This storage entry is used as cache for calls to `update_beefy_next_authority_set`."
                        ]
                    }
                ]
            },
            "constants": [],
            "index": 202,
            "docs": []
        }
    ],
    "extrinsic": {
        "version": 4,
        "address": 113,
        "call": 93,
        "signature": 341,
        "extra": 842,
        "signedExtensions": [
            {
                "identifier": "CheckNonZeroSender",
                "type": 843,
                "additionalSigned": 35
            },
            {
                "identifier": "CheckSpecVersion",
                "type": 844,
                "additionalSigned": 4
            },
            {
                "identifier": "CheckTxVersion",
                "type": 845,
                "additionalSigned": 4
            },
            {
                "identifier": "CheckGenesis",
                "type": 846,
                "additionalSigned": 13
            },
            {
                "identifier": "CheckMortality",
                "type": 847,
                "additionalSigned": 13
            },
            {
                "identifier": "CheckNonce",
                "type": 849,
                "additionalSigned": 35
            },
            {
                "identifier": "CheckWeight",
                "type": 850,
                "additionalSigned": 35
            },
            {
                "identifier": "ChargeTransactionPayment",
                "type": 851,
                "additionalSigned": 35
            },
            {
                "identifier": "PrevalidateAttests",
                "type": 852,
                "additionalSigned": 35
            },
            {
                "identifier": "CheckMetadataHash",
                "type": 853,
                "additionalSigned": 33
            }
        ]
    },
    "type": 855,
    "apis": [
        {
            "name": "Inflation",
            "methods": [
                {
                    "name": "experimental_inflation_prediction_info",
                    "inputs": [],
                    "output": 856,
                    "docs": [
                        " Return the current estimates of the inflation amount.",
                        "",
                        " This is marked as experimental in light of RFC#89. Nonetheless, its usage is highly",
                        " recommended over trying to read-storage, or re-create the onchain logic."
                    ]
                }
            ],
            "docs": []
        },
        {
            "name": "Core",
            "methods": [
                {
                    "name": "version",
                    "inputs": [],
                    "output": 508,
                    "docs": [
                        " Returns the version of the runtime."
                    ]
                },
                {
                    "name": "execute_block",
                    "inputs": [
                        {
                            "name": "block",
                            "type": 858
                        }
                    ],
                    "output": 35,
                    "docs": [
                        " Execute the given block."
                    ]
                },
                {
                    "name": "initialize_block",
                    "inputs": [
                        {
                            "name": "header",
                            "type": 104
                        }
                    ],
                    "output": 861,
                    "docs": [
                        " Initialize a block with the given header and return the runtime executive mode."
                    ]
                }
            ],
            "docs": [
                " The `Core` runtime api that every Substrate runtime needs to implement."
            ]
        },
        {
            "name": "Metadata",
            "methods": [
                {
                    "name": "metadata",
                    "inputs": [],
                    "output": 862,
                    "docs": [
                        " Returns the metadata of a runtime."
                    ]
                },
                {
                    "name": "metadata_at_version",
                    "inputs": [
                        {
                            "name": "version",
                            "type": 4
                        }
                    ],
                    "output": 863,
                    "docs": [
                        " Returns the metadata at a given version.",
                        "",
                        " If the given `version` isn't supported, this will return `None`.",
                        " Use [`Self::metadata_versions`] to find out about supported metadata version of the runtime."
                    ]
                },
                {
                    "name": "metadata_versions",
                    "inputs": [],
                    "output": 121,
                    "docs": [
                        " Returns the supported metadata versions.",
                        "",
                        " This can be used to call `metadata_at_version`."
                    ]
                }
            ],
            "docs": [
                " The `Metadata` api trait that returns metadata for the runtime."
            ]
        },
        {
            "name": "BlockBuilder",
            "methods": [
                {
                    "name": "apply_extrinsic",
                    "inputs": [
                        {
                            "name": "extrinsic",
                            "type": 859
                        }
                    ],
                    "output": 864,
                    "docs": [
                        " Apply the given extrinsic.",
                        "",
                        " Returns an inclusion outcome which specifies if this extrinsic is included in",
                        " this block or not."
                    ]
                },
                {
                    "name": "finalize_block",
                    "inputs": [],
                    "output": 104,
                    "docs": [
                        " Finish the current block."
                    ]
                },
                {
                    "name": "inherent_extrinsics",
                    "inputs": [
                        {
                            "name": "inherent",
                            "type": 868
                        }
                    ],
                    "output": 860,
                    "docs": [
                        " Generate inherent extrinsics. The inherent data will vary from chain to chain."
                    ]
                },
                {
                    "name": "check_inherents",
                    "inputs": [
                        {
                            "name": "block",
                            "type": 858
                        },
                        {
                            "name": "data",
                            "type": 868
                        }
                    ],
                    "output": 872,
                    "docs": [
                        " Check that the inherents are valid. The inherent data will vary from chain to chain."
                    ]
                }
            ],
            "docs": [
                " The `BlockBuilder` api trait that provides the required functionality for building a block."
            ]
        },
        {
            "name": "NominationPoolsApi",
            "methods": [
                {
                    "name": "pending_rewards",
                    "inputs": [
                        {
                            "name": "who",
                            "type": 0
                        }
                    ],
                    "output": 6,
                    "docs": [
                        " Returns the pending rewards for the member that the AccountId was given for."
                    ]
                },
                {
                    "name": "points_to_balance",
                    "inputs": [
                        {
                            "name": "pool_id",
                            "type": 4
                        },
                        {
                            "name": "points",
                            "type": 6
                        }
                    ],
                    "output": 6,
                    "docs": [
                        " Returns the equivalent balance of `points` for a given pool."
                    ]
                },
                {
                    "name": "balance_to_points",
                    "inputs": [
                        {
                            "name": "pool_id",
                            "type": 4
                        },
                        {
                            "name": "new_funds",
                            "type": 6
                        }
                    ],
                    "output": 6,
                    "docs": [
                        " Returns the equivalent points of `new_funds` for a given pool."
                    ]
                },
                {
                    "name": "pool_pending_slash",
                    "inputs": [
                        {
                            "name": "pool_id",
                            "type": 4
                        }
                    ],
                    "output": 6,
                    "docs": [
                        " Returns the pending slash for a given pool."
                    ]
                },
                {
                    "name": "member_pending_slash",
                    "inputs": [
                        {
                            "name": "member",
                            "type": 0
                        }
                    ],
                    "output": 6,
                    "docs": [
                        " Returns the pending slash for a given pool member."
                    ]
                },
                {
                    "name": "pool_needs_delegate_migration",
                    "inputs": [
                        {
                            "name": "pool_id",
                            "type": 4
                        }
                    ],
                    "output": 8,
                    "docs": [
                        " Returns true if the pool with `pool_id` needs migration.",
                        "",
                        " This can happen when the `pallet-nomination-pools` has switched to using strategy",
                        " [`DelegateStake`](pallet_nomination_pools::adapter::DelegateStake) but the pool",
                        " still has funds that were staked using the older strategy",
                        " [TransferStake](pallet_nomination_pools::adapter::TransferStake). Use",
                        " [`migrate_pool_to_delegate_stake`](pallet_nomination_pools::Call::migrate_pool_to_delegate_stake)",
                        " to migrate the pool."
                    ]
                },
                {
                    "name": "member_needs_delegate_migration",
                    "inputs": [
                        {
                            "name": "member",
                            "type": 0
                        }
                    ],
                    "output": 8,
                    "docs": [
                        " Returns true if the delegated funds of the pool `member` needs migration.",
                        "",
                        " Once a pool has successfully migrated to the strategy",
                        " [`DelegateStake`](pallet_nomination_pools::adapter::DelegateStake), the funds of the",
                        " member can be migrated from pool account to the member's account. Use",
                        " [`migrate_delegation`](pallet_nomination_pools::Call::migrate_delegation)",
                        " to migrate the funds of the pool member."
                    ]
                }
            ],
            "docs": [
                " Runtime api for accessing information about nomination pools."
            ]
        },
        {
            "name": "StakingApi",
            "methods": [
                {
                    "name": "nominations_quota",
                    "inputs": [
                        {
                            "name": "balance",
                            "type": 6
                        }
                    ],
                    "output": 4,
                    "docs": [
                        " Returns the nominations quota for a nominator with a given balance."
                    ]
                },
                {
                    "name": "eras_stakers_page_count",
                    "inputs": [
                        {
                            "name": "era",
                            "type": 4
                        },
                        {
                            "name": "account",
                            "type": 0
                        }
                    ],
                    "output": 4,
                    "docs": [
                        " Returns the page count of exposures for a validator `account` in a given era."
                    ]
                },
                {
                    "name": "pending_rewards",
                    "inputs": [
                        {
                            "name": "era",
                            "type": 4
                        },
                        {
                            "name": "account",
                            "type": 0
                        }
                    ],
                    "output": 8,
                    "docs": [
                        " Returns true if validator `account` has pages to be claimed for the given era."
                    ]
                }
            ],
            "docs": []
        },
        {
            "name": "TaggedTransactionQueue",
            "methods": [
                {
                    "name": "validate_transaction",
                    "inputs": [
                        {
                            "name": "source",
                            "type": 873
                        },
                        {
                            "name": "tx",
                            "type": 859
                        },
                        {
                            "name": "block_hash",
                            "type": 13
                        }
                    ],
                    "output": 874,
                    "docs": [
                        " Validate the transaction.",
                        "",
                        " This method is invoked by the transaction pool to learn details about given transaction.",
                        " The implementation should make sure to verify the correctness of the transaction",
                        " against current state. The given `block_hash` corresponds to the hash of the block",
                        " that is used as current state.",
                        "",
                        " Note that this call may be performed by the pool multiple times and transactions",
                        " might be verified in any possible order."
                    ]
                }
            ],
            "docs": [
                " The `TaggedTransactionQueue` api trait for interfering with the transaction queue."
            ]
        },
        {
            "name": "OffchainWorkerApi",
            "methods": [
                {
                    "name": "offchain_worker",
                    "inputs": [
                        {
                            "name": "header",
                            "type": 104
                        }
                    ],
                    "output": 35,
                    "docs": [
                        " Starts the off-chain task for given block header."
                    ]
                }
            ],
            "docs": [
                " The offchain worker api."
            ]
        },
        {
            "name": "ParachainHost",
            "methods": [
                {
                    "name": "validators",
                    "inputs": [],
                    "output": 710,
                    "docs": [
                        " Get the current validators."
                    ]
                },
                {
                    "name": "validator_groups",
                    "inputs": [],
                    "output": 876,
                    "docs": [
                        " Returns the validator groups and rotation info localized based on the hypothetical child",
                        "  of a block whose state  this is invoked on. Note that `now` in the `GroupRotationInfo`",
                        " should be the successor of the number of the block."
                    ]
                },
                {
                    "name": "availability_cores",
                    "inputs": [],
                    "output": 878,
                    "docs": [
                        " Yields information on all availability cores as relevant to the child block.",
                        " Cores are either free or occupied. Free cores can have paras assigned to them."
                    ]
                },
                {
                    "name": "persisted_validation_data",
                    "inputs": [
                        {
                            "name": "para_id",
                            "type": 163
                        },
                        {
                            "name": "assumption",
                            "type": 884
                        }
                    ],
                    "output": 885,
                    "docs": [
                        " Yields the persisted validation data for the given `ParaId` along with an assumption that",
                        " should be used if the para currently occupies a core.",
                        "",
                        " Returns `None` if either the para is not registered or the assumption is `Freed`",
                        " and the para already occupies a core."
                    ]
                },
                {
                    "name": "assumed_validation_data",
                    "inputs": [
                        {
                            "name": "para_id",
                            "type": 163
                        },
                        {
                            "name": "expected_persisted_validation_data_hash",
                            "type": 13
                        }
                    ],
                    "output": 887,
                    "docs": [
                        " Returns the persisted validation data for the given `ParaId` along with the corresponding",
                        " validation code hash. Instead of accepting assumption about the para, matches the validation",
                        " data hash against an expected one and yields `None` if they're not equal."
                    ]
                },
                {
                    "name": "check_validation_outputs",
                    "inputs": [
                        {
                            "name": "para_id",
                            "type": 163
                        },
                        {
                            "name": "outputs",
                            "type": 303
                        }
                    ],
                    "output": 8,
                    "docs": [
                        " Checks if the given validation outputs pass the acceptance criteria."
                    ]
                },
                {
                    "name": "session_index_for_child",
                    "inputs": [],
                    "output": 4,
                    "docs": [
                        " Returns the session index expected at a child of the block.",
                        "",
                        " This can be used to instantiate a `SigningContext`."
                    ]
                },
                {
                    "name": "validation_code",
                    "inputs": [
                        {
                            "name": "para_id",
                            "type": 163
                        },
                        {
                            "name": "assumption",
                            "type": 884
                        }
                    ],
                    "output": 308,
                    "docs": [
                        " Fetch the validation code used by a para, making the given `OccupiedCoreAssumption`.",
                        "",
                        " Returns `None` if either the para is not registered or the assumption is `Freed`",
                        " and the para already occupies a core."
                    ]
                },
                {
                    "name": "candidate_pending_availability",
                    "inputs": [
                        {
                            "name": "para_id",
                            "type": 163
                        }
                    ],
                    "output": 889,
                    "docs": [
                        " Get the receipt of a candidate pending availability. This returns `Some` for any paras",
                        " assigned to occupied cores in `availability_cores` and `None` otherwise."
                    ]
                },
                {
                    "name": "candidate_events",
                    "inputs": [],
                    "output": 890,
                    "docs": [
                        " Get a vector of events concerning candidates that occurred within a block."
                    ]
                },
                {
                    "name": "dmq_contents",
                    "inputs": [
                        {
                            "name": "recipient",
                            "type": 163
                        }
                    ],
                    "output": 750,
                    "docs": [
                        " Get all the pending inbound messages in the downward message queue for a para."
                    ]
                },
                {
                    "name": "inbound_hrmp_channels_contents",
                    "inputs": [
                        {
                            "name": "recipient",
                            "type": 163
                        }
                    ],
                    "output": 892,
                    "docs": [
                        " Get the contents of all channels addressed to the given recipient. Channels that have no",
                        " messages in them are also included."
                    ]
                },
                {
                    "name": "validation_code_by_hash",
                    "inputs": [
                        {
                            "name": "hash",
                            "type": 302
                        }
                    ],
                    "output": 308,
                    "docs": [
                        " Get the validation code from its hash."
                    ]
                },
                {
                    "name": "on_chain_votes",
                    "inputs": [],
                    "output": 895,
                    "docs": [
                        " Scrape dispute relevant from on-chain, backing votes and resolved disputes."
                    ]
                },
                {
                    "name": "session_info",
                    "inputs": [
                        {
                            "name": "index",
                            "type": 4
                        }
                    ],
                    "output": 896,
                    "docs": [
                        " Get the session info for the given session, if stored.",
                        "",
                        " NOTE: This function is only available since parachain host version 2."
                    ]
                },
                {
                    "name": "submit_pvf_check_statement",
                    "inputs": [
                        {
                            "name": "stmt",
                            "type": 323
                        },
                        {
                            "name": "signature",
                            "type": 295
                        }
                    ],
                    "output": 35,
                    "docs": [
                        " Submits a PVF pre-checking statement into the transaction pool.",
                        "",
                        " NOTE: This function is only available since parachain host version 2."
                    ]
                },
                {
                    "name": "pvfs_require_precheck",
                    "inputs": [],
                    "output": 736,
                    "docs": [
                        " Returns code hashes of PVFs that require pre-checking by validators in the active set.",
                        "",
                        " NOTE: This function is only available since parachain host version 2."
                    ]
                },
                {
                    "name": "validation_code_hash",
                    "inputs": [
                        {
                            "name": "para_id",
                            "type": 163
                        },
                        {
                            "name": "assumption",
                            "type": 884
                        }
                    ],
                    "output": 897,
                    "docs": [
                        " Fetch the hash of the validation code used by a para, making the given `OccupiedCoreAssumption`.",
                        "",
                        " NOTE: This function is only available since parachain host version 2."
                    ]
                },
                {
                    "name": "disputes",
                    "inputs": [],
                    "output": 898,
                    "docs": [
                        " Returns all onchain disputes."
                    ]
                },
                {
                    "name": "session_executor_params",
                    "inputs": [
                        {
                            "name": "session_index",
                            "type": 4
                        }
                    ],
                    "output": 900,
                    "docs": [
                        " Returns execution parameters for the session."
                    ]
                },
                {
                    "name": "unapplied_slashes",
                    "inputs": [],
                    "output": 901,
                    "docs": [
                        " Returns a list of validators that lost a past session dispute and need to be slashed.",
                        " NOTE: This function is only available since parachain host version 5."
                    ]
                },
                {
                    "name": "key_ownership_proof",
                    "inputs": [
                        {
                            "name": "validator_id",
                            "type": 135
                        }
                    ],
                    "output": 903,
                    "docs": [
                        " Returns a merkle proof of a validator session key.",
                        " NOTE: This function is only available since parachain host version 5."
                    ]
                },
                {
                    "name": "submit_report_dispute_lost",
                    "inputs": [
                        {
                            "name": "dispute_proof",
                            "type": 329
                        },
                        {
                            "name": "key_ownership_proof",
                            "type": 904
                        }
                    ],
                    "output": 905,
                    "docs": [
                        " Submit an unsigned extrinsic to slash validators who lost a dispute about",
                        " a candidate of a past session.",
                        " NOTE: This function is only available since parachain host version 5."
                    ]
                },
                {
                    "name": "minimum_backing_votes",
                    "inputs": [],
                    "output": 4,
                    "docs": [
                        " Get the minimum number of backing votes for a parachain candidate.",
                        " This is a staging method! Do not use on production runtimes!"
                    ]
                },
                {
                    "name": "para_backing_state",
                    "inputs": [
                        {
                            "name": "_",
                            "type": 163
                        }
                    ],
                    "output": 906,
                    "docs": [
                        " Returns the state of parachain backing for a given para."
                    ]
                },
                {
                    "name": "async_backing_params",
                    "inputs": [],
                    "output": 277,
                    "docs": [
                        " Returns candidate's acceptance limitations for asynchronous backing for a relay parent."
                    ]
                },
                {
                    "name": "disabled_validators",
                    "inputs": [],
                    "output": 709,
                    "docs": [
                        " Returns a list of all disabled validators at the given block."
                    ]
                },
                {
                    "name": "node_features",
                    "inputs": [],
                    "output": 292,
                    "docs": [
                        " Get node features.",
                        " This is a staging method! Do not use on production runtimes!"
                    ]
                },
                {
                    "name": "approval_voting_params",
                    "inputs": [],
                    "output": 283,
                    "docs": [
                        " Approval voting configuration parameters"
                    ]
                },
                {
                    "name": "claim_queue",
                    "inputs": [],
                    "output": 918,
                    "docs": [
                        " Claim queue"
                    ]
                },
                {
                    "name": "candidates_pending_availability",
                    "inputs": [
                        {
                            "name": "para_id",
                            "type": 163
                        }
                    ],
                    "output": 921,
                    "docs": [
                        " Elastic scaling support"
                    ]
                }
            ],
            "docs": [
                " The API for querying the state of parachains on-chain."
            ]
        },
        {
            "name": "BeefyApi",
            "methods": [
                {
                    "name": "beefy_genesis",
                    "inputs": [],
                    "output": 152,
                    "docs": [
                        " Return the block number where BEEFY consensus is enabled/started"
                    ]
                },
                {
                    "name": "validator_set",
                    "inputs": [],
                    "output": 922,
                    "docs": [
                        " Return the current active BEEFY validator set"
                    ]
                },
                {
                    "name": "submit_report_equivocation_unsigned_extrinsic",
                    "inputs": [
                        {
                            "name": "equivocation_proof",
                            "type": 438
                        },
                        {
                            "name": "key_owner_proof",
                            "type": 924
                        }
                    ],
                    "output": 905,
                    "docs": [
                        " Submits an unsigned extrinsic to report an equivocation. The caller",
                        " must provide the equivocation proof and a key ownership proof",
                        " (should be obtained using `generate_key_ownership_proof`). The",
                        " extrinsic will be unsigned and should only be accepted for local",
                        " authorship (not to be broadcast to the network). This method returns",
                        " `None` when creation of the extrinsic fails, e.g. if equivocation",
                        " reporting is disabled for the given runtime (i.e. this method is",
                        " hardcoded to return `None`). Only useful in an offchain context."
                    ]
                },
                {
                    "name": "generate_key_ownership_proof",
                    "inputs": [
                        {
                            "name": "set_id",
                            "type": 12
                        },
                        {
                            "name": "authority_id",
                            "type": 138
                        }
                    ],
                    "output": 925,
                    "docs": [
                        " Generates a proof of key ownership for the given authority in the",
                        " given set. An example usage of this module is coupled with the",
                        " session historical module to prove that a given authority key is",
                        " tied to a given staking identity during a specific session. Proofs",
                        " of key ownership are necessary for submitting equivocation reports.",
                        " NOTE: even though the API takes a `set_id` as parameter the current",
                        " implementations ignores this parameter and instead relies on this",
                        " method being called at the correct block height, i.e. any point at",
                        " which the given set id is live on-chain. Future implementations will",
                        " instead use indexed data through an offchain worker, not requiring",
                        " older states to be available."
                    ]
                }
            ],
            "docs": [
                " API necessary for BEEFY voters."
            ]
        },
        {
            "name": "MmrApi",
            "methods": [
                {
                    "name": "mmr_root",
                    "inputs": [],
                    "output": 926,
                    "docs": [
                        " Return the on-chain MMR root hash."
                    ]
                },
                {
                    "name": "mmr_leaf_count",
                    "inputs": [],
                    "output": 928,
                    "docs": [
                        " Return the number of MMR blocks in the chain."
                    ]
                },
                {
                    "name": "generate_proof",
                    "inputs": [
                        {
                            "name": "block_numbers",
                            "type": 121
                        },
                        {
                            "name": "best_known_block_number",
                            "type": 152
                        }
                    ],
                    "output": 929,
                    "docs": [
                        " Generate MMR proof for a series of block numbers. If `best_known_block_number = Some(n)`,",
                        " use historical MMR state at given block height `n`. Else, use current MMR state."
                    ]
                },
                {
                    "name": "verify_proof",
                    "inputs": [
                        {
                            "name": "leaves",
                            "type": 931
                        },
                        {
                            "name": "proof",
                            "type": 933
                        }
                    ],
                    "output": 934,
                    "docs": [
                        " Verify MMR proof against on-chain MMR for a batch of leaves.",
                        "",
                        " Note this function will use on-chain MMR root hash and check if the proof matches the hash.",
                        " Note, the leaves should be sorted such that corresponding leaves and leaf indices have the",
                        " same position in both the `leaves` vector and the `leaf_indices` vector contained in the [LeafProof]"
                    ]
                },
                {
                    "name": "verify_proof_stateless",
                    "inputs": [
                        {
                            "name": "root",
                            "type": 13
                        },
                        {
                            "name": "leaves",
                            "type": 931
                        },
                        {
                            "name": "proof",
                            "type": 933
                        }
                    ],
                    "output": 934,
                    "docs": [
                        " Verify MMR proof against given root hash for a batch of leaves.",
                        "",
                        " Note this function does not require any on-chain storage - the",
                        " proof is verified against given MMR root hash.",
                        "",
                        " Note, the leaves should be sorted such that corresponding leaves and leaf indices have the",
                        " same position in both the `leaves` vector and the `leaf_indices` vector contained in the [LeafProof]"
                    ]
                }
            ],
            "docs": [
                " API to interact with MMR pallet."
            ]
        },
        {
            "name": "BeefyMmrApi",
            "methods": [
                {
                    "name": "authority_set_proof",
                    "inputs": [],
                    "output": 841,
                    "docs": [
                        " Return the currently active BEEFY authority set proof."
                    ]
                },
                {
                    "name": "next_authority_set_proof",
                    "inputs": [],
                    "output": 841,
                    "docs": [
                        " Return the next/queued BEEFY authority set proof."
                    ]
                }
            ],
            "docs": [
                " API useful for BEEFY light clients."
            ]
        },
        {
            "name": "GrandpaApi",
            "methods": [
                {
                    "name": "grandpa_authorities",
                    "inputs": [],
                    "output": 51,
                    "docs": [
                        " Get the current GRANDPA authorities and weights. This should not change except",
                        " for when changes are scheduled and the corresponding delay has passed.",
                        "",
                        " When called at block B, it will return the set of authorities that should be",
                        " used to finalize descendants of this block (B+1, B+2, ...). The block B itself",
                        " is finalized by the authorities from block B-1."
                    ]
                },
                {
                    "name": "submit_report_equivocation_unsigned_extrinsic",
                    "inputs": [
                        {
                            "name": "equivocation_proof",
                            "type": 141
                        },
                        {
                            "name": "key_owner_proof",
                            "type": 924
                        }
                    ],
                    "output": 905,
                    "docs": [
                        " Submits an unsigned extrinsic to report an equivocation. The caller",
                        " must provide the equivocation proof and a key ownership proof",
                        " (should be obtained using `generate_key_ownership_proof`). The",
                        " extrinsic will be unsigned and should only be accepted for local",
                        " authorship (not to be broadcast to the network). This method returns",
                        " `None` when creation of the extrinsic fails, e.g. if equivocation",
                        " reporting is disabled for the given runtime (i.e. this method is",
                        " hardcoded to return `None`). Only useful in an offchain context."
                    ]
                },
                {
                    "name": "generate_key_ownership_proof",
                    "inputs": [
                        {
                            "name": "set_id",
                            "type": 12
                        },
                        {
                            "name": "authority_id",
                            "type": 53
                        }
                    ],
                    "output": 925,
                    "docs": [
                        " Generates a proof of key ownership for the given authority in the",
                        " given set. An example usage of this module is coupled with the",
                        " session historical module to prove that a given authority key is",
                        " tied to a given staking identity during a specific session. Proofs",
                        " of key ownership are necessary for submitting equivocation reports.",
                        " NOTE: even though the API takes a `set_id` as parameter the current",
                        " implementations ignore this parameter and instead rely on this",
                        " method being called at the correct block height, i.e. any point at",
                        " which the given set id is live on-chain. Future implementations will",
                        " instead use indexed data through an offchain worker, not requiring",
                        " older states to be available."
                    ]
                },
                {
                    "name": "current_set_id",
                    "inputs": [],
                    "output": 12,
                    "docs": [
                        " Get current GRANDPA authority set id."
                    ]
                }
            ],
            "docs": [
                " APIs for integrating the GRANDPA finality gadget into runtimes.",
                " This should be implemented on the runtime side.",
                "",
                " This is primarily used for negotiating authority-set changes for the",
                " gadget. GRANDPA uses a signaling model of changing authority sets:",
                " changes should be signaled with a delay of N blocks, and then automatically",
                " applied in the runtime after those N blocks have passed.",
                "",
                " The consensus protocol will coordinate the handoff externally."
            ]
        },
        {
            "name": "BabeApi",
            "methods": [
                {
                    "name": "configuration",
                    "inputs": [],
                    "output": 935,
                    "docs": [
                        " Return the configuration for BABE."
                    ]
                },
                {
                    "name": "current_epoch_start",
                    "inputs": [],
                    "output": 106,
                    "docs": [
                        " Returns the slot that started the current epoch."
                    ]
                },
                {
                    "name": "current_epoch",
                    "inputs": [],
                    "output": 936,
                    "docs": [
                        " Returns information regarding the current epoch."
                    ]
                },
                {
                    "name": "next_epoch",
                    "inputs": [],
                    "output": 936,
                    "docs": [
                        " Returns information regarding the next epoch (which was already",
                        " previously announced)."
                    ]
                },
                {
                    "name": "generate_key_ownership_proof",
                    "inputs": [
                        {
                            "name": "slot",
                            "type": 106
                        },
                        {
                            "name": "authority_id",
                            "type": 105
                        }
                    ],
                    "output": 937,
                    "docs": [
                        " Generates a proof of key ownership for the given authority in the",
                        " current epoch. An example usage of this module is coupled with the",
                        " session historical module to prove that a given authority key is",
                        " tied to a given staking identity during a specific session. Proofs",
                        " of key ownership are necessary for submitting equivocation reports.",
                        " NOTE: even though the API takes a `slot` as parameter the current",
                        " implementations ignores this parameter and instead relies on this",
                        " method being called at the correct block height, i.e. any point at",
                        " which the epoch for the given slot is live on-chain. Future",
                        " implementations will instead use indexed data through an offchain",
                        " worker, not requiring older states to be available."
                    ]
                },
                {
                    "name": "submit_report_equivocation_unsigned_extrinsic",
                    "inputs": [
                        {
                            "name": "equivocation_proof",
                            "type": 103
                        },
                        {
                            "name": "key_owner_proof",
                            "type": 938
                        }
                    ],
                    "output": 905,
                    "docs": [
                        " Submits an unsigned extrinsic to report an equivocation. The caller",
                        " must provide the equivocation proof and a key ownership proof",
                        " (should be obtained using `generate_key_ownership_proof`). The",
                        " extrinsic will be unsigned and should only be accepted for local",
                        " authorship (not to be broadcast to the network). This method returns",
                        " `None` when creation of the extrinsic fails, e.g. if equivocation",
                        " reporting is disabled for the given runtime (i.e. this method is",
                        " hardcoded to return `None`). Only useful in an offchain context."
                    ]
                }
            ],
            "docs": [
                " API necessary for block authorship with BABE."
            ]
        },
        {
            "name": "AuthorityDiscoveryApi",
            "methods": [
                {
                    "name": "authorities",
                    "inputs": [],
                    "output": 602,
                    "docs": [
                        " Retrieve authority identifiers of the current and next authority set."
                    ]
                }
            ],
            "docs": [
                " The authority discovery api.",
                "",
                " This api is used by the `client/authority-discovery` module to retrieve identifiers",
                " of the current and next authority set."
            ]
        },
        {
            "name": "SessionKeys",
            "methods": [
                {
                    "name": "generate_session_keys",
                    "inputs": [
                        {
                            "name": "seed",
                            "type": 820
                        }
                    ],
                    "output": 14,
                    "docs": [
                        " Generate a set of session keys with optionally using the given seed.",
                        " The keys should be stored within the keystore exposed via runtime",
                        " externalities.",
                        "",
                        " The seed needs to be a valid `utf8` string.",
                        "",
                        " Returns the concatenated SCALE encoded public keys."
                    ]
                },
                {
                    "name": "decode_session_keys",
                    "inputs": [
                        {
                            "name": "encoded",
                            "type": 14
                        }
                    ],
                    "output": 939,
                    "docs": [
                        " Decode the given public session keys.",
                        "",
                        " Returns the list of public raw public keys + key type."
                    ]
                }
            ],
            "docs": [
                " Session keys runtime api."
            ]
        },
        {
            "name": "AccountNonceApi",
            "methods": [
                {
                    "name": "account_nonce",
                    "inputs": [
                        {
                            "name": "account",
                            "type": 0
                        }
                    ],
                    "output": 4,
                    "docs": [
                        " Get current account nonce of given `AccountId`."
                    ]
                }
            ],
            "docs": [
                " The API to query account nonce."
            ]
        },
        {
            "name": "TransactionPaymentApi",
            "methods": [
                {
                    "name": "query_info",
                    "inputs": [
                        {
                            "name": "uxt",
                            "type": 859
                        },
                        {
                            "name": "len",
                            "type": 4
                        }
                    ],
                    "output": 942,
                    "docs": []
                },
                {
                    "name": "query_fee_details",
                    "inputs": [
                        {
                            "name": "uxt",
                            "type": 859
                        },
                        {
                            "name": "len",
                            "type": 4
                        }
                    ],
                    "output": 943,
                    "docs": []
                },
                {
                    "name": "query_weight_to_fee",
                    "inputs": [
                        {
                            "name": "weight",
                            "type": 10
                        }
                    ],
                    "output": 6,
                    "docs": []
                },
                {
                    "name": "query_length_to_fee",
                    "inputs": [
                        {
                            "name": "length",
                            "type": 4
                        }
                    ],
                    "output": 6,
                    "docs": []
                }
            ],
            "docs": []
        },
        {
            "name": "TransactionPaymentCallApi",
            "methods": [
                {
                    "name": "query_call_info",
                    "inputs": [
                        {
                            "name": "call",
                            "type": 93
                        },
                        {
                            "name": "len",
                            "type": 4
                        }
                    ],
                    "output": 942,
                    "docs": [
                        " Query information of a dispatch class, weight, and fee of a given encoded `Call`."
                    ]
                },
                {
                    "name": "query_call_fee_details",
                    "inputs": [
                        {
                            "name": "call",
                            "type": 93
                        },
                        {
                            "name": "len",
                            "type": 4
                        }
                    ],
                    "output": 943,
                    "docs": [
                        " Query fee details of a given encoded `Call`."
                    ]
                },
                {
                    "name": "query_weight_to_fee",
                    "inputs": [
                        {
                            "name": "weight",
                            "type": 10
                        }
                    ],
                    "output": 6,
                    "docs": [
                        " Query the output of the current `WeightToFee` given some input."
                    ]
                },
                {
                    "name": "query_length_to_fee",
                    "inputs": [
                        {
                            "name": "length",
                            "type": 4
                        }
                    ],
                    "output": 6,
                    "docs": [
                        " Query the output of the current `LengthToFee` given some input."
                    ]
                }
            ],
            "docs": []
        },
        {
            "name": "XcmPaymentApi",
            "methods": [
                {
                    "name": "query_acceptable_payment_assets",
                    "inputs": [
                        {
                            "name": "xcm_version",
                            "type": 4
                        }
                    ],
                    "output": 946,
                    "docs": [
                        " Returns a list of acceptable payment assets.",
                        "",
                        " # Arguments",
                        "",
                        " * `xcm_version`: Version."
                    ]
                },
                {
                    "name": "query_xcm_weight",
                    "inputs": [
                        {
                            "name": "message",
                            "type": 354
                        }
                    ],
                    "output": 949,
                    "docs": [
                        " Returns a weight needed to execute a XCM.",
                        "",
                        " # Arguments",
                        "",
                        " * `message`: `VersionedXcm`."
                    ]
                },
                {
                    "name": "query_weight_to_asset_fee",
                    "inputs": [
                        {
                            "name": "weight",
                            "type": 10
                        },
                        {
                            "name": "asset",
                            "type": 431
                        }
                    ],
                    "output": 950,
                    "docs": [
                        " Converts a weight into a fee for the specified `AssetId`.",
                        "",
                        " # Arguments",
                        "",
                        " * `weight`: convertible `Weight`.",
                        " * `asset`: `VersionedAssetId`."
                    ]
                },
                {
                    "name": "query_delivery_fees",
                    "inputs": [
                        {
                            "name": "destination",
                            "type": 81
                        },
                        {
                            "name": "message",
                            "type": 354
                        }
                    ],
                    "output": 951,
                    "docs": [
                        " Get delivery fees for sending a specific `message` to a `destination`.",
                        " These always come in a specific asset, defined by the chain.",
                        "",
                        " # Arguments",
                        " * `message`: The message that'll be sent, necessary because most delivery fees are based on the",
                        "   size of the message.",
                        " * `destination`: The destination to send the message to. Different destinations may use",
                        "   different senders that charge different fees."
                    ]
                }
            ],
            "docs": [
                " A trait of XCM payment API.",
                "",
                " API provides functionality for obtaining:",
                "",
                " * the weight required to execute an XCM message,",
                " * a list of acceptable `AssetId`s for message execution payment,",
                " * the cost of the weight in the specified acceptable `AssetId`.",
                " * the fees for an XCM message delivery.",
                "",
                " To determine the execution weight of the calls required for",
                " [`xcm::latest::Instruction::Transact`] instruction, `TransactionPaymentCallApi` can be used."
            ]
        },
        {
            "name": "DryRunApi",
            "methods": [
                {
                    "name": "dry_run_call",
                    "inputs": [
                        {
                            "name": "origin",
                            "type": 159
                        },
                        {
                            "name": "call",
                            "type": 93
                        }
                    ],
                    "output": 952,
                    "docs": [
                        " Dry run call."
                    ]
                },
                {
                    "name": "dry_run_xcm",
                    "inputs": [
                        {
                            "name": "origin_location",
                            "type": 81
                        },
                        {
                            "name": "xcm",
                            "type": 419
                        }
                    ],
                    "output": 960,
                    "docs": [
                        " Dry run XCM program"
                    ]
                }
            ],
            "docs": [
                " API for dry-running extrinsics and XCM programs to get the programs that need to be passed to the fees API.",
                "",
                " All calls return a vector of tuples (location, xcm) where each \"xcm\" is executed in \"location\".",
                " If there's local execution, the location will be \"Here\".",
                " This vector can be used to calculate both execution and delivery fees.",
                "",
                " Calls or XCMs might fail when executed, this doesn't mean the result of these calls will be an `Err`.",
                " In those cases, there might still be a valid result, with the execution error inside it.",
                " The only reasons why these calls might return an error are listed in the [`Error`] enum."
            ]
        },
        {
            "name": "LocationToAccountApi",
            "methods": [
                {
                    "name": "convert_location",
                    "inputs": [
                        {
                            "name": "location",
                            "type": 81
                        }
                    ],
                    "output": 962,
                    "docs": [
                        " Converts `Location` to `AccountId`."
                    ]
                }
            ],
            "docs": [
                " API for useful conversions between XCM `Location` and `AccountId`."
            ]
        },
        {
            "name": "GenesisBuilder",
            "methods": [
                {
                    "name": "build_state",
                    "inputs": [
                        {
                            "name": "json",
                            "type": 14
                        }
                    ],
                    "output": 964,
                    "docs": [
                        " Build `RuntimeGenesisConfig` from a JSON blob not using any defaults and store it in the",
                        " storage.",
                        "",
                        " In the case of a FRAME-based runtime, this function deserializes the full `RuntimeGenesisConfig` from the given JSON blob and",
                        " puts it into the storage. If the provided JSON blob is incorrect or incomplete or the",
                        " deserialization fails, an error is returned.",
                        "",
                        " Please note that provided JSON blob must contain all `RuntimeGenesisConfig` fields, no",
                        " defaults will be used."
                    ]
                },
                {
                    "name": "get_preset",
                    "inputs": [
                        {
                            "name": "id",
                            "type": 965
                        }
                    ],
                    "output": 820,
                    "docs": [
                        " Returns a JSON blob representation of the built-in `RuntimeGenesisConfig` identified by",
                        " `id`.",
                        "",
                        " If `id` is `None` the function returns JSON blob representation of the default",
                        " `RuntimeGenesisConfig` struct of the runtime. Implementation must provide default",
                        " `RuntimeGenesisConfig`.",
                        "",
                        " Otherwise function returns a JSON representation of the built-in, named",
                        " `RuntimeGenesisConfig` preset identified by `id`, or `None` if such preset does not",
                        " exists. Returned `Vec<u8>` contains bytes of JSON blob (patch) which comprises a list of",
                        " (potentially nested) key-value pairs that are intended for customizing the default",
                        " runtime genesis config. The patch shall be merged (rfc7386) with the JSON representation",
                        " of the default `RuntimeGenesisConfig` to create a comprehensive genesis config that can",
                        " be used in `build_state` method."
                    ]
                },
                {
                    "name": "preset_names",
                    "inputs": [],
                    "output": 966,
                    "docs": [
                        " Returns a list of identifiers for available builtin `RuntimeGenesisConfig` presets.",
                        "",
                        " The presets from the list can be queried with [`GenesisBuilder::get_preset`] method. If",
                        " no named presets are provided by the runtime the list is empty."
                    ]
                }
            ],
            "docs": [
                " API to interact with RuntimeGenesisConfig for the runtime"
            ]
        }
    ],
    "outerEnums": {
        "call": 93,
        "event": 21,
        "error": 967
    },
    "custom": []
}